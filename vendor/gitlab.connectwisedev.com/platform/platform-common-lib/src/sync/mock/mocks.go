// Automatically generated by MockGen. DO NOT EDIT!
// Source: gitlab.connectwisedev.com/platform/platform-common-lib/src/sync (interfaces: Service)

package mock

import (
	sync "gitlab.connectwisedev.com/platform/platform-common-lib/src/sync"
	rest "gitlab.connectwisedev.com/platform/platform-common-lib/src/web/rest"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *_MockServiceRecorder
}

// Recorder for MockService (not exported)
type _MockServiceRecorder struct {
	mock *MockService
}

func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &_MockServiceRecorder{mock}
	return mock
}

func (_m *MockService) EXPECT() *_MockServiceRecorder {
	return _m.recorder
}

func (_m *MockService) Get(_param0 string) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockService) Health() rest.Statuser {
	ret := _m.ctrl.Call(_m, "Health")
	ret0, _ := ret[0].(rest.Statuser)
	return ret0
}

func (_mr *_MockServiceRecorder) Health() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Health")
}

func (_m *MockService) Listen(_param0 string, _param1 chan sync.Response) error {
	ret := _m.ctrl.Call(_m, "Listen", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceRecorder) Listen(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Listen", arg0, arg1)
}

func (_m *MockService) Send(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "Send", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Send", arg0, arg1)
}
