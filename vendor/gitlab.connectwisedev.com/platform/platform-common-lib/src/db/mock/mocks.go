// Automatically generated by MockGen. DO NOT EDIT!
// Source: gitlab.connectwisedev.com/platform/platform-common-lib/src/db (interfaces: DatabaseProvider)

package mock

import (
	db "gitlab.connectwisedev.com/platform/platform-common-lib/src/db"
	gomock "github.com/golang/mock/gomock"
)

// Mock of DatabaseProvider interface
type MockDatabaseProvider struct {
	ctrl     *gomock.Controller
	recorder *_MockDatabaseProviderRecorder
}

// Recorder for MockDatabaseProvider (not exported)
type _MockDatabaseProviderRecorder struct {
	mock *MockDatabaseProvider
}

func NewMockDatabaseProvider(ctrl *gomock.Controller) *MockDatabaseProvider {
	mock := &MockDatabaseProvider{ctrl: ctrl}
	mock.recorder = &_MockDatabaseProviderRecorder{mock}
	return mock
}

func (_m *MockDatabaseProvider) EXPECT() *_MockDatabaseProviderRecorder {
	return _m.recorder
}

func (_m *MockDatabaseProvider) CloseStatement(_param0 string) error {
	ret := _m.ctrl.Call(_m, "CloseStatement", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseProviderRecorder) CloseStatement(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CloseStatement", arg0)
}

func (_m *MockDatabaseProvider) Exec(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Exec", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseProviderRecorder) Exec(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Exec", arg0)
}

func (_m *MockDatabaseProvider) ExecWithPrepare(_param0 string, _param1 ...interface{}) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ExecWithPrepare", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseProviderRecorder) ExecWithPrepare(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecWithPrepare", _s...)
}

func (_m *MockDatabaseProvider) Select(_param0 string) ([]map[string]interface{}, error) {
	ret := _m.ctrl.Call(_m, "Select", _param0)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseProviderRecorder) Select(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Select", arg0)
}

func (_m *MockDatabaseProvider) SelectAndProcess(_param0 string, _param1 db.ProcessRow) {
	_m.ctrl.Call(_m, "SelectAndProcess", _param0, _param1)
}

func (_mr *_MockDatabaseProviderRecorder) SelectAndProcess(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SelectAndProcess", arg0, arg1)
}

func (_m *MockDatabaseProvider) SelectWithPrepare(_param0 string, _param1 ...interface{}) ([]map[string]interface{}, error) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SelectWithPrepare", _s...)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseProviderRecorder) SelectWithPrepare(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SelectWithPrepare", _s...)
}

func (_m *MockDatabaseProvider) SelectWithPrepareAndProcess(_param0 string, _param1 db.ProcessRow, _param2 ...interface{}) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "SelectWithPrepareAndProcess", _s...)
}

func (_mr *_MockDatabaseProviderRecorder) SelectWithPrepareAndProcess(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SelectWithPrepareAndProcess", _s...)
}
