// Automatically generated by MockGen. DO NOT EDIT!
// Source: gitlab.connectwisedev.com/platform/platform-common-lib/src/plugin/protocol (interfaces: Client,Server,ClientFactory,ServerFactory,ResponseSerializer)

package mock

import (
	protocol "gitlab.connectwisedev.com/platform/platform-common-lib/src/plugin/protocol"
	gomock "github.com/golang/mock/gomock"
	io "io"
)

// Mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *_MockClientRecorder
}

// Recorder for MockClient (not exported)
type _MockClientRecorder struct {
	mock *MockClient
}

func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &_MockClientRecorder{mock}
	return mock
}

func (_m *MockClient) EXPECT() *_MockClientRecorder {
	return _m.recorder
}

func (_m *MockClient) ReceiveResponse() (*protocol.Response, error) {
	ret := _m.ctrl.Call(_m, "ReceiveResponse")
	ret0, _ := ret[0].(*protocol.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) ReceiveResponse() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReceiveResponse")
}

func (_m *MockClient) SendRequest(_param0 *protocol.Request) error {
	ret := _m.ctrl.Call(_m, "SendRequest", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) SendRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendRequest", arg0)
}

// Mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *_MockServerRecorder
}

// Recorder for MockServer (not exported)
type _MockServerRecorder struct {
	mock *MockServer
}

func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &_MockServerRecorder{mock}
	return mock
}

func (_m *MockServer) EXPECT() *_MockServerRecorder {
	return _m.recorder
}

func (_m *MockServer) ReceiveRequest() (*protocol.Request, error) {
	ret := _m.ctrl.Call(_m, "ReceiveRequest")
	ret0, _ := ret[0].(*protocol.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) ReceiveRequest() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReceiveRequest")
}

func (_m *MockServer) RegisterRoutes(_param0 ...*protocol.Route) {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "RegisterRoutes", _s...)
}

func (_mr *_MockServerRecorder) RegisterRoutes(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterRoutes", arg0...)
}

func (_m *MockServer) SendResponse(_param0 *protocol.Response) error {
	ret := _m.ctrl.Call(_m, "SendResponse", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) SendResponse(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendResponse", arg0)
}

func (_m *MockServer) SetReqRespStream(_param0 io.Reader, _param1 io.Writer) {
	_m.ctrl.Call(_m, "SetReqRespStream", _param0, _param1)
}

func (_mr *_MockServerRecorder) SetReqRespStream(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReqRespStream", arg0, arg1)
}

// Mock of ClientFactory interface
type MockClientFactory struct {
	ctrl     *gomock.Controller
	recorder *_MockClientFactoryRecorder
}

// Recorder for MockClientFactory (not exported)
type _MockClientFactoryRecorder struct {
	mock *MockClientFactory
}

func NewMockClientFactory(ctrl *gomock.Controller) *MockClientFactory {
	mock := &MockClientFactory{ctrl: ctrl}
	mock.recorder = &_MockClientFactoryRecorder{mock}
	return mock
}

func (_m *MockClientFactory) EXPECT() *_MockClientFactoryRecorder {
	return _m.recorder
}

func (_m *MockClientFactory) GetClient(_param0 io.Writer, _param1 io.Reader) protocol.Client {
	ret := _m.ctrl.Call(_m, "GetClient", _param0, _param1)
	ret0, _ := ret[0].(protocol.Client)
	return ret0
}

func (_mr *_MockClientFactoryRecorder) GetClient(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetClient", arg0, arg1)
}

func (_m *MockClientFactory) GetResponseSerializer() protocol.ResponseSerializer {
	ret := _m.ctrl.Call(_m, "GetResponseSerializer")
	ret0, _ := ret[0].(protocol.ResponseSerializer)
	return ret0
}

func (_mr *_MockClientFactoryRecorder) GetResponseSerializer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetResponseSerializer")
}

// Mock of ServerFactory interface
type MockServerFactory struct {
	ctrl     *gomock.Controller
	recorder *_MockServerFactoryRecorder
}

// Recorder for MockServerFactory (not exported)
type _MockServerFactoryRecorder struct {
	mock *MockServerFactory
}

func NewMockServerFactory(ctrl *gomock.Controller) *MockServerFactory {
	mock := &MockServerFactory{ctrl: ctrl}
	mock.recorder = &_MockServerFactoryRecorder{mock}
	return mock
}

func (_m *MockServerFactory) EXPECT() *_MockServerFactoryRecorder {
	return _m.recorder
}

func (_m *MockServerFactory) GetServer(_param0 io.Reader, _param1 io.Writer) protocol.Server {
	ret := _m.ctrl.Call(_m, "GetServer", _param0, _param1)
	ret0, _ := ret[0].(protocol.Server)
	return ret0
}

func (_mr *_MockServerFactoryRecorder) GetServer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetServer", arg0, arg1)
}

// Mock of ResponseSerializer interface
type MockResponseSerializer struct {
	ctrl     *gomock.Controller
	recorder *_MockResponseSerializerRecorder
}

// Recorder for MockResponseSerializer (not exported)
type _MockResponseSerializerRecorder struct {
	mock *MockResponseSerializer
}

func NewMockResponseSerializer(ctrl *gomock.Controller) *MockResponseSerializer {
	mock := &MockResponseSerializer{ctrl: ctrl}
	mock.recorder = &_MockResponseSerializerRecorder{mock}
	return mock
}

func (_m *MockResponseSerializer) EXPECT() *_MockResponseSerializerRecorder {
	return _m.recorder
}

func (_m *MockResponseSerializer) Deserialize(_param0 io.Reader) (*protocol.Response, error) {
	ret := _m.ctrl.Call(_m, "Deserialize", _param0)
	ret0, _ := ret[0].(*protocol.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockResponseSerializerRecorder) Deserialize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Deserialize", arg0)
}

func (_m *MockResponseSerializer) Serialize(_param0 *protocol.Response, _param1 io.Writer) error {
	ret := _m.ctrl.Call(_m, "Serialize", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockResponseSerializerRecorder) Serialize(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Serialize", arg0, arg1)
}
