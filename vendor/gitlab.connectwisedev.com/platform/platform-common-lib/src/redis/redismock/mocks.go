// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.connectwisedev.com/platform/platform-common-lib/src/redis (interfaces: Client,Pipeliner)

// Package redismock is a generated GoMock package.
package redismock

import (
	reflect "reflect"
	time "time"

	redis "github.com/go-redis/redis"
	gomock "github.com/golang/mock/gomock"
	redis0 "gitlab.connectwisedev.com/platform/platform-common-lib/src/redis"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockClient) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// CreatePipeline mocks base method
func (m *MockClient) CreatePipeline() redis0.Pipeliner {
	ret := m.ctrl.Call(m, "CreatePipeline")
	ret0, _ := ret[0].(redis0.Pipeliner)
	return ret0
}

// CreatePipeline indicates an expected call of CreatePipeline
func (mr *MockClientMockRecorder) CreatePipeline() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockClient)(nil).CreatePipeline))
}

// Delete mocks base method
func (m *MockClient) Delete(arg0 ...string) error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockClientMockRecorder) Delete(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), arg0...)
}

// Exists mocks base method
func (m *MockClient) Exists(arg0 string) (int64, error) {
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockClientMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockClient)(nil).Exists), arg0)
}

// Expire mocks base method
func (m *MockClient) Expire(arg0 string, arg1 time.Duration) (bool, error) {
	ret := m.ctrl.Call(m, "Expire", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Expire indicates an expected call of Expire
func (mr *MockClientMockRecorder) Expire(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockClient)(nil).Expire), arg0, arg1)
}

// Get mocks base method
func (m *MockClient) Get(arg0 string) (interface{}, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClientMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), arg0)
}

// Incr mocks base method
func (m *MockClient) Incr(arg0 string) (int64, error) {
	ret := m.ctrl.Call(m, "Incr", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incr indicates an expected call of Incr
func (mr *MockClientMockRecorder) Incr(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockClient)(nil).Incr), arg0)
}

// Init mocks base method
func (m *MockClient) Init() error {
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockClientMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockClient)(nil).Init))
}

// Scan mocks base method
func (m *MockClient) Scan(arg0 uint64, arg1 string, arg2 int64) ([]string, uint64, error) {
	ret := m.ctrl.Call(m, "Scan", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Scan indicates an expected call of Scan
func (mr *MockClientMockRecorder) Scan(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockClient)(nil).Scan), arg0, arg1, arg2)
}

// Set mocks base method
func (m *MockClient) Set(arg0 string, arg1 interface{}) error {
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockClientMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockClient)(nil).Set), arg0, arg1)
}

// SetWithExpiry mocks base method
func (m *MockClient) SetWithExpiry(arg0 string, arg1 interface{}, arg2 time.Duration) error {
	ret := m.ctrl.Call(m, "SetWithExpiry", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithExpiry indicates an expected call of SetWithExpiry
func (mr *MockClientMockRecorder) SetWithExpiry(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithExpiry", reflect.TypeOf((*MockClient)(nil).SetWithExpiry), arg0, arg1, arg2)
}

// SubscribeChannel mocks base method
func (m *MockClient) SubscribeChannel(arg0 string) (<-chan *redis.Message, error) {
	ret := m.ctrl.Call(m, "SubscribeChannel", arg0)
	ret0, _ := ret[0].(<-chan *redis.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeChannel indicates an expected call of SubscribeChannel
func (mr *MockClientMockRecorder) SubscribeChannel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeChannel", reflect.TypeOf((*MockClient)(nil).SubscribeChannel), arg0)
}

// ZAdd mocks base method
func (m *MockClient) ZAdd(arg0 string, arg1 ...redis0.Z) (int64, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAdd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAdd indicates an expected call of ZAdd
func (mr *MockClientMockRecorder) ZAdd(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAdd", reflect.TypeOf((*MockClient)(nil).ZAdd), varargs...)
}

// ZRange mocks base method
func (m *MockClient) ZRange(arg0 string, arg1, arg2 int64) ([]string, error) {
	ret := m.ctrl.Call(m, "ZRange", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRange indicates an expected call of ZRange
func (mr *MockClientMockRecorder) ZRange(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRange", reflect.TypeOf((*MockClient)(nil).ZRange), arg0, arg1, arg2)
}

// ZRem mocks base method
func (m *MockClient) ZRem(arg0 string, arg1 interface{}) (int64, error) {
	ret := m.ctrl.Call(m, "ZRem", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRem indicates an expected call of ZRem
func (mr *MockClientMockRecorder) ZRem(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRem", reflect.TypeOf((*MockClient)(nil).ZRem), arg0, arg1)
}

// MockPipeliner is a mock of Pipeliner interface
type MockPipeliner struct {
	ctrl     *gomock.Controller
	recorder *MockPipelinerMockRecorder
}

// MockPipelinerMockRecorder is the mock recorder for MockPipeliner
type MockPipelinerMockRecorder struct {
	mock *MockPipeliner
}

// NewMockPipeliner creates a new mock instance
func NewMockPipeliner(ctrl *gomock.Controller) *MockPipeliner {
	mock := &MockPipeliner{ctrl: ctrl}
	mock.recorder = &MockPipelinerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPipeliner) EXPECT() *MockPipelinerMockRecorder {
	return m.recorder
}

// ClosePipeliner mocks base method
func (m *MockPipeliner) ClosePipeliner() error {
	ret := m.ctrl.Call(m, "ClosePipeliner")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClosePipeliner indicates an expected call of ClosePipeliner
func (mr *MockPipelinerMockRecorder) ClosePipeliner() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosePipeliner", reflect.TypeOf((*MockPipeliner)(nil).ClosePipeliner))
}

// Exec mocks base method
func (m *MockPipeliner) Exec() ([]redis0.CmdOut, error) {
	ret := m.ctrl.Call(m, "Exec")
	ret0, _ := ret[0].([]redis0.CmdOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockPipelinerMockRecorder) Exec() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPipeliner)(nil).Exec))
}

// PGet mocks base method
func (m *MockPipeliner) PGet(arg0 string) error {
	ret := m.ctrl.Call(m, "PGet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PGet indicates an expected call of PGet
func (mr *MockPipelinerMockRecorder) PGet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PGet", reflect.TypeOf((*MockPipeliner)(nil).PGet), arg0)
}

// PSet mocks base method
func (m *MockPipeliner) PSet(arg0 string, arg1 interface{}) error {
	ret := m.ctrl.Call(m, "PSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PSet indicates an expected call of PSet
func (mr *MockPipelinerMockRecorder) PSet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PSet", reflect.TypeOf((*MockPipeliner)(nil).PSet), arg0, arg1)
}

// PSetWithExpiry mocks base method
func (m *MockPipeliner) PSetWithExpiry(arg0 string, arg1 interface{}, arg2 time.Duration) error {
	ret := m.ctrl.Call(m, "PSetWithExpiry", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PSetWithExpiry indicates an expected call of PSetWithExpiry
func (mr *MockPipelinerMockRecorder) PSetWithExpiry(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PSetWithExpiry", reflect.TypeOf((*MockPipeliner)(nil).PSetWithExpiry), arg0, arg1, arg2)
}
