// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.connectwisedev.com/platform/platform-common-lib/src/wal (interfaces: WAL)

// Package mock is a generated GoMock package.
package mock

import (
	wal "gitlab.connectwisedev.com/platform/platform-common-lib/src/wal"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWAL is a mock of WAL interface
type MockWAL struct {
	ctrl     *gomock.Controller
	recorder *MockWALMockRecorder
}

// MockWALMockRecorder is the mock recorder for MockWAL
type MockWALMockRecorder struct {
	mock *MockWAL
}

// NewMockWAL creates a new mock instance
func NewMockWAL(ctrl *gomock.Controller) *MockWAL {
	mock := &MockWAL{ctrl: ctrl}
	mock.recorder = &MockWALMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWAL) EXPECT() *MockWALMockRecorder {
	return m.recorder
}

// Flush mocks base method
func (m *MockWAL) Flush() error {
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (mr *MockWALMockRecorder) Flush() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockWAL)(nil).Flush))
}

// Read mocks base method
func (m *MockWAL) Read(arg0 int) ([]wal.Record, error) {
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].([]wal.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockWALMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockWAL)(nil).Read), arg0)
}

// Write mocks base method
func (m *MockWAL) Write(arg0 ...string) error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Write", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockWALMockRecorder) Write(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWAL)(nil).Write), arg0...)
}

// WriteObject mocks base method
func (m *MockWAL) WriteObject(arg0 ...interface{}) error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteObject", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteObject indicates an expected call of WriteObject
func (mr *MockWALMockRecorder) WriteObject(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteObject", reflect.TypeOf((*MockWAL)(nil).WriteObject), arg0...)
}
