// Code generated by MockGen. DO NOT EDIT.
// Source: ./tasks.go

// Package tasks is a generated GoMock package.
package tasks

import (
	context "context"
	entities "gitlab.connectwisedev.com/platform/platform-tasking-service/src/entities"
	models "gitlab.connectwisedev.com/platform/platform-tasking-service/src/models"
	persistency "gitlab.connectwisedev.com/platform/platform-tasking-service/src/persistency"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockExecutionResultsRepo is a mock of ExecutionResultsRepo interface
type MockExecutionResultsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionResultsRepoMockRecorder
}

// MockExecutionResultsRepoMockRecorder is the mock recorder for MockExecutionResultsRepo
type MockExecutionResultsRepoMockRecorder struct {
	mock *MockExecutionResultsRepo
}

// NewMockExecutionResultsRepo creates a new mock instance
func NewMockExecutionResultsRepo(ctrl *gomock.Controller) *MockExecutionResultsRepo {
	mock := &MockExecutionResultsRepo{ctrl: ctrl}
	mock.recorder = &MockExecutionResultsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutionResultsRepo) EXPECT() *MockExecutionResultsRepoMockRecorder {
	return m.recorder
}

// GetLastResultByEndpointID mocks base method
func (m *MockExecutionResultsRepo) GetLastResultByEndpointID(endpointID string) (entities.ExecutionResult, error) {
	ret := m.ctrl.Call(m, "GetLastResultByEndpointID", endpointID)
	ret0, _ := ret[0].(entities.ExecutionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastResultByEndpointID indicates an expected call of GetLastResultByEndpointID
func (mr *MockExecutionResultsRepoMockRecorder) GetLastResultByEndpointID(endpointID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastResultByEndpointID", reflect.TypeOf((*MockExecutionResultsRepo)(nil).GetLastResultByEndpointID), endpointID)
}

// GetLastExecutions mocks base method
func (m *MockExecutionResultsRepo) GetLastExecutions(partnerID string, endpointIDs map[string]struct{}) ([]entities.LastExecution, error) {
	ret := m.ctrl.Call(m, "GetLastExecutions", partnerID, endpointIDs)
	ret0, _ := ret[0].([]entities.LastExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastExecutions indicates an expected call of GetLastExecutions
func (mr *MockExecutionResultsRepoMockRecorder) GetLastExecutions(partnerID, endpointIDs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastExecutions", reflect.TypeOf((*MockExecutionResultsRepo)(nil).GetLastExecutions), partnerID, endpointIDs)
}

// MockRepo is a mock of Repo interface
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockRepo) GetName(partnerID, id string) (string, error) {
	ret := m.ctrl.Call(m, "GetName", partnerID, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetName indicates an expected call of GetName
func (mr *MockRepoMockRecorder) GetName(partnerID, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockRepo)(nil).GetName), partnerID, id)
}

// GetNext mocks base method
func (m *MockRepo) GetNext(partnerID string) ([]entities.Task, error) {
	ret := m.ctrl.Call(m, "GetNext", partnerID)
	ret0, _ := ret[0].([]entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNext indicates an expected call of GetNext
func (mr *MockRepoMockRecorder) GetNext(partnerID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNext", reflect.TypeOf((*MockRepo)(nil).GetNext), partnerID)
}

// GetScheduledTasks mocks base method
func (m *MockRepo) GetScheduledTasks(partnerID string) ([]entities.ScheduledTasks, error) {
	ret := m.ctrl.Call(m, "GetScheduledTasks", partnerID)
	ret0, _ := ret[0].([]entities.ScheduledTasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduledTasks indicates an expected call of GetScheduledTasks
func (mr *MockRepoMockRecorder) GetScheduledTasks(partnerID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledTasks", reflect.TypeOf((*MockRepo)(nil).GetScheduledTasks), partnerID)
}

// MockLegacyRepo is a mock of LegacyRepo interface
type MockLegacyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLegacyRepoMockRecorder
}

// MockLegacyRepoMockRecorder is the mock recorder for MockLegacyRepo
type MockLegacyRepoMockRecorder struct {
	mock *MockLegacyRepo
}

// NewMockLegacyRepo creates a new mock instance
func NewMockLegacyRepo(ctrl *gomock.Controller) *MockLegacyRepo {
	mock := &MockLegacyRepo{ctrl: ctrl}
	mock.recorder = &MockLegacyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLegacyRepo) EXPECT() *MockLegacyRepoMockRecorder {
	return m.recorder
}

// GetByIDs mocks base method
func (m *MockLegacyRepo) GetByIDs(ctx context.Context, cache persistency.Cache, partnerID string, isCommonFieldsNeededOnly bool, taskIDs ...gocql.UUID) ([]models.Task, error) {
	varargs := []interface{}{ctx, cache, partnerID, isCommonFieldsNeededOnly}
	for _, a := range taskIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByIDs", varargs...)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs
func (mr *MockLegacyRepoMockRecorder) GetByIDs(ctx, cache, partnerID, isCommonFieldsNeededOnly interface{}, taskIDs ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, cache, partnerID, isCommonFieldsNeededOnly}, taskIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockLegacyRepo)(nil).GetByIDs), varargs...)
}

// UpdateSchedulerFields mocks base method
func (m *MockLegacyRepo) UpdateSchedulerFields(ctx context.Context, tasks ...models.Task) error {
	varargs := []interface{}{ctx}
	for _, a := range tasks {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSchedulerFields", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchedulerFields indicates an expected call of UpdateSchedulerFields
func (mr *MockLegacyRepoMockRecorder) UpdateSchedulerFields(ctx interface{}, tasks ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx}, tasks...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedulerFields", reflect.TypeOf((*MockLegacyRepo)(nil).UpdateSchedulerFields), varargs...)
}

// MockInstancesRepo is a mock of InstancesRepo interface
type MockInstancesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockInstancesRepoMockRecorder
}

// MockInstancesRepoMockRecorder is the mock recorder for MockInstancesRepo
type MockInstancesRepoMockRecorder struct {
	mock *MockInstancesRepo
}

// NewMockInstancesRepo creates a new mock instance
func NewMockInstancesRepo(ctrl *gomock.Controller) *MockInstancesRepo {
	mock := &MockInstancesRepo{ctrl: ctrl}
	mock.recorder = &MockInstancesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstancesRepo) EXPECT() *MockInstancesRepoMockRecorder {
	return m.recorder
}

// GetInstancesForScheduled mocks base method
func (m *MockInstancesRepo) GetInstancesForScheduled(IDs []string) ([]entities.TaskInstance, error) {
	ret := m.ctrl.Call(m, "GetInstancesForScheduled", IDs)
	ret0, _ := ret[0].([]entities.TaskInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesForScheduled indicates an expected call of GetInstancesForScheduled
func (mr *MockInstancesRepoMockRecorder) GetInstancesForScheduled(IDs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesForScheduled", reflect.TypeOf((*MockInstancesRepo)(nil).GetInstancesForScheduled), IDs)
}

// GetTopInstancesForScheduledByTaskIDs mocks base method
func (m *MockInstancesRepo) GetTopInstancesForScheduledByTaskIDs(taskIDs []string) ([]entities.TaskInstance, error) {
	ret := m.ctrl.Call(m, "GetTopInstancesForScheduledByTaskIDs", taskIDs)
	ret0, _ := ret[0].([]entities.TaskInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopInstancesForScheduledByTaskIDs indicates an expected call of GetTopInstancesForScheduledByTaskIDs
func (mr *MockInstancesRepoMockRecorder) GetTopInstancesForScheduledByTaskIDs(taskIDs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopInstancesForScheduledByTaskIDs", reflect.TypeOf((*MockInstancesRepo)(nil).GetTopInstancesForScheduledByTaskIDs), taskIDs)
}

// GetMinimalInstanceByID mocks base method
func (m *MockInstancesRepo) GetMinimalInstanceByID(id string) (entities.TaskInstance, error) {
	ret := m.ctrl.Call(m, "GetMinimalInstanceByID", id)
	ret0, _ := ret[0].(entities.TaskInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinimalInstanceByID indicates an expected call of GetMinimalInstanceByID
func (mr *MockInstancesRepoMockRecorder) GetMinimalInstanceByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinimalInstanceByID", reflect.TypeOf((*MockInstancesRepo)(nil).GetMinimalInstanceByID), id)
}

// GetByStartedAtAfter mocks base method
func (m *MockInstancesRepo) GetByStartedAtAfter(partnerID string, from, to time.Time) ([]entities.TaskInstance, error) {
	ret := m.ctrl.Call(m, "GetByStartedAtAfter", partnerID, from, to)
	ret0, _ := ret[0].([]entities.TaskInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStartedAtAfter indicates an expected call of GetByStartedAtAfter
func (mr *MockInstancesRepoMockRecorder) GetByStartedAtAfter(partnerID, from, to interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStartedAtAfter", reflect.TypeOf((*MockInstancesRepo)(nil).GetByStartedAtAfter), partnerID, from, to)
}
