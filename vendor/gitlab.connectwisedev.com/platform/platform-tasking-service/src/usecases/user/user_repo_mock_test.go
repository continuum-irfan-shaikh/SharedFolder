// Code generated by MockGen. DO NOT EDIT.
// Source: ./user.go

// Package usecases is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	entities "gitlab.connectwisedev.com/platform/platform-tasking-service/src/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockuserRepoDB is a mock of userRepoDB interface
type MockuserRepoDB struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepoDBMockRecorder
}

// MockuserRepoDBMockRecorder is the mock recorder for MockuserRepoDB
type MockuserRepoDBMockRecorder struct {
	mock *MockuserRepoDB
}

// NewMockuserRepoDB creates a new mock instance
func NewMockuserRepoDB(ctrl *gomock.Controller) *MockuserRepoDB {
	mock := &MockuserRepoDB{ctrl: ctrl}
	mock.recorder = &MockuserRepoDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockuserRepoDB) EXPECT() *MockuserRepoDBMockRecorder {
	return m.recorder
}

// Endpoints mocks base method
func (m *MockuserRepoDB) Endpoints(ctx context.Context, partnerID string, siteIDs []string) ([]entities.Endpoints, error) {
	ret := m.ctrl.Call(m, "Endpoints", ctx, partnerID, siteIDs)
	ret0, _ := ret[0].([]entities.Endpoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Endpoints indicates an expected call of Endpoints
func (mr *MockuserRepoDBMockRecorder) Endpoints(ctx, partnerID, siteIDs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoints", reflect.TypeOf((*MockuserRepoDB)(nil).Endpoints), ctx, partnerID, siteIDs)
}

// SaveEndpoints mocks base method
func (m *MockuserRepoDB) SaveEndpoints(ctx context.Context, ep []entities.Endpoints) {
	m.ctrl.Call(m, "SaveEndpoints", ctx, ep)
}

// SaveEndpoints indicates an expected call of SaveEndpoints
func (mr *MockuserRepoDBMockRecorder) SaveEndpoints(ctx, ep interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEndpoints", reflect.TypeOf((*MockuserRepoDB)(nil).SaveEndpoints), ctx, ep)
}

// MockuserRepoHTTP is a mock of userRepoHTTP interface
type MockuserRepoHTTP struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepoHTTPMockRecorder
}

// MockuserRepoHTTPMockRecorder is the mock recorder for MockuserRepoHTTP
type MockuserRepoHTTPMockRecorder struct {
	mock *MockuserRepoHTTP
}

// NewMockuserRepoHTTP creates a new mock instance
func NewMockuserRepoHTTP(ctrl *gomock.Controller) *MockuserRepoHTTP {
	mock := &MockuserRepoHTTP{ctrl: ctrl}
	mock.recorder = &MockuserRepoHTTPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockuserRepoHTTP) EXPECT() *MockuserRepoHTTPMockRecorder {
	return m.recorder
}

// Endpoints mocks base method
func (m *MockuserRepoHTTP) Endpoints(siteIDs []string, partnerID string) ([]entities.Endpoints, error) {
	ret := m.ctrl.Call(m, "Endpoints", siteIDs, partnerID)
	ret0, _ := ret[0].([]entities.Endpoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Endpoints indicates an expected call of Endpoints
func (mr *MockuserRepoHTTPMockRecorder) Endpoints(siteIDs, partnerID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoints", reflect.TypeOf((*MockuserRepoHTTP)(nil).Endpoints), siteIDs, partnerID)
}

// MocksiteRepoHTTP is a mock of siteRepoHTTP interface
type MocksiteRepoHTTP struct {
	ctrl     *gomock.Controller
	recorder *MocksiteRepoHTTPMockRecorder
}

// MocksiteRepoHTTPMockRecorder is the mock recorder for MocksiteRepoHTTP
type MocksiteRepoHTTPMockRecorder struct {
	mock *MocksiteRepoHTTP
}

// NewMocksiteRepoHTTP creates a new mock instance
func NewMocksiteRepoHTTP(ctrl *gomock.Controller) *MocksiteRepoHTTP {
	mock := &MocksiteRepoHTTP{ctrl: ctrl}
	mock.recorder = &MocksiteRepoHTTPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksiteRepoHTTP) EXPECT() *MocksiteRepoHTTPMockRecorder {
	return m.recorder
}

// Sites mocks base method
func (m *MocksiteRepoHTTP) Sites(partnerID, token string) ([]string, error) {
	ret := m.ctrl.Call(m, "Sites", partnerID, token)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sites indicates an expected call of Sites
func (mr *MocksiteRepoHTTPMockRecorder) Sites(partnerID, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sites", reflect.TypeOf((*MocksiteRepoHTTP)(nil).Sites), partnerID, token)
}
