// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase.go

// Package scheduler is a generated GoMock package.
package scheduler

import (
	context "context"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	agent "gitlab.connectwisedev.com/platform/platform-api-model/clients/model/Golang/resourceModel/agent"
	tasking "gitlab.connectwisedev.com/platform/platform-api-model/clients/model/Golang/resourceModel/tasking"
	entities "gitlab.connectwisedev.com/platform/platform-tasking-service/src/entities"
	models "gitlab.connectwisedev.com/platform/platform-tasking-service/src/models"
	statuses "gitlab.connectwisedev.com/platform/platform-tasking-service/src/models/statuses"
	reflect "reflect"
	time "time"
)

// MockSchedulerRepo is a mock of SchedulerRepo interface
type MockSchedulerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerRepoMockRecorder
}

// MockSchedulerRepoMockRecorder is the mock recorder for MockSchedulerRepo
type MockSchedulerRepoMockRecorder struct {
	mock *MockSchedulerRepo
}

// NewMockSchedulerRepo creates a new mock instance
func NewMockSchedulerRepo(ctrl *gomock.Controller) *MockSchedulerRepo {
	mock := &MockSchedulerRepo{ctrl: ctrl}
	mock.recorder = &MockSchedulerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchedulerRepo) EXPECT() *MockSchedulerRepoMockRecorder {
	return m.recorder
}

// GetLastUpdate mocks base method
func (m *MockSchedulerRepo) GetLastUpdate() (time.Time, error) {
	ret := m.ctrl.Call(m, "GetLastUpdate")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastUpdate indicates an expected call of GetLastUpdate
func (mr *MockSchedulerRepoMockRecorder) GetLastUpdate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUpdate", reflect.TypeOf((*MockSchedulerRepo)(nil).GetLastUpdate))
}

// UpdateScheduler mocks base method
func (m *MockSchedulerRepo) UpdateScheduler(arg0 time.Time) error {
	ret := m.ctrl.Call(m, "UpdateScheduler", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScheduler indicates an expected call of UpdateScheduler
func (mr *MockSchedulerRepoMockRecorder) UpdateScheduler(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScheduler", reflect.TypeOf((*MockSchedulerRepo)(nil).UpdateScheduler), arg0)
}

// MockTaskInstanceRepo is a mock of TaskInstanceRepo interface
type MockTaskInstanceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTaskInstanceRepoMockRecorder
}

// MockTaskInstanceRepoMockRecorder is the mock recorder for MockTaskInstanceRepo
type MockTaskInstanceRepoMockRecorder struct {
	mock *MockTaskInstanceRepo
}

// NewMockTaskInstanceRepo creates a new mock instance
func NewMockTaskInstanceRepo(ctrl *gomock.Controller) *MockTaskInstanceRepo {
	mock := &MockTaskInstanceRepo{ctrl: ctrl}
	mock.recorder = &MockTaskInstanceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskInstanceRepo) EXPECT() *MockTaskInstanceRepoMockRecorder {
	return m.recorder
}

// GetInstance mocks base method
func (m *MockTaskInstanceRepo) GetInstance(id gocql.UUID) (models.TaskInstance, error) {
	ret := m.ctrl.Call(m, "GetInstance", id)
	ret0, _ := ret[0].(models.TaskInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance
func (mr *MockTaskInstanceRepoMockRecorder) GetInstance(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockTaskInstanceRepo)(nil).GetInstance), id)
}

// Insert mocks base method
func (m *MockTaskInstanceRepo) Insert(ti models.TaskInstance, ttl int) error {
	ret := m.ctrl.Call(m, "Insert", ti, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockTaskInstanceRepoMockRecorder) Insert(ti, ttl interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTaskInstanceRepo)(nil).Insert), ti, ttl)
}

// GetNearestInstanceAfter mocks base method
func (m *MockTaskInstanceRepo) GetNearestInstanceAfter(taskID gocql.UUID, sinceDate time.Time) (models.TaskInstance, error) {
	ret := m.ctrl.Call(m, "GetNearestInstanceAfter", taskID, sinceDate)
	ret0, _ := ret[0].(models.TaskInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearestInstanceAfter indicates an expected call of GetNearestInstanceAfter
func (mr *MockTaskInstanceRepoMockRecorder) GetNearestInstanceAfter(taskID, sinceDate interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearestInstanceAfter", reflect.TypeOf((*MockTaskInstanceRepo)(nil).GetNearestInstanceAfter), taskID, sinceDate)
}

// AppendNewEndpoints mocks base method
func (m *MockTaskInstanceRepo) AppendNewEndpoints(ti models.TaskInstance, endpoints map[gocql.UUID]statuses.TaskInstanceStatus) error {
	ret := m.ctrl.Call(m, "AppendNewEndpoints", ti, endpoints)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendNewEndpoints indicates an expected call of AppendNewEndpoints
func (mr *MockTaskInstanceRepoMockRecorder) AppendNewEndpoints(ti, endpoints interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendNewEndpoints", reflect.TypeOf((*MockTaskInstanceRepo)(nil).AppendNewEndpoints), ti, endpoints)
}

// RemoveInactiveEndpoints mocks base method
func (m *MockTaskInstanceRepo) RemoveInactiveEndpoints(ti models.TaskInstance, endpoints ...gocql.UUID) error {
	varargs := []interface{}{ti}
	for _, a := range endpoints {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveInactiveEndpoints", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveInactiveEndpoints indicates an expected call of RemoveInactiveEndpoints
func (mr *MockTaskInstanceRepoMockRecorder) RemoveInactiveEndpoints(ti interface{}, endpoints ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ti}, endpoints...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInactiveEndpoints", reflect.TypeOf((*MockTaskInstanceRepo)(nil).RemoveInactiveEndpoints), varargs...)
}

// MockEndPointRepo is a mock of EndPointRepo interface
type MockEndPointRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEndPointRepoMockRecorder
}

// MockEndPointRepoMockRecorder is the mock recorder for MockEndPointRepo
type MockEndPointRepoMockRecorder struct {
	mock *MockEndPointRepo
}

// NewMockEndPointRepo creates a new mock instance
func NewMockEndPointRepo(ctrl *gomock.Controller) *MockEndPointRepo {
	mock := &MockEndPointRepo{ctrl: ctrl}
	mock.recorder = &MockEndPointRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEndPointRepo) EXPECT() *MockEndPointRepoMockRecorder {
	return m.recorder
}

// MockTaskRepo is a mock of TaskRepo interface
type MockTaskRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepoMockRecorder
}

// MockTaskRepoMockRecorder is the mock recorder for MockTaskRepo
type MockTaskRepoMockRecorder struct {
	mock *MockTaskRepo
}

// NewMockTaskRepo creates a new mock instance
func NewMockTaskRepo(ctrl *gomock.Controller) *MockTaskRepo {
	mock := &MockTaskRepo{ctrl: ctrl}
	mock.recorder = &MockTaskRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskRepo) EXPECT() *MockTaskRepoMockRecorder {
	return m.recorder
}

// GetByRunTimeRange mocks base method
func (m *MockTaskRepo) GetByRunTimeRange(ctx context.Context, timeRange []time.Time) ([]models.Task, error) {
	ret := m.ctrl.Call(m, "GetByRunTimeRange", ctx, timeRange)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRunTimeRange indicates an expected call of GetByRunTimeRange
func (mr *MockTaskRepoMockRecorder) GetByRunTimeRange(ctx, timeRange interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRunTimeRange", reflect.TypeOf((*MockTaskRepo)(nil).GetByRunTimeRange), ctx, timeRange)
}

// UpdateSchedulerFields mocks base method
func (m *MockTaskRepo) UpdateSchedulerFields(ctx context.Context, tasks ...models.Task) error {
	varargs := []interface{}{ctx}
	for _, a := range tasks {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSchedulerFields", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchedulerFields indicates an expected call of UpdateSchedulerFields
func (mr *MockTaskRepoMockRecorder) UpdateSchedulerFields(ctx interface{}, tasks ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx}, tasks...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedulerFields", reflect.TypeOf((*MockTaskRepo)(nil).UpdateSchedulerFields), varargs...)
}

// InsertOrUpdate mocks base method
func (m *MockTaskRepo) InsertOrUpdate(ctx context.Context, tasks ...models.Task) error {
	varargs := []interface{}{ctx}
	for _, a := range tasks {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertOrUpdate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdate indicates an expected call of InsertOrUpdate
func (mr *MockTaskRepoMockRecorder) InsertOrUpdate(ctx interface{}, tasks ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx}, tasks...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdate", reflect.TypeOf((*MockTaskRepo)(nil).InsertOrUpdate), varargs...)
}

// GetTargetTypeByEndpoint mocks base method
func (m *MockTaskRepo) GetTargetTypeByEndpoint(partnerID string, taskID, endpointID gocql.UUID, external bool) (models.TargetType, error) {
	ret := m.ctrl.Call(m, "GetTargetTypeByEndpoint", partnerID, taskID, endpointID, external)
	ret0, _ := ret[0].(models.TargetType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetTypeByEndpoint indicates an expected call of GetTargetTypeByEndpoint
func (mr *MockTaskRepoMockRecorder) GetTargetTypeByEndpoint(partnerID, taskID, endpointID, external interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetTypeByEndpoint", reflect.TypeOf((*MockTaskRepo)(nil).GetTargetTypeByEndpoint), partnerID, taskID, endpointID, external)
}

// MockTaskExecutionRepo is a mock of TaskExecutionRepo interface
type MockTaskExecutionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTaskExecutionRepoMockRecorder
}

// MockTaskExecutionRepoMockRecorder is the mock recorder for MockTaskExecutionRepo
type MockTaskExecutionRepoMockRecorder struct {
	mock *MockTaskExecutionRepo
}

// NewMockTaskExecutionRepo creates a new mock instance
func NewMockTaskExecutionRepo(ctrl *gomock.Controller) *MockTaskExecutionRepo {
	mock := &MockTaskExecutionRepo{ctrl: ctrl}
	mock.recorder = &MockTaskExecutionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskExecutionRepo) EXPECT() *MockTaskExecutionRepoMockRecorder {
	return m.recorder
}

// ExecuteTasks mocks base method
func (m *MockTaskExecutionRepo) ExecuteTasks(ctx context.Context, payload tasking.ExecutionPayload, partnerID, taskType string) error {
	ret := m.ctrl.Call(m, "ExecuteTasks", ctx, payload, partnerID, taskType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteTasks indicates an expected call of ExecuteTasks
func (mr *MockTaskExecutionRepoMockRecorder) ExecuteTasks(ctx, payload, partnerID, taskType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTasks", reflect.TypeOf((*MockTaskExecutionRepo)(nil).ExecuteTasks), ctx, payload, partnerID, taskType)
}

// MockExecutionResultRepo is a mock of ExecutionResultRepo interface
type MockExecutionResultRepo struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionResultRepoMockRecorder
}

// MockExecutionResultRepoMockRecorder is the mock recorder for MockExecutionResultRepo
type MockExecutionResultRepoMockRecorder struct {
	mock *MockExecutionResultRepo
}

// NewMockExecutionResultRepo creates a new mock instance
func NewMockExecutionResultRepo(ctrl *gomock.Controller) *MockExecutionResultRepo {
	mock := &MockExecutionResultRepo{ctrl: ctrl}
	mock.recorder = &MockExecutionResultRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutionResultRepo) EXPECT() *MockExecutionResultRepoMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockExecutionResultRepo) Publish(msg tasking.ExecutionResultKafkaMessage) error {
	ret := m.ctrl.Call(m, "Publish", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockExecutionResultRepoMockRecorder) Publish(msg interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockExecutionResultRepo)(nil).Publish), msg)
}

// MockCacheRepo is a mock of CacheRepo interface
type MockCacheRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepoMockRecorder
}

// MockCacheRepoMockRecorder is the mock recorder for MockCacheRepo
type MockCacheRepoMockRecorder struct {
	mock *MockCacheRepo
}

// NewMockCacheRepo creates a new mock instance
func NewMockCacheRepo(ctrl *gomock.Controller) *MockCacheRepo {
	mock := &MockCacheRepo{ctrl: ctrl}
	mock.recorder = &MockCacheRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCacheRepo) EXPECT() *MockCacheRepoMockRecorder {
	return m.recorder
}

// GetByOriginID mocks base method
func (m *MockCacheRepo) GetByOriginID(ctx context.Context, partnerID string, templateID gocql.UUID, isNoc bool) (models.TemplateDetails, error) {
	ret := m.ctrl.Call(m, "GetByOriginID", ctx, partnerID, templateID, isNoc)
	ret0, _ := ret[0].(models.TemplateDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOriginID indicates an expected call of GetByOriginID
func (mr *MockCacheRepoMockRecorder) GetByOriginID(ctx, partnerID, templateID, isNoc interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOriginID", reflect.TypeOf((*MockCacheRepo)(nil).GetByOriginID), ctx, partnerID, templateID, isNoc)
}

// CalculateExpectedExecutionTimeSec mocks base method
func (m *MockCacheRepo) CalculateExpectedExecutionTimeSec(ctx context.Context, task models.Task) int {
	ret := m.ctrl.Call(m, "CalculateExpectedExecutionTimeSec", ctx, task)
	ret0, _ := ret[0].(int)
	return ret0
}

// CalculateExpectedExecutionTimeSec indicates an expected call of CalculateExpectedExecutionTimeSec
func (mr *MockCacheRepoMockRecorder) CalculateExpectedExecutionTimeSec(ctx, task interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateExpectedExecutionTimeSec", reflect.TypeOf((*MockCacheRepo)(nil).CalculateExpectedExecutionTimeSec), ctx, task)
}

// MockExecutionExpirationRepo is a mock of ExecutionExpirationRepo interface
type MockExecutionExpirationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionExpirationRepoMockRecorder
}

// MockExecutionExpirationRepoMockRecorder is the mock recorder for MockExecutionExpirationRepo
type MockExecutionExpirationRepoMockRecorder struct {
	mock *MockExecutionExpirationRepo
}

// NewMockExecutionExpirationRepo creates a new mock instance
func NewMockExecutionExpirationRepo(ctrl *gomock.Controller) *MockExecutionExpirationRepo {
	mock := &MockExecutionExpirationRepo{ctrl: ctrl}
	mock.recorder = &MockExecutionExpirationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutionExpirationRepo) EXPECT() *MockExecutionExpirationRepoMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockExecutionExpirationRepo) Insert(ee entities.ExecutionExpiration, ttl int) error {
	ret := m.ctrl.Call(m, "Insert", ee, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockExecutionExpirationRepoMockRecorder) Insert(ee, ttl interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockExecutionExpirationRepo)(nil).Insert), ee, ttl)
}

// MockTargetsRepo is a mock of TargetsRepo interface
type MockTargetsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTargetsRepoMockRecorder
}

// MockTargetsRepoMockRecorder is the mock recorder for MockTargetsRepo
type MockTargetsRepoMockRecorder struct {
	mock *MockTargetsRepo
}

// NewMockTargetsRepo creates a new mock instance
func NewMockTargetsRepo(ctrl *gomock.Controller) *MockTargetsRepo {
	mock := &MockTargetsRepo{ctrl: ctrl}
	mock.recorder = &MockTargetsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTargetsRepo) EXPECT() *MockTargetsRepoMockRecorder {
	return m.recorder
}

// GetTargetsByTaskID mocks base method
func (m *MockTargetsRepo) GetTargetsByTaskID(partnerID string, taskID gocql.UUID) ([]gocql.UUID, error) {
	ret := m.ctrl.Call(m, "GetTargetsByTaskID", partnerID, taskID)
	ret0, _ := ret[0].([]gocql.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetsByTaskID indicates an expected call of GetTargetsByTaskID
func (mr *MockTargetsRepoMockRecorder) GetTargetsByTaskID(partnerID, taskID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetsByTaskID", reflect.TypeOf((*MockTargetsRepo)(nil).GetTargetsByTaskID), partnerID, taskID)
}

// MockDynamicGroupRepo is a mock of DynamicGroupRepo interface
type MockDynamicGroupRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDynamicGroupRepoMockRecorder
}

// MockDynamicGroupRepoMockRecorder is the mock recorder for MockDynamicGroupRepo
type MockDynamicGroupRepoMockRecorder struct {
	mock *MockDynamicGroupRepo
}

// NewMockDynamicGroupRepo creates a new mock instance
func NewMockDynamicGroupRepo(ctrl *gomock.Controller) *MockDynamicGroupRepo {
	mock := &MockDynamicGroupRepo{ctrl: ctrl}
	mock.recorder = &MockDynamicGroupRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDynamicGroupRepo) EXPECT() *MockDynamicGroupRepoMockRecorder {
	return m.recorder
}

// GetEndpointsByGroupIDs mocks base method
func (m *MockDynamicGroupRepo) GetEndpointsByGroupIDs(ctx context.Context, targetIDs []string, createdBy, partnerID string, hasNOCAccess bool) ([]gocql.UUID, error) {
	ret := m.ctrl.Call(m, "GetEndpointsByGroupIDs", ctx, targetIDs, createdBy, partnerID, hasNOCAccess)
	ret0, _ := ret[0].([]gocql.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpointsByGroupIDs indicates an expected call of GetEndpointsByGroupIDs
func (mr *MockDynamicGroupRepoMockRecorder) GetEndpointsByGroupIDs(ctx, targetIDs, createdBy, partnerID, hasNOCAccess interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointsByGroupIDs", reflect.TypeOf((*MockDynamicGroupRepo)(nil).GetEndpointsByGroupIDs), ctx, targetIDs, createdBy, partnerID, hasNOCAccess)
}

// MockSiteRepo is a mock of SiteRepo interface
type MockSiteRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSiteRepoMockRecorder
}

// MockSiteRepoMockRecorder is the mock recorder for MockSiteRepo
type MockSiteRepoMockRecorder struct {
	mock *MockSiteRepo
}

// NewMockSiteRepo creates a new mock instance
func NewMockSiteRepo(ctrl *gomock.Controller) *MockSiteRepo {
	mock := &MockSiteRepo{ctrl: ctrl}
	mock.recorder = &MockSiteRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSiteRepo) EXPECT() *MockSiteRepoMockRecorder {
	return m.recorder
}

// GetEndpointsBySiteIDs mocks base method
func (m *MockSiteRepo) GetEndpointsBySiteIDs(ctx context.Context, partnerID string, siteIDs []string) ([]gocql.UUID, error) {
	ret := m.ctrl.Call(m, "GetEndpointsBySiteIDs", ctx, partnerID, siteIDs)
	ret0, _ := ret[0].([]gocql.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpointsBySiteIDs indicates an expected call of GetEndpointsBySiteIDs
func (mr *MockSiteRepoMockRecorder) GetEndpointsBySiteIDs(ctx, partnerID, siteIDs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointsBySiteIDs", reflect.TypeOf((*MockSiteRepo)(nil).GetEndpointsBySiteIDs), ctx, partnerID, siteIDs)
}

// MockAssetsClient is a mock of AssetsClient interface
type MockAssetsClient struct {
	ctrl     *gomock.Controller
	recorder *MockAssetsClientMockRecorder
}

// MockAssetsClientMockRecorder is the mock recorder for MockAssetsClient
type MockAssetsClientMockRecorder struct {
	mock *MockAssetsClient
}

// NewMockAssetsClient creates a new mock instance
func NewMockAssetsClient(ctrl *gomock.Controller) *MockAssetsClient {
	mock := &MockAssetsClient{ctrl: ctrl}
	mock.recorder = &MockAssetsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAssetsClient) EXPECT() *MockAssetsClientMockRecorder {
	return m.recorder
}

// GetLocationByEndpointID mocks base method
func (m *MockAssetsClient) GetLocationByEndpointID(ctx context.Context, partnerID string, endpointID gocql.UUID) (*time.Location, error) {
	ret := m.ctrl.Call(m, "GetLocationByEndpointID", ctx, partnerID, endpointID)
	ret0, _ := ret[0].(*time.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationByEndpointID indicates an expected call of GetLocationByEndpointID
func (mr *MockAssetsClientMockRecorder) GetLocationByEndpointID(ctx, partnerID, endpointID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationByEndpointID", reflect.TypeOf((*MockAssetsClient)(nil).GetLocationByEndpointID), ctx, partnerID, endpointID)
}

// MockEncryptionService is a mock of EncryptionService interface
type MockEncryptionService struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptionServiceMockRecorder
}

// MockEncryptionServiceMockRecorder is the mock recorder for MockEncryptionService
type MockEncryptionServiceMockRecorder struct {
	mock *MockEncryptionService
}

// NewMockEncryptionService creates a new mock instance
func NewMockEncryptionService(ctrl *gomock.Controller) *MockEncryptionService {
	mock := &MockEncryptionService{ctrl: ctrl}
	mock.recorder = &MockEncryptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEncryptionService) EXPECT() *MockEncryptionServiceMockRecorder {
	return m.recorder
}

// Encrypt mocks base method
func (m *MockEncryptionService) Encrypt(creds agent.Credentials) (agent.Credentials, error) {
	ret := m.ctrl.Call(m, "Encrypt", creds)
	ret0, _ := ret[0].(agent.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt
func (mr *MockEncryptionServiceMockRecorder) Encrypt(creds interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncryptionService)(nil).Encrypt), creds)
}

// Decrypt mocks base method
func (m *MockEncryptionService) Decrypt(creds agent.Credentials) (agent.Credentials, error) {
	ret := m.ctrl.Call(m, "Decrypt", creds)
	ret0, _ := ret[0].(agent.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt
func (mr *MockEncryptionServiceMockRecorder) Decrypt(creds interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockEncryptionService)(nil).Decrypt), creds)
}

// MockAgentEncryptionService is a mock of AgentEncryptionService interface
type MockAgentEncryptionService struct {
	ctrl     *gomock.Controller
	recorder *MockAgentEncryptionServiceMockRecorder
}

// MockAgentEncryptionServiceMockRecorder is the mock recorder for MockAgentEncryptionService
type MockAgentEncryptionServiceMockRecorder struct {
	mock *MockAgentEncryptionService
}

// NewMockAgentEncryptionService creates a new mock instance
func NewMockAgentEncryptionService(ctrl *gomock.Controller) *MockAgentEncryptionService {
	mock := &MockAgentEncryptionService{ctrl: ctrl}
	mock.recorder = &MockAgentEncryptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgentEncryptionService) EXPECT() *MockAgentEncryptionServiceMockRecorder {
	return m.recorder
}

// Encrypt mocks base method
func (m *MockAgentEncryptionService) Encrypt(ctx context.Context, endpointID gocql.UUID, credentials agent.Credentials) (agent.Credentials, error) {
	ret := m.ctrl.Call(m, "Encrypt", ctx, endpointID, credentials)
	ret0, _ := ret[0].(agent.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt
func (mr *MockAgentEncryptionServiceMockRecorder) Encrypt(ctx, endpointID, credentials interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockAgentEncryptionService)(nil).Encrypt), ctx, endpointID, credentials)
}
