// Code generated by MockGen. DO NOT EDIT.
// Source: ./tasks_scheduler.go

// Package scheduler is a generated GoMock package.
package scheduler

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	tasking "gitlab.connectwisedev.com/platform/platform-api-model/clients/model/Golang/resourceModel/tasking"
	models "gitlab.connectwisedev.com/platform/platform-tasking-service/src/models"
	reflect "reflect"
	time "time"
)

// MockSchedulerUC is a mock of SchedulerUC interface
type MockSchedulerUC struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerUCMockRecorder
}

// MockSchedulerUCMockRecorder is the mock recorder for MockSchedulerUC
type MockSchedulerUCMockRecorder struct {
	mock *MockSchedulerUC
}

// NewMockSchedulerUC creates a new mock instance
func NewMockSchedulerUC(ctrl *gomock.Controller) *MockSchedulerUC {
	mock := &MockSchedulerUC{ctrl: ctrl}
	mock.recorder = &MockSchedulerUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchedulerUC) EXPECT() *MockSchedulerUCMockRecorder {
	return m.recorder
}

// GetScheduledTasks mocks base method
func (m *MockSchedulerUC) GetScheduledTasks(currentTime time.Time) (map[tasking.Regularity][]models.Task, error) {
	ret := m.ctrl.Call(m, "GetScheduledTasks", currentTime)
	ret0, _ := ret[0].(map[tasking.Regularity][]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduledTasks indicates an expected call of GetScheduledTasks
func (mr *MockSchedulerUCMockRecorder) GetScheduledTasks(currentTime interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledTasks", reflect.TypeOf((*MockSchedulerUC)(nil).GetScheduledTasks), currentTime)
}

// UpdateSchedulerTime mocks base method
func (m *MockSchedulerUC) UpdateSchedulerTime(currentTime time.Time) error {
	ret := m.ctrl.Call(m, "UpdateSchedulerTime", currentTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchedulerTime indicates an expected call of UpdateSchedulerTime
func (mr *MockSchedulerUCMockRecorder) UpdateSchedulerTime(currentTime interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedulerTime", reflect.TypeOf((*MockSchedulerUC)(nil).UpdateSchedulerTime), currentTime)
}

// MockSchedulerTypeUC is a mock of SchedulerTypeUC interface
type MockSchedulerTypeUC struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerTypeUCMockRecorder
}

// MockSchedulerTypeUCMockRecorder is the mock recorder for MockSchedulerTypeUC
type MockSchedulerTypeUCMockRecorder struct {
	mock *MockSchedulerTypeUC
}

// NewMockSchedulerTypeUC creates a new mock instance
func NewMockSchedulerTypeUC(ctrl *gomock.Controller) *MockSchedulerTypeUC {
	mock := &MockSchedulerTypeUC{ctrl: ctrl}
	mock.recorder = &MockSchedulerTypeUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchedulerTypeUC) EXPECT() *MockSchedulerTypeUCMockRecorder {
	return m.recorder
}

// Process mocks base method
func (m *MockSchedulerTypeUC) Process(ctx context.Context, currentTime time.Time, tasks []models.Task) {
	m.ctrl.Call(m, "Process", ctx, currentTime, tasks)
}

// Process indicates an expected call of Process
func (mr *MockSchedulerTypeUCMockRecorder) Process(ctx, currentTime, tasks interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockSchedulerTypeUC)(nil).Process), ctx, currentTime, tasks)
}
