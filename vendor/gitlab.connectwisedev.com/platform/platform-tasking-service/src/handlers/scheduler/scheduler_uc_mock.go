// Code generated by MockGen. DO NOT EDIT.
// Source: ./scheduler_jobs.go

// Package scheduler is a generated GoMock package.
package scheduler

import (
	context "context"
	tasking "gitlab.connectwisedev.com/platform/platform-api-model/clients/model/Golang/resourceModel/tasking"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
	time "time"
)

// MockExecutionResultUpdateUC is a mock of ExecutionResultUpdateUC interface
type MockExecutionResultUpdateUC struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionResultUpdateUCMockRecorder
}

// MockExecutionResultUpdateUCMockRecorder is the mock recorder for MockExecutionResultUpdateUC
type MockExecutionResultUpdateUCMockRecorder struct {
	mock *MockExecutionResultUpdateUC
}

// NewMockExecutionResultUpdateUC creates a new mock instance
func NewMockExecutionResultUpdateUC(ctrl *gomock.Controller) *MockExecutionResultUpdateUC {
	mock := &MockExecutionResultUpdateUC{ctrl: ctrl}
	mock.recorder = &MockExecutionResultUpdateUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutionResultUpdateUC) EXPECT() *MockExecutionResultUpdateUCMockRecorder {
	return m.recorder
}

// ProcessExecutionResults mocks base method
func (m *MockExecutionResultUpdateUC) ProcessExecutionResults(ctx context.Context, partnerID string, taskInstanceID gocql.UUID, results ...tasking.ExecutionResult) error {
	varargs := []interface{}{ctx, partnerID, taskInstanceID}
	for _, a := range results {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessExecutionResults", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessExecutionResults indicates an expected call of ProcessExecutionResults
func (mr *MockExecutionResultUpdateUCMockRecorder) ProcessExecutionResults(ctx, partnerID, taskInstanceID interface{}, results ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, partnerID, taskInstanceID}, results...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessExecutionResults", reflect.TypeOf((*MockExecutionResultUpdateUC)(nil).ProcessExecutionResults), varargs...)
}

// MockSchedulerRepo is a mock of SchedulerRepo interface
type MockSchedulerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerRepoMockRecorder
}

// MockSchedulerRepoMockRecorder is the mock recorder for MockSchedulerRepo
type MockSchedulerRepoMockRecorder struct {
	mock *MockSchedulerRepo
}

// NewMockSchedulerRepo creates a new mock instance
func NewMockSchedulerRepo(ctrl *gomock.Controller) *MockSchedulerRepo {
	mock := &MockSchedulerRepo{ctrl: ctrl}
	mock.recorder = &MockSchedulerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchedulerRepo) EXPECT() *MockSchedulerRepoMockRecorder {
	return m.recorder
}

// GetLastExpiredExecutionCheck mocks base method
func (m *MockSchedulerRepo) GetLastExpiredExecutionCheck() (time.Time, error) {
	ret := m.ctrl.Call(m, "GetLastExpiredExecutionCheck")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastExpiredExecutionCheck indicates an expected call of GetLastExpiredExecutionCheck
func (mr *MockSchedulerRepoMockRecorder) GetLastExpiredExecutionCheck() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastExpiredExecutionCheck", reflect.TypeOf((*MockSchedulerRepo)(nil).GetLastExpiredExecutionCheck))
}

// UpdateLastExpiredExecutionCheck mocks base method
func (m *MockSchedulerRepo) UpdateLastExpiredExecutionCheck(time time.Time) error {
	ret := m.ctrl.Call(m, "UpdateLastExpiredExecutionCheck", time)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastExpiredExecutionCheck indicates an expected call of UpdateLastExpiredExecutionCheck
func (mr *MockSchedulerRepoMockRecorder) UpdateLastExpiredExecutionCheck(time interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastExpiredExecutionCheck", reflect.TypeOf((*MockSchedulerRepo)(nil).UpdateLastExpiredExecutionCheck), time)
}

// MockExecutionResultRepo is a mock of ExecutionResultRepo interface
type MockExecutionResultRepo struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionResultRepoMockRecorder
}

// MockExecutionResultRepoMockRecorder is the mock recorder for MockExecutionResultRepo
type MockExecutionResultRepoMockRecorder struct {
	mock *MockExecutionResultRepo
}

// NewMockExecutionResultRepo creates a new mock instance
func NewMockExecutionResultRepo(ctrl *gomock.Controller) *MockExecutionResultRepo {
	mock := &MockExecutionResultRepo{ctrl: ctrl}
	mock.recorder = &MockExecutionResultRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutionResultRepo) EXPECT() *MockExecutionResultRepoMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockExecutionResultRepo) Publish(msg tasking.ExecutionResultKafkaMessage) error {
	ret := m.ctrl.Call(m, "Publish", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockExecutionResultRepoMockRecorder) Publish(msg interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockExecutionResultRepo)(nil).Publish), msg)
}

// MockCounterService is a mock of CounterService interface
type MockCounterService struct {
	ctrl     *gomock.Controller
	recorder *MockCounterServiceMockRecorder
}

// MockCounterServiceMockRecorder is the mock recorder for MockCounterService
type MockCounterServiceMockRecorder struct {
	mock *MockCounterService
}

// NewMockCounterService creates a new mock instance
func NewMockCounterService(ctrl *gomock.Controller) *MockCounterService {
	mock := &MockCounterService{ctrl: ctrl}
	mock.recorder = &MockCounterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCounterService) EXPECT() *MockCounterServiceMockRecorder {
	return m.recorder
}

// GetCountersByPartner mocks base method
func (m *MockCounterService) GetCountersByPartner(w http.ResponseWriter, r *http.Request) {
	m.ctrl.Call(m, "GetCountersByPartner", w, r)
}

// GetCountersByPartner indicates an expected call of GetCountersByPartner
func (mr *MockCounterServiceMockRecorder) GetCountersByPartner(w, r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountersByPartner", reflect.TypeOf((*MockCounterService)(nil).GetCountersByPartner), w, r)
}

// GetCountersByPartnerAndEndpoint mocks base method
func (m *MockCounterService) GetCountersByPartnerAndEndpoint(w http.ResponseWriter, r *http.Request) {
	m.ctrl.Call(m, "GetCountersByPartnerAndEndpoint", w, r)
}

// GetCountersByPartnerAndEndpoint indicates an expected call of GetCountersByPartnerAndEndpoint
func (mr *MockCounterServiceMockRecorder) GetCountersByPartnerAndEndpoint(w, r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountersByPartnerAndEndpoint", reflect.TypeOf((*MockCounterService)(nil).GetCountersByPartnerAndEndpoint), w, r)
}

// RecalculateAllCounters mocks base method
func (m *MockCounterService) RecalculateAllCounters(w http.ResponseWriter, r *http.Request) {
	m.ctrl.Call(m, "RecalculateAllCounters", w, r)
}

// RecalculateAllCounters indicates an expected call of RecalculateAllCounters
func (mr *MockCounterServiceMockRecorder) RecalculateAllCounters(w, r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecalculateAllCounters", reflect.TypeOf((*MockCounterService)(nil).RecalculateAllCounters), w, r)
}

// updateCounters mocks base method
func (m *MockCounterService) updateCounters(ctx context.Context, partner string, endpoint gocql.UUID, correctCount int) error {
	ret := m.ctrl.Call(m, "updateCounters", ctx, partner, endpoint, correctCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateCounters indicates an expected call of updateCounters
func (mr *MockCounterServiceMockRecorder) updateCounters(ctx, partner, endpoint, correctCount interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateCounters", reflect.TypeOf((*MockCounterService)(nil).updateCounters), ctx, partner, endpoint, correctCount)
}
