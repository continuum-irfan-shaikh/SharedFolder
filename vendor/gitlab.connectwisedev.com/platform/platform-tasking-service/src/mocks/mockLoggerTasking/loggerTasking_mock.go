// Code generated by MockGen. DO NOT EDIT.
// Source: ./logger.go

// Package mockLoggerTasking is a generated GoMock package.
package mockLoggerTasking

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// InfofCtx mocks base method
func (m *MockLogger) InfofCtx(ctx context.Context, format string, v ...interface{}) {
	varargs := []interface{}{ctx, format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InfofCtx", varargs...)
}

// InfofCtx indicates an expected call of InfofCtx
func (mr *MockLoggerMockRecorder) InfofCtx(ctx, format interface{}, v ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfofCtx", reflect.TypeOf((*MockLogger)(nil).InfofCtx), varargs...)
}

// WarnfCtx mocks base method
func (m *MockLogger) WarnfCtx(ctx context.Context, format string, v ...interface{}) {
	varargs := []interface{}{ctx, format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WarnfCtx", varargs...)
}

// WarnfCtx indicates an expected call of WarnfCtx
func (mr *MockLoggerMockRecorder) WarnfCtx(ctx, format interface{}, v ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnfCtx", reflect.TypeOf((*MockLogger)(nil).WarnfCtx), varargs...)
}

// ErrfCtx mocks base method
func (m *MockLogger) ErrfCtx(ctx context.Context, errorcode, format string, v ...interface{}) {
	varargs := []interface{}{ctx, errorcode, format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ErrfCtx", varargs...)
}

// ErrfCtx indicates an expected call of ErrfCtx
func (mr *MockLoggerMockRecorder) ErrfCtx(ctx, errorcode, format interface{}, v ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, errorcode, format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrfCtx", reflect.TypeOf((*MockLogger)(nil).ErrfCtx), varargs...)
}

// Debug mocks base method
func (m *MockLogger) Debug(v ...interface{}) {
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug
func (mr *MockLoggerMockRecorder) Debug(v ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), v...)
}

// DebugfCtx mocks base method
func (m *MockLogger) DebugfCtx(ctx context.Context, format string, v ...interface{}) {
	varargs := []interface{}{ctx, format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DebugfCtx", varargs...)
}

// DebugfCtx indicates an expected call of DebugfCtx
func (mr *MockLoggerMockRecorder) DebugfCtx(ctx, format interface{}, v ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugfCtx", reflect.TypeOf((*MockLogger)(nil).DebugfCtx), varargs...)
}
