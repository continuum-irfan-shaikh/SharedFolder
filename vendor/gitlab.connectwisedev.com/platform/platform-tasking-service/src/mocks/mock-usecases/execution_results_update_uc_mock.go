// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.connectwisedev.com/platform/platform-tasking-service/src/services/tasks (interfaces: ExecutionResultUpdateUC)

// Package mockusecases is a generated GoMock package.
package mockusecases

import (
	context "context"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	tasking "gitlab.connectwisedev.com/platform/platform-api-model/clients/model/Golang/resourceModel/tasking"
	reflect "reflect"
)

// MockExecutionResultUpdateUC is a mock of ExecutionResultUpdateUC interface
type MockExecutionResultUpdateUC struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionResultUpdateUCMockRecorder
}

// MockExecutionResultUpdateUCMockRecorder is the mock recorder for MockExecutionResultUpdateUC
type MockExecutionResultUpdateUCMockRecorder struct {
	mock *MockExecutionResultUpdateUC
}

// NewMockExecutionResultUpdateUC creates a new mock instance
func NewMockExecutionResultUpdateUC(ctrl *gomock.Controller) *MockExecutionResultUpdateUC {
	mock := &MockExecutionResultUpdateUC{ctrl: ctrl}
	mock.recorder = &MockExecutionResultUpdateUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutionResultUpdateUC) EXPECT() *MockExecutionResultUpdateUCMockRecorder {
	return m.recorder
}

// ProcessExecutionResults mocks base method
func (m *MockExecutionResultUpdateUC) ProcessExecutionResults(arg0 context.Context, arg1 string, arg2 gocql.UUID, arg3 ...tasking.ExecutionResult) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessExecutionResults", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessExecutionResults indicates an expected call of ProcessExecutionResults
func (mr *MockExecutionResultUpdateUCMockRecorder) ProcessExecutionResults(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessExecutionResults", reflect.TypeOf((*MockExecutionResultUpdateUC)(nil).ProcessExecutionResults), varargs...)
}
