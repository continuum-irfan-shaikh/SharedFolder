// Code generated by MockGen. DO NOT EDIT.
// Source: ./closest_tasks.go

// Package mockusecases is a generated GoMock package.
package mockusecases

import (
	context "context"
	reflect "reflect"
	time "time"

	entities "gitlab.connectwisedev.com/platform/platform-tasking-service/src/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockTasksInteractor is a mock of TasksInteractor interface
type MockTasksInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockTasksInteractorMockRecorder
}

// MockTasksInteractorMockRecorder is the mock recorder for MockTasksInteractor
type MockTasksInteractorMockRecorder struct {
	mock *MockTasksInteractor
}

// NewMockTasksInteractor creates a new mock instance
func NewMockTasksInteractor(ctrl *gomock.Controller) *MockTasksInteractor {
	mock := &MockTasksInteractor{ctrl: ctrl}
	mock.recorder = &MockTasksInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTasksInteractor) EXPECT() *MockTasksInteractorMockRecorder {
	return m.recorder
}

// GetClosestTasks mocks base method
func (m *MockTasksInteractor) GetClosestTasks(ctx context.Context, endpoints entities.EndpointsInput) (entities.EndpointsClosestTasks, error) {
	ret := m.ctrl.Call(m, "GetClosestTasks", ctx, endpoints)
	ret0, _ := ret[0].(entities.EndpointsClosestTasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClosestTasks indicates an expected call of GetClosestTasks
func (mr *MockTasksInteractorMockRecorder) GetClosestTasks(ctx, endpoints interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClosestTasks", reflect.TypeOf((*MockTasksInteractor)(nil).GetClosestTasks), ctx, endpoints)
}

// GetScheduledTasks mocks base method
func (m *MockTasksInteractor) GetScheduledTasks(ctx context.Context) ([]entities.ScheduledTasks, error) {
	ret := m.ctrl.Call(m, "GetScheduledTasks", ctx)
	ret0, _ := ret[0].([]entities.ScheduledTasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduledTasks indicates an expected call of GetScheduledTasks
func (mr *MockTasksInteractorMockRecorder) GetScheduledTasks(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledTasks", reflect.TypeOf((*MockTasksInteractor)(nil).GetScheduledTasks), ctx)
}

// DeleteScheduledTasks mocks base method
func (m *MockTasksInteractor) DeleteScheduledTasks(ctx context.Context, taskIDs entities.TaskIDs) error {
	ret := m.ctrl.Call(m, "DeleteScheduledTasks", ctx, taskIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScheduledTasks indicates an expected call of DeleteScheduledTasks
func (mr *MockTasksInteractorMockRecorder) DeleteScheduledTasks(ctx, taskIDs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScheduledTasks", reflect.TypeOf((*MockTasksInteractor)(nil).DeleteScheduledTasks), ctx, taskIDs)
}

// GetTasksHistory mocks base method
func (m *MockTasksInteractor) GetTasksHistory(ctx context.Context, from, to time.Time) ([]entities.ScheduledTasks, error) {
	ret := m.ctrl.Call(m, "GetTasksHistory", ctx, from, to)
	ret0, _ := ret[0].([]entities.ScheduledTasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksHistory indicates an expected call of GetTasksHistory
func (mr *MockTasksInteractorMockRecorder) GetTasksHistory(ctx, from, to interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksHistory", reflect.TypeOf((*MockTasksInteractor)(nil).GetTasksHistory), ctx, from, to)
}
