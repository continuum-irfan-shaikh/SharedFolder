// Code generated by MockGen. DO NOT EDIT.
// Source: ./triggers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	entities "gitlab.connectwisedev.com/platform/platform-tasking-service/src/entities"
	reflect "reflect"
)

// MockTriggersRepo is a mock of TriggersRepo interface
type MockTriggersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTriggersRepoMockRecorder
}

// MockTriggersRepoMockRecorder is the mock recorder for MockTriggersRepo
type MockTriggersRepoMockRecorder struct {
	mock *MockTriggersRepo
}

// NewMockTriggersRepo creates a new mock instance
func NewMockTriggersRepo(ctrl *gomock.Controller) *MockTriggersRepo {
	mock := &MockTriggersRepo{ctrl: ctrl}
	mock.recorder = &MockTriggersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTriggersRepo) EXPECT() *MockTriggersRepoMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockTriggersRepo) Insert(tr entities.ActiveTrigger) error {
	ret := m.ctrl.Call(m, "Insert", tr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockTriggersRepoMockRecorder) Insert(tr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTriggersRepo)(nil).Insert), tr)
}

// Delete mocks base method
func (m *MockTriggersRepo) Delete(tr entities.ActiveTrigger) error {
	ret := m.ctrl.Call(m, "Delete", tr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTriggersRepoMockRecorder) Delete(tr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTriggersRepo)(nil).Delete), tr)
}

// GetAll mocks base method
func (m *MockTriggersRepo) GetAll() ([]entities.ActiveTrigger, error) {
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]entities.ActiveTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockTriggersRepoMockRecorder) GetAll() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTriggersRepo)(nil).GetAll))
}

// GetAllByType mocks base method
func (m *MockTriggersRepo) GetAllByType(ctx context.Context, typeTrigger, partnerID string, fromCache bool) ([]entities.ActiveTrigger, error) {
	ret := m.ctrl.Call(m, "GetAllByType", ctx, typeTrigger, partnerID, fromCache)
	ret0, _ := ret[0].([]entities.ActiveTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByType indicates an expected call of GetAllByType
func (mr *MockTriggersRepoMockRecorder) GetAllByType(ctx, typeTrigger, partnerID, fromCache interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByType", reflect.TypeOf((*MockTriggersRepo)(nil).GetAllByType), ctx, typeTrigger, partnerID, fromCache)
}

// GetAllByTaskID mocks base method
func (m *MockTriggersRepo) GetAllByTaskID(partnerID string, taskID gocql.UUID) ([]entities.ActiveTrigger, error) {
	ret := m.ctrl.Call(m, "GetAllByTaskID", partnerID, taskID)
	ret0, _ := ret[0].([]entities.ActiveTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByTaskID indicates an expected call of GetAllByTaskID
func (mr *MockTriggersRepoMockRecorder) GetAllByTaskID(partnerID, taskID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByTaskID", reflect.TypeOf((*MockTriggersRepo)(nil).GetAllByTaskID), partnerID, taskID)
}

// InsertDefinitions mocks base method
func (m *MockTriggersRepo) InsertDefinitions(defs []entities.TriggerDefinition) error {
	ret := m.ctrl.Call(m, "InsertDefinitions", defs)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDefinitions indicates an expected call of InsertDefinitions
func (mr *MockTriggersRepoMockRecorder) InsertDefinitions(defs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDefinitions", reflect.TypeOf((*MockTriggersRepo)(nil).InsertDefinitions), defs)
}

// TruncateDefinitions mocks base method
func (m *MockTriggersRepo) TruncateDefinitions() error {
	ret := m.ctrl.Call(m, "TruncateDefinitions")
	ret0, _ := ret[0].(error)
	return ret0
}

// TruncateDefinitions indicates an expected call of TruncateDefinitions
func (mr *MockTriggersRepoMockRecorder) TruncateDefinitions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TruncateDefinitions", reflect.TypeOf((*MockTriggersRepo)(nil).TruncateDefinitions))
}

// GetDefinition mocks base method
func (m *MockTriggersRepo) GetDefinition(triggerType string) (entities.TriggerDefinition, error) {
	ret := m.ctrl.Call(m, "GetDefinition", triggerType)
	ret0, _ := ret[0].(entities.TriggerDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefinition indicates an expected call of GetDefinition
func (mr *MockTriggersRepoMockRecorder) GetDefinition(triggerType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefinition", reflect.TypeOf((*MockTriggersRepo)(nil).GetDefinition), triggerType)
}

// GetAllDefinitions mocks base method
func (m *MockTriggersRepo) GetAllDefinitions() ([]entities.TriggerDefinition, error) {
	ret := m.ctrl.Call(m, "GetAllDefinitions")
	ret0, _ := ret[0].([]entities.TriggerDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDefinitions indicates an expected call of GetAllDefinitions
func (mr *MockTriggersRepoMockRecorder) GetAllDefinitions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDefinitions", reflect.TypeOf((*MockTriggersRepo)(nil).GetAllDefinitions))
}

// GetAllDefinitionsNamesAndIDs mocks base method
func (m *MockTriggersRepo) GetAllDefinitionsNamesAndIDs() ([]entities.TriggerDefinition, error) {
	ret := m.ctrl.Call(m, "GetAllDefinitionsNamesAndIDs")
	ret0, _ := ret[0].([]entities.TriggerDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDefinitionsNamesAndIDs indicates an expected call of GetAllDefinitionsNamesAndIDs
func (mr *MockTriggersRepoMockRecorder) GetAllDefinitionsNamesAndIDs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDefinitionsNamesAndIDs", reflect.TypeOf((*MockTriggersRepo)(nil).GetAllDefinitionsNamesAndIDs))
}

// GetTriggerCounterByType mocks base method
func (m *MockTriggersRepo) GetTriggerCounterByType(triggerType string) (entities.TriggerCounter, error) {
	ret := m.ctrl.Call(m, "GetTriggerCounterByType", triggerType)
	ret0, _ := ret[0].(entities.TriggerCounter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerCounterByType indicates an expected call of GetTriggerCounterByType
func (mr *MockTriggersRepoMockRecorder) GetTriggerCounterByType(triggerType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerCounterByType", reflect.TypeOf((*MockTriggersRepo)(nil).GetTriggerCounterByType), triggerType)
}

// IncreaseCounter mocks base method
func (m *MockTriggersRepo) IncreaseCounter(counter entities.TriggerCounter) error {
	ret := m.ctrl.Call(m, "IncreaseCounter", counter)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseCounter indicates an expected call of IncreaseCounter
func (mr *MockTriggersRepoMockRecorder) IncreaseCounter(counter interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseCounter", reflect.TypeOf((*MockTriggersRepo)(nil).IncreaseCounter), counter)
}

// DecreaseCounter mocks base method
func (m *MockTriggersRepo) DecreaseCounter(counter entities.TriggerCounter) error {
	ret := m.ctrl.Call(m, "DecreaseCounter", counter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecreaseCounter indicates an expected call of DecreaseCounter
func (mr *MockTriggersRepoMockRecorder) DecreaseCounter(counter interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseCounter", reflect.TypeOf((*MockTriggersRepo)(nil).DecreaseCounter), counter)
}
