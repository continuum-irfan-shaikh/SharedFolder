// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.connectwisedev.com/platform/platform-tasking-service/src/services/tasks (interfaces: DynamicGroupRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDynamicGroupRepo is a mock of DynamicGroupRepo interface
type MockDynamicGroupRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDynamicGroupRepoMockRecorder
}

// MockDynamicGroupRepoMockRecorder is the mock recorder for MockDynamicGroupRepo
type MockDynamicGroupRepoMockRecorder struct {
	mock *MockDynamicGroupRepo
}

// NewMockDynamicGroupRepo creates a new mock instance
func NewMockDynamicGroupRepo(ctrl *gomock.Controller) *MockDynamicGroupRepo {
	mock := &MockDynamicGroupRepo{ctrl: ctrl}
	mock.recorder = &MockDynamicGroupRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDynamicGroupRepo) EXPECT() *MockDynamicGroupRepoMockRecorder {
	return m.recorder
}

// GetEndpointsByGroupIDs mocks base method
func (m *MockDynamicGroupRepo) GetEndpointsByGroupIDs(arg0 context.Context, arg1 []string, arg2, arg3 string, arg4 bool) ([]gocql.UUID, error) {
	ret := m.ctrl.Call(m, "GetEndpointsByGroupIDs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]gocql.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpointsByGroupIDs indicates an expected call of GetEndpointsByGroupIDs
func (mr *MockDynamicGroupRepoMockRecorder) GetEndpointsByGroupIDs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointsByGroupIDs", reflect.TypeOf((*MockDynamicGroupRepo)(nil).GetEndpointsByGroupIDs), arg0, arg1, arg2, arg3, arg4)
}
