// Code generated by MockGen. DO NOT EDIT.
// Source: ./intefaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "gitlab.connectwisedev.com/platform/platform-tasking-service/src/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLegacyMigration is a mock of LegacyMigration interface
type MockLegacyMigration struct {
	ctrl     *gomock.Controller
	recorder *MockLegacyMigrationMockRecorder
}

// MockLegacyMigrationMockRecorder is the mock recorder for MockLegacyMigration
type MockLegacyMigrationMockRecorder struct {
	mock *MockLegacyMigration
}

// NewMockLegacyMigration creates a new mock instance
func NewMockLegacyMigration(ctrl *gomock.Controller) *MockLegacyMigration {
	mock := &MockLegacyMigration{ctrl: ctrl}
	mock.recorder = &MockLegacyMigrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLegacyMigration) EXPECT() *MockLegacyMigrationMockRecorder {
	return m.recorder
}

// GetAllScriptInfoByPartner mocks base method
func (m *MockLegacyMigration) GetAllScriptInfoByPartner(partnerID string) ([]models.LegacyScriptInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllScriptInfoByPartner", partnerID)
	ret0, _ := ret[0].([]models.LegacyScriptInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllScriptInfoByPartner indicates an expected call of GetAllScriptInfoByPartner
func (mr *MockLegacyMigrationMockRecorder) GetAllScriptInfoByPartner(partnerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllScriptInfoByPartner", reflect.TypeOf((*MockLegacyMigration)(nil).GetAllScriptInfoByPartner), partnerID)
}

// GetByScriptID mocks base method
func (m *MockLegacyMigration) GetByScriptID(partnerID, scriptID string) (models.LegacyScriptInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByScriptID", partnerID, scriptID)
	ret0, _ := ret[0].(models.LegacyScriptInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByScriptID indicates an expected call of GetByScriptID
func (mr *MockLegacyMigrationMockRecorder) GetByScriptID(partnerID, scriptID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByScriptID", reflect.TypeOf((*MockLegacyMigration)(nil).GetByScriptID), partnerID, scriptID)
}

// InsertScriptInfo mocks base method
func (m *MockLegacyMigration) InsertScriptInfo(data models.LegacyScriptInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertScriptInfo", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertScriptInfo indicates an expected call of InsertScriptInfo
func (mr *MockLegacyMigrationMockRecorder) InsertScriptInfo(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertScriptInfo", reflect.TypeOf((*MockLegacyMigration)(nil).InsertScriptInfo), data)
}

// GetAllJobsInfoByPartner mocks base method
func (m *MockLegacyMigration) GetAllJobsInfoByPartner(partnerID string) ([]models.LegacyJobInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobsInfoByPartner", partnerID)
	ret0, _ := ret[0].([]models.LegacyJobInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobsInfoByPartner indicates an expected call of GetAllJobsInfoByPartner
func (mr *MockLegacyMigrationMockRecorder) GetAllJobsInfoByPartner(partnerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobsInfoByPartner", reflect.TypeOf((*MockLegacyMigration)(nil).GetAllJobsInfoByPartner), partnerID)
}

// GetByJobID mocks base method
func (m *MockLegacyMigration) GetByJobID(partnerID, jobID string) (models.LegacyJobInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobID", partnerID, jobID)
	ret0, _ := ret[0].(models.LegacyJobInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobID indicates an expected call of GetByJobID
func (mr *MockLegacyMigrationMockRecorder) GetByJobID(partnerID, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobID", reflect.TypeOf((*MockLegacyMigration)(nil).GetByJobID), partnerID, jobID)
}

// InsertJobInfo mocks base method
func (m *MockLegacyMigration) InsertJobInfo(data models.LegacyJobInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertJobInfo", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertJobInfo indicates an expected call of InsertJobInfo
func (mr *MockLegacyMigrationMockRecorder) InsertJobInfo(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertJobInfo", reflect.TypeOf((*MockLegacyMigration)(nil).InsertJobInfo), data)
}
