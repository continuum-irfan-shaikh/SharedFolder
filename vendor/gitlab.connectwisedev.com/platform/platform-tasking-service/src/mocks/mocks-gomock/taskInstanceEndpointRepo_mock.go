// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.connectwisedev.com/platform/platform-tasking-service/src/handlers/kafka (interfaces: InstanceEndpointsRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	models "gitlab.connectwisedev.com/platform/platform-tasking-service/src/models"
	reflect "reflect"
)

// MockInstanceEndpointsRepo is a mock of InstanceEndpointsRepo interface
type MockInstanceEndpointsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceEndpointsRepoMockRecorder
}

// MockInstanceEndpointsRepoMockRecorder is the mock recorder for MockInstanceEndpointsRepo
type MockInstanceEndpointsRepoMockRecorder struct {
	mock *MockInstanceEndpointsRepo
}

// NewMockInstanceEndpointsRepo creates a new mock instance
func NewMockInstanceEndpointsRepo(ctrl *gomock.Controller) *MockInstanceEndpointsRepo {
	mock := &MockInstanceEndpointsRepo{ctrl: ctrl}
	mock.recorder = &MockInstanceEndpointsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstanceEndpointsRepo) EXPECT() *MockInstanceEndpointsRepoMockRecorder {
	return m.recorder
}

// RemoveInactiveEndpoints mocks base method
func (m *MockInstanceEndpointsRepo) RemoveInactiveEndpoints(arg0 models.TaskInstance, arg1 ...gocql.UUID) error {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveInactiveEndpoints", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveInactiveEndpoints indicates an expected call of RemoveInactiveEndpoints
func (mr *MockInstanceEndpointsRepoMockRecorder) RemoveInactiveEndpoints(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInactiveEndpoints", reflect.TypeOf((*MockInstanceEndpointsRepo)(nil).RemoveInactiveEndpoints), varargs...)
}
