// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.connectwisedev.com/platform/platform-tasking-service/src/models (interfaces: TemplateCache)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "gitlab.connectwisedev.com/platform/platform-tasking-service/src/models"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTemplateCache is a mock of TemplateCache interface
type MockTemplateCache struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateCacheMockRecorder
}

// MockTemplateCacheMockRecorder is the mock recorder for MockTemplateCache
type MockTemplateCacheMockRecorder struct {
	mock *MockTemplateCache
}

// NewMockTemplateCache creates a new mock instance
func NewMockTemplateCache(ctrl *gomock.Controller) *MockTemplateCache {
	mock := &MockTemplateCache{ctrl: ctrl}
	mock.recorder = &MockTemplateCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTemplateCache) EXPECT() *MockTemplateCacheMockRecorder {
	return m.recorder
}

// CalculateExpectedExecutionTimeSec mocks base method
func (m *MockTemplateCache) CalculateExpectedExecutionTimeSec(arg0 context.Context, arg1 models.Task) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateExpectedExecutionTimeSec", arg0, arg1)
	ret0, _ := ret[0].(int)
	return ret0
}

// CalculateExpectedExecutionTimeSec indicates an expected call of CalculateExpectedExecutionTimeSec
func (mr *MockTemplateCacheMockRecorder) CalculateExpectedExecutionTimeSec(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateExpectedExecutionTimeSec", reflect.TypeOf((*MockTemplateCache)(nil).CalculateExpectedExecutionTimeSec), arg0, arg1)
}

// ExistsWithName mocks base method
func (m *MockTemplateCache) ExistsWithName(arg0 context.Context, arg1, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsWithName", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistsWithName indicates an expected call of ExistsWithName
func (mr *MockTemplateCacheMockRecorder) ExistsWithName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsWithName", reflect.TypeOf((*MockTemplateCache)(nil).ExistsWithName), arg0, arg1, arg2)
}

// GetAllTemplates mocks base method
func (m *MockTemplateCache) GetAllTemplates(arg0 context.Context, arg1 string, arg2 bool) ([]models.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTemplates", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTemplates indicates an expected call of GetAllTemplates
func (mr *MockTemplateCacheMockRecorder) GetAllTemplates(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTemplates", reflect.TypeOf((*MockTemplateCache)(nil).GetAllTemplates), arg0, arg1, arg2)
}

// GetAllTemplatesDetails mocks base method
func (m *MockTemplateCache) GetAllTemplatesDetails(arg0 context.Context, arg1 string) ([]models.TemplateDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTemplatesDetails", arg0, arg1)
	ret0, _ := ret[0].([]models.TemplateDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTemplatesDetails indicates an expected call of GetAllTemplatesDetails
func (mr *MockTemplateCacheMockRecorder) GetAllTemplatesDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTemplatesDetails", reflect.TypeOf((*MockTemplateCache)(nil).GetAllTemplatesDetails), arg0, arg1)
}

// GetByOriginID mocks base method
func (m *MockTemplateCache) GetByOriginID(arg0 context.Context, arg1 string, arg2 gocql.UUID, arg3 bool) (models.TemplateDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOriginID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(models.TemplateDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOriginID indicates an expected call of GetByOriginID
func (mr *MockTemplateCacheMockRecorder) GetByOriginID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOriginID", reflect.TypeOf((*MockTemplateCache)(nil).GetByOriginID), arg0, arg1, arg2, arg3)
}

// GetByType mocks base method
func (m *MockTemplateCache) GetByType(arg0 context.Context, arg1, arg2 string, arg3 bool) ([]models.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByType", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByType indicates an expected call of GetByType
func (mr *MockTemplateCacheMockRecorder) GetByType(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByType", reflect.TypeOf((*MockTemplateCache)(nil).GetByType), arg0, arg1, arg2, arg3)
}
