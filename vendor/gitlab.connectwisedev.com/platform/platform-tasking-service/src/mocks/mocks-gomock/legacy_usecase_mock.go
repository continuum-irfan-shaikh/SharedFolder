// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "gitlab.connectwisedev.com/platform/platform-tasking-service/src/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMigrationUC is a mock of MigrationUC interface
type MockMigrationUC struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationUCMockRecorder
}

// MockMigrationUCMockRecorder is the mock recorder for MockMigrationUC
type MockMigrationUCMockRecorder struct {
	mock *MockMigrationUC
}

// NewMockMigrationUC creates a new mock instance
func NewMockMigrationUC(ctrl *gomock.Controller) *MockMigrationUC {
	mock := &MockMigrationUC{ctrl: ctrl}
	mock.recorder = &MockMigrationUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMigrationUC) EXPECT() *MockMigrationUCMockRecorder {
	return m.recorder
}

// InsertScriptInfo mocks base method
func (m *MockMigrationUC) InsertScriptInfo(partnerID string, data models.LegacyScriptInfo) error {
	ret := m.ctrl.Call(m, "InsertScriptInfo", partnerID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertScriptInfo indicates an expected call of InsertScriptInfo
func (mr *MockMigrationUCMockRecorder) InsertScriptInfo(partnerID, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertScriptInfo", reflect.TypeOf((*MockMigrationUC)(nil).InsertScriptInfo), partnerID, data)
}

// GetByPartner mocks base method
func (m *MockMigrationUC) GetByPartner(partnerID string) ([]models.LegacyScriptInfo, error) {
	ret := m.ctrl.Call(m, "GetByPartner", partnerID)
	ret0, _ := ret[0].([]models.LegacyScriptInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPartner indicates an expected call of GetByPartner
func (mr *MockMigrationUCMockRecorder) GetByPartner(partnerID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPartner", reflect.TypeOf((*MockMigrationUC)(nil).GetByPartner), partnerID)
}

// GetByScriptID mocks base method
func (m *MockMigrationUC) GetByScriptID(partnerID, scriptID string) (models.LegacyScriptInfo, error) {
	ret := m.ctrl.Call(m, "GetByScriptID", partnerID, scriptID)
	ret0, _ := ret[0].(models.LegacyScriptInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByScriptID indicates an expected call of GetByScriptID
func (mr *MockMigrationUCMockRecorder) GetByScriptID(partnerID, scriptID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByScriptID", reflect.TypeOf((*MockMigrationUC)(nil).GetByScriptID), partnerID, scriptID)
}

// InsertJobInfo mocks base method
func (m *MockMigrationUC) InsertJobInfo(partnerID string, data models.LegacyJobInfo) error {
	ret := m.ctrl.Call(m, "InsertJobInfo", partnerID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertJobInfo indicates an expected call of InsertJobInfo
func (mr *MockMigrationUCMockRecorder) InsertJobInfo(partnerID, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertJobInfo", reflect.TypeOf((*MockMigrationUC)(nil).InsertJobInfo), partnerID, data)
}

// GetJobsByPartner mocks base method
func (m *MockMigrationUC) GetJobsByPartner(partnerID string) ([]models.LegacyJobInfo, error) {
	ret := m.ctrl.Call(m, "GetJobsByPartner", partnerID)
	ret0, _ := ret[0].([]models.LegacyJobInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobsByPartner indicates an expected call of GetJobsByPartner
func (mr *MockMigrationUCMockRecorder) GetJobsByPartner(partnerID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobsByPartner", reflect.TypeOf((*MockMigrationUC)(nil).GetJobsByPartner), partnerID)
}

// GetByJobID mocks base method
func (m *MockMigrationUC) GetByJobID(partnerID, scriptID string) (models.LegacyJobInfo, error) {
	ret := m.ctrl.Call(m, "GetByJobID", partnerID, scriptID)
	ret0, _ := ret[0].(models.LegacyJobInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobID indicates an expected call of GetByJobID
func (mr *MockMigrationUCMockRecorder) GetByJobID(partnerID, scriptID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobID", reflect.TypeOf((*MockMigrationUC)(nil).GetByJobID), partnerID, scriptID)
}
