// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.connectwisedev.com/platform/platform-tasking-service/src/integration (interfaces: DynamicGroups)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDynamicGroups is a mock of DynamicGroups interface
type MockDynamicGroups struct {
	ctrl     *gomock.Controller
	recorder *MockDynamicGroupsMockRecorder
}

// MockDynamicGroupsMockRecorder is the mock recorder for MockDynamicGroups
type MockDynamicGroupsMockRecorder struct {
	mock *MockDynamicGroups
}

// NewMockDynamicGroups creates a new mock instance
func NewMockDynamicGroups(ctrl *gomock.Controller) *MockDynamicGroups {
	mock := &MockDynamicGroups{ctrl: ctrl}
	mock.recorder = &MockDynamicGroupsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDynamicGroups) EXPECT() *MockDynamicGroupsMockRecorder {
	return m.recorder
}

// GetEndpointsByGroupIDs mocks base method
func (m *MockDynamicGroups) GetEndpointsByGroupIDs(arg0 context.Context, arg1 []string, arg2, arg3 string, arg4 bool) ([]gocql.UUID, error) {
	ret := m.ctrl.Call(m, "GetEndpointsByGroupIDs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]gocql.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpointsByGroupIDs indicates an expected call of GetEndpointsByGroupIDs
func (mr *MockDynamicGroupsMockRecorder) GetEndpointsByGroupIDs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointsByGroupIDs", reflect.TypeOf((*MockDynamicGroups)(nil).GetEndpointsByGroupIDs), arg0, arg1, arg2, arg3, arg4)
}

// StartMonitoringGroups mocks base method
func (m *MockDynamicGroups) StartMonitoringGroups(arg0 context.Context, arg1 string, arg2 []string, arg3 gocql.UUID) error {
	ret := m.ctrl.Call(m, "StartMonitoringGroups", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartMonitoringGroups indicates an expected call of StartMonitoringGroups
func (mr *MockDynamicGroupsMockRecorder) StartMonitoringGroups(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMonitoringGroups", reflect.TypeOf((*MockDynamicGroups)(nil).StartMonitoringGroups), arg0, arg1, arg2, arg3)
}

// StopGroupsMonitoring mocks base method
func (m *MockDynamicGroups) StopGroupsMonitoring(arg0 context.Context, arg1 string, arg2 []string, arg3 gocql.UUID) error {
	ret := m.ctrl.Call(m, "StopGroupsMonitoring", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopGroupsMonitoring indicates an expected call of StopGroupsMonitoring
func (mr *MockDynamicGroupsMockRecorder) StopGroupsMonitoring(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopGroupsMonitoring", reflect.TypeOf((*MockDynamicGroups)(nil).StopGroupsMonitoring), arg0, arg1, arg2, arg3)
}
