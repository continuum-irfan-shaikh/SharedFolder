// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.connectwisedev.com/platform/platform-tasking-service/src/models (interfaces: UserSitesPersistence)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "gitlab.connectwisedev.com/platform/platform-tasking-service/src/entities"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserSitesPersistence is a mock of UserSitesPersistence interface
type MockUserSitesPersistence struct {
	ctrl     *gomock.Controller
	recorder *MockUserSitesPersistenceMockRecorder
}

// MockUserSitesPersistenceMockRecorder is the mock recorder for MockUserSitesPersistence
type MockUserSitesPersistenceMockRecorder struct {
	mock *MockUserSitesPersistence
}

// NewMockUserSitesPersistence creates a new mock instance
func NewMockUserSitesPersistence(ctrl *gomock.Controller) *MockUserSitesPersistence {
	mock := &MockUserSitesPersistence{ctrl: ctrl}
	mock.recorder = &MockUserSitesPersistenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserSitesPersistence) EXPECT() *MockUserSitesPersistenceMockRecorder {
	return m.recorder
}

// Endpoints mocks base method
func (m *MockUserSitesPersistence) Endpoints(arg0 context.Context, arg1 string, arg2 []string) ([]entities.Endpoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoints", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entities.Endpoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Endpoints indicates an expected call of Endpoints
func (mr *MockUserSitesPersistenceMockRecorder) Endpoints(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoints", reflect.TypeOf((*MockUserSitesPersistence)(nil).Endpoints), arg0, arg1, arg2)
}

// EndpointsByPartner mocks base method
func (m *MockUserSitesPersistence) EndpointsByPartner(arg0 context.Context, arg1 string) ([]entities.Endpoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndpointsByPartner", arg0, arg1)
	ret0, _ := ret[0].([]entities.Endpoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndpointsByPartner indicates an expected call of EndpointsByPartner
func (mr *MockUserSitesPersistenceMockRecorder) EndpointsByPartner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointsByPartner", reflect.TypeOf((*MockUserSitesPersistence)(nil).EndpointsByPartner), arg0, arg1)
}

// GetSitesByTaskID mocks base method
func (m *MockUserSitesPersistence) GetSitesByTaskID(arg0 context.Context, arg1 gocql.UUID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSitesByTaskID", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSitesByTaskID indicates an expected call of GetSitesByTaskID
func (mr *MockUserSitesPersistenceMockRecorder) GetSitesByTaskID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSitesByTaskID", reflect.TypeOf((*MockUserSitesPersistence)(nil).GetSitesByTaskID), arg0, arg1)
}

// InsertSitesByTaskID mocks base method
func (m *MockUserSitesPersistence) InsertSitesByTaskID(arg0 context.Context, arg1 gocql.UUID, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSitesByTaskID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSitesByTaskID indicates an expected call of InsertSitesByTaskID
func (mr *MockUserSitesPersistenceMockRecorder) InsertSitesByTaskID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSitesByTaskID", reflect.TypeOf((*MockUserSitesPersistence)(nil).InsertSitesByTaskID), arg0, arg1, arg2)
}

// InsertUserSites mocks base method
func (m *MockUserSitesPersistence) InsertUserSites(arg0 context.Context, arg1, arg2 string, arg3 []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserSites", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserSites indicates an expected call of InsertUserSites
func (mr *MockUserSitesPersistenceMockRecorder) InsertUserSites(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserSites", reflect.TypeOf((*MockUserSitesPersistence)(nil).InsertUserSites), arg0, arg1, arg2, arg3)
}

// SaveEndpoints mocks base method
func (m *MockUserSitesPersistence) SaveEndpoints(arg0 context.Context, arg1 []entities.Endpoints) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveEndpoints", arg0, arg1)
}

// SaveEndpoints indicates an expected call of SaveEndpoints
func (mr *MockUserSitesPersistenceMockRecorder) SaveEndpoints(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEndpoints", reflect.TypeOf((*MockUserSitesPersistence)(nil).SaveEndpoints), arg0, arg1)
}

// Sites mocks base method
func (m *MockUserSitesPersistence) Sites(arg0 context.Context, arg1, arg2 string) (entities.UserSites, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sites", arg0, arg1, arg2)
	ret0, _ := ret[0].(entities.UserSites)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sites indicates an expected call of Sites
func (mr *MockUserSitesPersistenceMockRecorder) Sites(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sites", reflect.TypeOf((*MockUserSitesPersistence)(nil).Sites), arg0, arg1, arg2)
}
