// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.connectwisedev.com/platform/platform-tasking-service/src/models (interfaces: TaskDefinitionPersistence)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "gitlab.connectwisedev.com/platform/platform-tasking-service/src/models"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTaskDefinitionPersistence is a mock of TaskDefinitionPersistence interface
type MockTaskDefinitionPersistence struct {
	ctrl     *gomock.Controller
	recorder *MockTaskDefinitionPersistenceMockRecorder
}

// MockTaskDefinitionPersistenceMockRecorder is the mock recorder for MockTaskDefinitionPersistence
type MockTaskDefinitionPersistenceMockRecorder struct {
	mock *MockTaskDefinitionPersistence
}

// NewMockTaskDefinitionPersistence creates a new mock instance
func NewMockTaskDefinitionPersistence(ctrl *gomock.Controller) *MockTaskDefinitionPersistence {
	mock := &MockTaskDefinitionPersistence{ctrl: ctrl}
	mock.recorder = &MockTaskDefinitionPersistenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskDefinitionPersistence) EXPECT() *MockTaskDefinitionPersistenceMockRecorder {
	return m.recorder
}

// CanBeUpdated mocks base method
func (m *MockTaskDefinitionPersistence) CanBeUpdated(arg0 context.Context, arg1, arg2 string, arg3 gocql.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanBeUpdated", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanBeUpdated indicates an expected call of CanBeUpdated
func (mr *MockTaskDefinitionPersistenceMockRecorder) CanBeUpdated(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanBeUpdated", reflect.TypeOf((*MockTaskDefinitionPersistence)(nil).CanBeUpdated), arg0, arg1, arg2, arg3)
}

// Exists mocks base method
func (m *MockTaskDefinitionPersistence) Exists(arg0 context.Context, arg1, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists
func (mr *MockTaskDefinitionPersistenceMockRecorder) Exists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockTaskDefinitionPersistence)(nil).Exists), arg0, arg1, arg2)
}

// GetAllByPartnerID mocks base method
func (m *MockTaskDefinitionPersistence) GetAllByPartnerID(arg0 context.Context, arg1 string) ([]models.TaskDefinitionDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByPartnerID", arg0, arg1)
	ret0, _ := ret[0].([]models.TaskDefinitionDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByPartnerID indicates an expected call of GetAllByPartnerID
func (mr *MockTaskDefinitionPersistenceMockRecorder) GetAllByPartnerID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByPartnerID", reflect.TypeOf((*MockTaskDefinitionPersistence)(nil).GetAllByPartnerID), arg0, arg1)
}

// GetByID mocks base method
func (m *MockTaskDefinitionPersistence) GetByID(arg0 context.Context, arg1 string, arg2 gocql.UUID) (models.TaskDefinitionDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.TaskDefinitionDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockTaskDefinitionPersistenceMockRecorder) GetByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTaskDefinitionPersistence)(nil).GetByID), arg0, arg1, arg2)
}

// Upsert mocks base method
func (m *MockTaskDefinitionPersistence) Upsert(arg0 context.Context, arg1 models.TaskDefinitionDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert
func (mr *MockTaskDefinitionPersistenceMockRecorder) Upsert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockTaskDefinitionPersistence)(nil).Upsert), arg0, arg1)
}
