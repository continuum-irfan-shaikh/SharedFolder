// Code generated by MockGen. DO NOT EDIT.
// Source: ./asset.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	integration "gitlab.connectwisedev.com/platform/platform-tasking-service/src/integration"
)

// MockAsset is a mock of Asset interface
type MockAsset struct {
	ctrl     *gomock.Controller
	recorder *MockAssetMockRecorder
}

// MockAssetMockRecorder is the mock recorder for MockAsset
type MockAssetMockRecorder struct {
	mock *MockAsset
}

// NewMockAsset creates a new mock instance
func NewMockAsset(ctrl *gomock.Controller) *MockAsset {
	mock := &MockAsset{ctrl: ctrl}
	mock.recorder = &MockAssetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAsset) EXPECT() *MockAssetMockRecorder {
	return m.recorder
}

// GetLocationByEndpointID mocks base method
func (m *MockAsset) GetLocationByEndpointID(ctx context.Context, partnerID string, endpointID gocql.UUID) (*time.Location, error) {
	ret := m.ctrl.Call(m, "GetLocationByEndpointID", ctx, partnerID, endpointID)
	ret0, _ := ret[0].(*time.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationByEndpointID indicates an expected call of GetLocationByEndpointID
func (mr *MockAssetMockRecorder) GetLocationByEndpointID(ctx, partnerID, endpointID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationByEndpointID", reflect.TypeOf((*MockAsset)(nil).GetLocationByEndpointID), ctx, partnerID, endpointID)
}

// GetResourceTypeByEndpointID mocks base method
func (m *MockAsset) GetResourceTypeByEndpointID(ctx context.Context, partnerID string, endpointID gocql.UUID) (integration.ResourceType, error) {
	ret := m.ctrl.Call(m, "GetResourceTypeByEndpointID", ctx, partnerID, endpointID)
	ret0, _ := ret[0].(integration.ResourceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceTypeByEndpointID indicates an expected call of GetResourceTypeByEndpointID
func (mr *MockAssetMockRecorder) GetResourceTypeByEndpointID(ctx, partnerID, endpointID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceTypeByEndpointID", reflect.TypeOf((*MockAsset)(nil).GetResourceTypeByEndpointID), ctx, partnerID, endpointID)
}

// GetSiteIDByEndpointID mocks base method
func (m *MockAsset) GetSiteIDByEndpointID(ctx context.Context, partnerID string, endpointID gocql.UUID) (string, string, error) {
	ret := m.ctrl.Call(m, "GetSiteIDByEndpointID", ctx, partnerID, endpointID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSiteIDByEndpointID indicates an expected call of GetSiteIDByEndpointID
func (mr *MockAssetMockRecorder) GetSiteIDByEndpointID(ctx, partnerID, endpointID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteIDByEndpointID", reflect.TypeOf((*MockAsset)(nil).GetSiteIDByEndpointID), ctx, partnerID, endpointID)
}

// GetMachineNameByEndpointID mocks base method
func (m *MockAsset) GetMachineNameByEndpointID(ctx context.Context, partnerID string, endpointID gocql.UUID) (string, error) {
	ret := m.ctrl.Call(m, "GetMachineNameByEndpointID", ctx, partnerID, endpointID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineNameByEndpointID indicates an expected call of GetMachineNameByEndpointID
func (mr *MockAssetMockRecorder) GetMachineNameByEndpointID(ctx, partnerID, endpointID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineNameByEndpointID", reflect.TypeOf((*MockAsset)(nil).GetMachineNameByEndpointID), ctx, partnerID, endpointID)
}
