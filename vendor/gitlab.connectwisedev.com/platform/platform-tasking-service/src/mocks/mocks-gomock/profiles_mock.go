// Code generated by MockGen. DO NOT EDIT.
// Source: ./profiles.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProfiles is a mock of Profiles interface
type MockProfiles struct {
	ctrl     *gomock.Controller
	recorder *MockProfilesMockRecorder
}

// MockProfilesMockRecorder is the mock recorder for MockProfiles
type MockProfilesMockRecorder struct {
	mock *MockProfiles
}

// NewMockProfiles creates a new mock instance
func NewMockProfiles(ctrl *gomock.Controller) *MockProfiles {
	mock := &MockProfiles{ctrl: ctrl}
	mock.recorder = &MockProfilesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProfiles) EXPECT() *MockProfilesMockRecorder {
	return m.recorder
}

// GetByTaskID mocks base method
func (m *MockProfiles) GetByTaskID(taskID gocql.UUID) (gocql.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTaskID", taskID)
	ret0, _ := ret[0].(gocql.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTaskID indicates an expected call of GetByTaskID
func (mr *MockProfilesMockRecorder) GetByTaskID(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTaskID", reflect.TypeOf((*MockProfiles)(nil).GetByTaskID), taskID)
}

// Insert mocks base method
func (m *MockProfiles) Insert(taskID, profileID gocql.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", taskID, profileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockProfilesMockRecorder) Insert(taskID, profileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProfiles)(nil).Insert), taskID, profileID)
}

// Delete mocks base method
func (m *MockProfiles) Delete(taskID gocql.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockProfilesMockRecorder) Delete(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProfiles)(nil).Delete), taskID)
}
