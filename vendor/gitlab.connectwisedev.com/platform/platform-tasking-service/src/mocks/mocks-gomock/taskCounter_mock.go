// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.connectwisedev.com/platform/platform-tasking-service/src/models (interfaces: TaskCounterPersistence)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "gitlab.connectwisedev.com/platform/platform-tasking-service/src/models"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskCounterPersistence is a mock of TaskCounterPersistence interface
type MockTaskCounterPersistence struct {
	ctrl     *gomock.Controller
	recorder *MockTaskCounterPersistenceMockRecorder
}

// MockTaskCounterPersistenceMockRecorder is the mock recorder for MockTaskCounterPersistence
type MockTaskCounterPersistenceMockRecorder struct {
	mock *MockTaskCounterPersistence
}

// NewMockTaskCounterPersistence creates a new mock instance
func NewMockTaskCounterPersistence(ctrl *gomock.Controller) *MockTaskCounterPersistence {
	mock := &MockTaskCounterPersistence{ctrl: ctrl}
	mock.recorder = &MockTaskCounterPersistenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskCounterPersistence) EXPECT() *MockTaskCounterPersistenceMockRecorder {
	return m.recorder
}

// DecreaseCounter mocks base method
func (m *MockTaskCounterPersistence) DecreaseCounter(arg0 string, arg1 []models.TaskCount, arg2 bool) error {
	ret := m.ctrl.Call(m, "DecreaseCounter", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecreaseCounter indicates an expected call of DecreaseCounter
func (mr *MockTaskCounterPersistenceMockRecorder) DecreaseCounter(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseCounter", reflect.TypeOf((*MockTaskCounterPersistence)(nil).DecreaseCounter), arg0, arg1, arg2)
}

// GetAllPartners mocks base method
func (m *MockTaskCounterPersistence) GetAllPartners(arg0 context.Context) (map[string]struct{}, error) {
	ret := m.ctrl.Call(m, "GetAllPartners", arg0)
	ret0, _ := ret[0].(map[string]struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPartners indicates an expected call of GetAllPartners
func (mr *MockTaskCounterPersistenceMockRecorder) GetAllPartners(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPartners", reflect.TypeOf((*MockTaskCounterPersistence)(nil).GetAllPartners), arg0)
}

// GetCounters mocks base method
func (m *MockTaskCounterPersistence) GetCounters(arg0 context.Context, arg1 string, arg2 gocql.UUID) ([]models.TaskCount, error) {
	ret := m.ctrl.Call(m, "GetCounters", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.TaskCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounters indicates an expected call of GetCounters
func (mr *MockTaskCounterPersistenceMockRecorder) GetCounters(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounters", reflect.TypeOf((*MockTaskCounterPersistence)(nil).GetCounters), arg0, arg1, arg2)
}

// IncreaseCounter mocks base method
func (m *MockTaskCounterPersistence) IncreaseCounter(arg0 string, arg1 []models.TaskCount, arg2 bool) error {
	ret := m.ctrl.Call(m, "IncreaseCounter", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseCounter indicates an expected call of IncreaseCounter
func (mr *MockTaskCounterPersistenceMockRecorder) IncreaseCounter(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseCounter", reflect.TypeOf((*MockTaskCounterPersistence)(nil).IncreaseCounter), arg0, arg1, arg2)
}
