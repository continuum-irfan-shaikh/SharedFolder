// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.connectwisedev.com/platform/platform-tasking-service/src/models (interfaces: TaskPersistence)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "gitlab.connectwisedev.com/platform/platform-tasking-service/src/models"
	persistency "gitlab.connectwisedev.com/platform/platform-tasking-service/src/persistency"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockTaskPersistence is a mock of TaskPersistence interface
type MockTaskPersistence struct {
	ctrl     *gomock.Controller
	recorder *MockTaskPersistenceMockRecorder
}

// MockTaskPersistenceMockRecorder is the mock recorder for MockTaskPersistence
type MockTaskPersistenceMockRecorder struct {
	mock *MockTaskPersistence
}

// NewMockTaskPersistence creates a new mock instance
func NewMockTaskPersistence(ctrl *gomock.Controller) *MockTaskPersistence {
	mock := &MockTaskPersistence{ctrl: ctrl}
	mock.recorder = &MockTaskPersistenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskPersistence) EXPECT() *MockTaskPersistenceMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockTaskPersistence) Delete(arg0 context.Context, arg1 []models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTaskPersistenceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskPersistence)(nil).Delete), arg0, arg1)
}

// GetByIDAndManagedEndpoints mocks base method
func (m *MockTaskPersistence) GetByIDAndManagedEndpoints(arg0 context.Context, arg1 string, arg2 gocql.UUID, arg3 ...gocql.UUID) ([]models.Task, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByIDAndManagedEndpoints", varargs...)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDAndManagedEndpoints indicates an expected call of GetByIDAndManagedEndpoints
func (mr *MockTaskPersistenceMockRecorder) GetByIDAndManagedEndpoints(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDAndManagedEndpoints", reflect.TypeOf((*MockTaskPersistence)(nil).GetByIDAndManagedEndpoints), varargs...)
}

// GetByIDs mocks base method
func (m *MockTaskPersistence) GetByIDs(arg0 context.Context, arg1 persistency.Cache, arg2 string, arg3 bool, arg4 ...gocql.UUID) ([]models.Task, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByIDs", varargs...)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs
func (mr *MockTaskPersistenceMockRecorder) GetByIDs(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockTaskPersistence)(nil).GetByIDs), varargs...)
}

// GetByLastTaskInstanceIDs mocks base method
func (m *MockTaskPersistence) GetByLastTaskInstanceIDs(arg0 context.Context, arg1 string, arg2 gocql.UUID, arg3 ...gocql.UUID) (map[gocql.UUID]models.Task, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByLastTaskInstanceIDs", varargs...)
	ret0, _ := ret[0].(map[gocql.UUID]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLastTaskInstanceIDs indicates an expected call of GetByLastTaskInstanceIDs
func (mr *MockTaskPersistenceMockRecorder) GetByLastTaskInstanceIDs(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLastTaskInstanceIDs", reflect.TypeOf((*MockTaskPersistence)(nil).GetByLastTaskInstanceIDs), varargs...)
}

// GetByPartner mocks base method
func (m *MockTaskPersistence) GetByPartner(arg0 context.Context, arg1 string) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPartner", arg0, arg1)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPartner indicates an expected call of GetByPartner
func (mr *MockTaskPersistenceMockRecorder) GetByPartner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPartner", reflect.TypeOf((*MockTaskPersistence)(nil).GetByPartner), arg0, arg1)
}

// GetByPartnerAndManagedEndpointID mocks base method
func (m *MockTaskPersistence) GetByPartnerAndManagedEndpointID(arg0 context.Context, arg1 string, arg2 gocql.UUID, arg3 int) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPartnerAndManagedEndpointID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPartnerAndManagedEndpointID indicates an expected call of GetByPartnerAndManagedEndpointID
func (mr *MockTaskPersistenceMockRecorder) GetByPartnerAndManagedEndpointID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPartnerAndManagedEndpointID", reflect.TypeOf((*MockTaskPersistence)(nil).GetByPartnerAndManagedEndpointID), arg0, arg1, arg2, arg3)
}

// GetByPartnerAndTime mocks base method
func (m *MockTaskPersistence) GetByPartnerAndTime(arg0 context.Context, arg1 string, arg2 time.Time) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPartnerAndTime", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPartnerAndTime indicates an expected call of GetByPartnerAndTime
func (mr *MockTaskPersistenceMockRecorder) GetByPartnerAndTime(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPartnerAndTime", reflect.TypeOf((*MockTaskPersistence)(nil).GetByPartnerAndTime), arg0, arg1, arg2)
}

// GetByRunTimeRange mocks base method
func (m *MockTaskPersistence) GetByRunTimeRange(arg0 context.Context, arg1 []time.Time) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRunTimeRange", arg0, arg1)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRunTimeRange indicates an expected call of GetByRunTimeRange
func (mr *MockTaskPersistenceMockRecorder) GetByRunTimeRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRunTimeRange", reflect.TypeOf((*MockTaskPersistence)(nil).GetByRunTimeRange), arg0, arg1)
}

// GetCountByManagedEndpointID mocks base method
func (m *MockTaskPersistence) GetCountByManagedEndpointID(arg0 context.Context, arg1 string, arg2 gocql.UUID) (models.TaskCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountByManagedEndpointID", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.TaskCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountByManagedEndpointID indicates an expected call of GetCountByManagedEndpointID
func (mr *MockTaskPersistenceMockRecorder) GetCountByManagedEndpointID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountByManagedEndpointID", reflect.TypeOf((*MockTaskPersistence)(nil).GetCountByManagedEndpointID), arg0, arg1, arg2)
}

// GetCountsByPartner mocks base method
func (m *MockTaskPersistence) GetCountsByPartner(arg0 context.Context, arg1 string) ([]models.TaskCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountsByPartner", arg0, arg1)
	ret0, _ := ret[0].([]models.TaskCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountsByPartner indicates an expected call of GetCountsByPartner
func (mr *MockTaskPersistenceMockRecorder) GetCountsByPartner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountsByPartner", reflect.TypeOf((*MockTaskPersistence)(nil).GetCountsByPartner), arg0, arg1)
}

// GetExecutionResultTaskData mocks base method
func (m *MockTaskPersistence) GetExecutionResultTaskData(arg0 string, arg1, arg2 gocql.UUID) (models.ExecutionResultTaskData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionResultTaskData", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.ExecutionResultTaskData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionResultTaskData indicates an expected call of GetExecutionResultTaskData
func (mr *MockTaskPersistenceMockRecorder) GetExecutionResultTaskData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionResultTaskData", reflect.TypeOf((*MockTaskPersistence)(nil).GetExecutionResultTaskData), arg0, arg1, arg2)
}

// GetManagedEndpointIDsOfActiveTasks mocks base method
func (m *MockTaskPersistence) GetManagedEndpointIDsOfActiveTasks(arg0 context.Context, arg1 string, arg2 gocql.UUID) (map[gocql.UUID]struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagedEndpointIDsOfActiveTasks", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[gocql.UUID]struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManagedEndpointIDsOfActiveTasks indicates an expected call of GetManagedEndpointIDsOfActiveTasks
func (mr *MockTaskPersistenceMockRecorder) GetManagedEndpointIDsOfActiveTasks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedEndpointIDsOfActiveTasks", reflect.TypeOf((*MockTaskPersistence)(nil).GetManagedEndpointIDsOfActiveTasks), arg0, arg1, arg2)
}

// GetTargetTypeByEndpoint mocks base method
func (m *MockTaskPersistence) GetTargetTypeByEndpoint(arg0 string, arg1, arg2 gocql.UUID, arg3 bool) (models.TargetType, error) {
	ret := m.ctrl.Call(m, "GetTargetTypeByEndpoint", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(models.TargetType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetTypeByEndpoint indicates an expected call of GetTargetTypeByEndpoint
func (mr *MockTaskPersistenceMockRecorder) GetTargetTypeByEndpoint(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetTypeByEndpoint", reflect.TypeOf((*MockTaskPersistence)(nil).GetTargetTypeByEndpoint), arg0, arg1, arg2, arg3)
}

// GetTasksFilteredWithTime mocks base method
func (m *MockTaskPersistence) GetTasksFilteredWithTime(arg0 context.Context, arg1 string, arg2 gocql.UUID, arg3 map[gocql.UUID]models.Task, arg4 time.Time) (map[gocql.UUID][]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksFilteredWithTime", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(map[gocql.UUID][]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksFilteredWithTime indicates an expected call of GetTasksFilteredWithTime
func (mr *MockTaskPersistenceMockRecorder) GetTasksFilteredWithTime(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksFilteredWithTime", reflect.TypeOf((*MockTaskPersistence)(nil).GetTasksFilteredWithTime), arg0, arg1, arg2, arg3, arg4)
}

// InsertOrUpdate mocks base method
func (m *MockTaskPersistence) InsertOrUpdate(arg0 context.Context, arg1 ...models.Task) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertOrUpdate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdate indicates an expected call of InsertOrUpdate
func (mr *MockTaskPersistenceMockRecorder) InsertOrUpdate(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdate", reflect.TypeOf((*MockTaskPersistence)(nil).InsertOrUpdate), varargs...)
}

// UpdateModifiedFieldsByMEs mocks base method
func (m *MockTaskPersistence) UpdateModifiedFieldsByMEs(arg0 context.Context, arg1 models.Task, arg2 ...gocql.UUID) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateModifiedFieldsByMEs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModifiedFieldsByMEs indicates an expected call of UpdateModifiedFieldsByMEs
func (mr *MockTaskPersistenceMockRecorder) UpdateModifiedFieldsByMEs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModifiedFieldsByMEs", reflect.TypeOf((*MockTaskPersistence)(nil).UpdateModifiedFieldsByMEs), varargs...)
}

// UpdateSchedulerFields mocks base method
func (m *MockTaskPersistence) UpdateSchedulerFields(arg0 context.Context, arg1 ...models.Task) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSchedulerFields", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchedulerFields indicates an expected call of UpdateSchedulerFields
func (mr *MockTaskPersistenceMockRecorder) UpdateSchedulerFields(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedulerFields", reflect.TypeOf((*MockTaskPersistence)(nil).UpdateSchedulerFields), varargs...)
}

// UpdateTask mocks base method
func (m *MockTaskPersistence) UpdateTask(arg0 context.Context, arg1 interface{}, arg2 string, arg3 gocql.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask
func (mr *MockTaskPersistenceMockRecorder) UpdateTask(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskPersistence)(nil).UpdateTask), arg0, arg1, arg2, arg3)
}
