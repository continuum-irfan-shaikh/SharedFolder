// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.connectwisedev.com/platform/platform-tasking-service/src/models (interfaces: TaskSummaryPersistence)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "gitlab.connectwisedev.com/platform/platform-tasking-service/src/models"
	persistency "gitlab.connectwisedev.com/platform/platform-tasking-service/src/persistency"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTaskSummaryPersistence is a mock of TaskSummaryPersistence interface
type MockTaskSummaryPersistence struct {
	ctrl     *gomock.Controller
	recorder *MockTaskSummaryPersistenceMockRecorder
}

// MockTaskSummaryPersistenceMockRecorder is the mock recorder for MockTaskSummaryPersistence
type MockTaskSummaryPersistenceMockRecorder struct {
	mock *MockTaskSummaryPersistence
}

// NewMockTaskSummaryPersistence creates a new mock instance
func NewMockTaskSummaryPersistence(ctrl *gomock.Controller) *MockTaskSummaryPersistence {
	mock := &MockTaskSummaryPersistence{ctrl: ctrl}
	mock.recorder = &MockTaskSummaryPersistenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskSummaryPersistence) EXPECT() *MockTaskSummaryPersistenceMockRecorder {
	return m.recorder
}

// GetStatusCountsByIDs mocks base method
func (m *MockTaskSummaryPersistence) GetStatusCountsByIDs(arg0 context.Context, arg1 persistency.Cache, arg2 map[gocql.UUID]models.TaskInstance, arg3 []gocql.UUID) (map[gocql.UUID]models.TaskInstanceStatusCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusCountsByIDs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[gocql.UUID]models.TaskInstanceStatusCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusCountsByIDs indicates an expected call of GetStatusCountsByIDs
func (mr *MockTaskSummaryPersistenceMockRecorder) GetStatusCountsByIDs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusCountsByIDs", reflect.TypeOf((*MockTaskSummaryPersistence)(nil).GetStatusCountsByIDs), arg0, arg1, arg2, arg3)
}

// GetTasksSummaryData mocks base method
func (m *MockTaskSummaryPersistence) GetTasksSummaryData(arg0 context.Context, arg1 bool, arg2 persistency.Cache, arg3 string, arg4 ...gocql.UUID) ([]models.TaskSummaryData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTasksSummaryData", varargs...)
	ret0, _ := ret[0].([]models.TaskSummaryData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksSummaryData indicates an expected call of GetTasksSummaryData
func (mr *MockTaskSummaryPersistenceMockRecorder) GetTasksSummaryData(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksSummaryData", reflect.TypeOf((*MockTaskSummaryPersistence)(nil).GetTasksSummaryData), varargs...)
}

// UpdateTaskInstanceStatusCount mocks base method
func (m *MockTaskSummaryPersistence) UpdateTaskInstanceStatusCount(arg0 context.Context, arg1 gocql.UUID, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskInstanceStatusCount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskInstanceStatusCount indicates an expected call of UpdateTaskInstanceStatusCount
func (mr *MockTaskSummaryPersistenceMockRecorder) UpdateTaskInstanceStatusCount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskInstanceStatusCount", reflect.TypeOf((*MockTaskSummaryPersistence)(nil).UpdateTaskInstanceStatusCount), arg0, arg1, arg2, arg3)
}
