// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.connectwisedev.com/platform/platform-tasking-service/src/services/tasks (interfaces: TargetsRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	models "gitlab.connectwisedev.com/platform/platform-tasking-service/src/models"
	reflect "reflect"
)

// MockTargetsRepo is a mock of TargetsRepo interface
type MockTargetsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTargetsRepoMockRecorder
}

// MockTargetsRepoMockRecorder is the mock recorder for MockTargetsRepo
type MockTargetsRepoMockRecorder struct {
	mock *MockTargetsRepo
}

// NewMockTargetsRepo creates a new mock instance
func NewMockTargetsRepo(ctrl *gomock.Controller) *MockTargetsRepo {
	mock := &MockTargetsRepo{ctrl: ctrl}
	mock.recorder = &MockTargetsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTargetsRepo) EXPECT() *MockTargetsRepoMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockTargetsRepo) Insert(arg0 string, arg1 gocql.UUID, arg2 models.Target) error {
	ret := m.ctrl.Call(m, "Insert", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockTargetsRepoMockRecorder) Insert(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTargetsRepo)(nil).Insert), arg0, arg1, arg2)
}
