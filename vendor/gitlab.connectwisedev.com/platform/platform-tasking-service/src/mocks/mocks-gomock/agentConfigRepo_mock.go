// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.connectwisedev.com/platform/platform-tasking-service/src/integration (interfaces: AgentConfig)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gocql "github.com/gocql/gocql"
	gomock "github.com/golang/mock/gomock"
	entities "gitlab.connectwisedev.com/platform/platform-tasking-service/src/entities"
	reflect "reflect"
)

// MockAgentConfig is a mock of AgentConfig interface
type MockAgentConfig struct {
	ctrl     *gomock.Controller
	recorder *MockAgentConfigMockRecorder
}

// MockAgentConfigMockRecorder is the mock recorder for MockAgentConfig
type MockAgentConfigMockRecorder struct {
	mock *MockAgentConfig
}

// NewMockAgentConfig creates a new mock instance
func NewMockAgentConfig(ctrl *gomock.Controller) *MockAgentConfig {
	mock := &MockAgentConfig{ctrl: ctrl}
	mock.recorder = &MockAgentConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgentConfig) EXPECT() *MockAgentConfigMockRecorder {
	return m.recorder
}

// Activate mocks base method
func (m *MockAgentConfig) Activate(arg0 context.Context, arg1 entities.Rule, arg2 map[string]entities.Endpoints, arg3 string) (gocql.UUID, error) {
	ret := m.ctrl.Call(m, "Activate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(gocql.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Activate indicates an expected call of Activate
func (mr *MockAgentConfigMockRecorder) Activate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockAgentConfig)(nil).Activate), arg0, arg1, arg2, arg3)
}

// Deactivate mocks base method
func (m *MockAgentConfig) Deactivate(arg0 context.Context, arg1 gocql.UUID, arg2 string) error {
	ret := m.ctrl.Call(m, "Deactivate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deactivate indicates an expected call of Deactivate
func (mr *MockAgentConfigMockRecorder) Deactivate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockAgentConfig)(nil).Deactivate), arg0, arg1, arg2)
}

// Update mocks base method
func (m *MockAgentConfig) Update(arg0 context.Context, arg1 entities.Rule, arg2 map[string]entities.Endpoints, arg3 string, arg4 gocql.UUID) error {
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockAgentConfigMockRecorder) Update(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAgentConfig)(nil).Update), arg0, arg1, arg2, arg3, arg4)
}
