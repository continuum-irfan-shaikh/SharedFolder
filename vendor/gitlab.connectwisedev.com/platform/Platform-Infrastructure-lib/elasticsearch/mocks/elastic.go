// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.connectwisedev.com/platform/Platform-Infrastructure-lib/elasticsearch (interfaces: Elastic)

// Package esMock is a generated GoMock package.
package esMock

import (
	context "context"
	elasticsearch "gitlab.connectwisedev.com/platform/Platform-Infrastructure-lib/elasticsearch"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockElastic is a mock of Elastic interface
type MockElastic struct {
	ctrl     *gomock.Controller
	recorder *MockElasticMockRecorder
}

// MockElasticMockRecorder is the mock recorder for MockElastic
type MockElasticMockRecorder struct {
	mock *MockElastic
}

// NewMockElastic creates a new mock instance
func NewMockElastic(ctrl *gomock.Controller) *MockElastic {
	mock := &MockElastic{ctrl: ctrl}
	mock.recorder = &MockElasticMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockElastic) EXPECT() *MockElasticMockRecorder {
	return m.recorder
}

// Aggregate mocks base method
func (m *MockElastic) Aggregate(arg0 context.Context, arg1 *elasticsearch.AggregationRequest) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate
func (mr *MockElasticMockRecorder) Aggregate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockElastic)(nil).Aggregate), arg0, arg1)
}

// Close mocks base method
func (m *MockElastic) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockElasticMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockElastic)(nil).Close))
}

// CountByQuery mocks base method
func (m *MockElastic) CountByQuery(arg0 context.Context, arg1 elasticsearch.ElasticQuery, arg2 ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountByQuery", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByQuery indicates an expected call of CountByQuery
func (mr *MockElasticMockRecorder) CountByQuery(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByQuery", reflect.TypeOf((*MockElastic)(nil).CountByQuery), varargs...)
}

// Delete mocks base method
func (m *MockElastic) Delete(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockElasticMockRecorder) Delete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockElastic)(nil).Delete), arg0, arg1, arg2, arg3)
}

// GetTemplate mocks base method
func (m *MockElastic) GetTemplate(arg0 context.Context, arg1, arg2 string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplate", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate
func (mr *MockElasticMockRecorder) GetTemplate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockElastic)(nil).GetTemplate), arg0, arg1, arg2)
}

// IsRunning mocks base method
func (m *MockElastic) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning
func (mr *MockElasticMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockElastic)(nil).IsRunning))
}

// MultiSearch mocks base method
func (m *MockElastic) MultiSearch(arg0 context.Context, arg1 []*elasticsearch.SearchRequest) ([][]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiSearch", arg0, arg1)
	ret0, _ := ret[0].([][]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiSearch indicates an expected call of MultiSearch
func (mr *MockElasticMockRecorder) MultiSearch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiSearch", reflect.TypeOf((*MockElastic)(nil).MultiSearch), arg0, arg1)
}

// Search mocks base method
func (m *MockElastic) Search(arg0 context.Context, arg1 *elasticsearch.SearchRequest) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockElasticMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockElastic)(nil).Search), arg0, arg1)
}

// StartBulkProcessor mocks base method
func (m *MockElastic) StartBulkProcessor(arg0 elasticsearch.BulkConfig) (elasticsearch.BulkProcessor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBulkProcessor", arg0)
	ret0, _ := ret[0].(elasticsearch.BulkProcessor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBulkProcessor indicates an expected call of StartBulkProcessor
func (mr *MockElasticMockRecorder) StartBulkProcessor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBulkProcessor", reflect.TypeOf((*MockElastic)(nil).StartBulkProcessor), arg0)
}
