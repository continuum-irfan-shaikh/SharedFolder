{"id":"6ce7a219-7d4e-11e9-bafe-00155d130b89","partnerId":"00000000-0000-0000-0000-000000000000","category":["HD Automation"],"description":"List Or Find ADirectory Users","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":300,"failureMessage":"Executed with errors","successMessage":"Executed Successfully","internal":false,"name":"ListOrFindADirectoryUsers","tags":["Windows 7","Windows 10"],"sequence":true,"content":"",
"jsonSchema":{
"type":"object",
"properties":{
	"HideBuiltInUser":{
      "type":"boolean",
      "title":"Select Hide BuiltIn User",
      "minLength":1
    },
	"UserName":{
      "type":"string",
      "title":"Enter User Name",
      "minLength":1
    },
	"OUname":{
      "type":"string",
      "title":"Enter OU name",
      "minLength":1
    }
 },
  "required":[
  ],
  "additionalProperties": false
},
"uiSchema":{
"HideBuiltInUser":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"UserName":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"OUname":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
  "ui:order":["HideBuiltInUser","UserName","OUname"]
},
"isHDScript":true}