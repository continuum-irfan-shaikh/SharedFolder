{"id":"dee4ffde-81d0-11e9-a8f1-00155d130b89","partnerId":"00000000-0000-0000-0000-000000000000","category":["HD Automation"],"description":"List all security groups","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":300,"failureMessage":"Executed with errors","successMessage":"Executed Successfully","internal":false,"name":"ListAllSecurityGroups","tags":["Windows 7","Windows 10"],"sequence":true,"content":"Q2xlYXItSG9zdA0KIA0KPCMNCg0KW3N0cmluZ10kRW52aXJvbWVudCA9ICJMb2NhbCIgIyAiRG9tYWluIiBMb2NhbA0KW3N0cmluZ10kU2VjdXJpdHlHcm91cCA9ICAiQWRtaW5pc3RyYXRvcnMiICAgICAgICMiQWRtaW5pc3RyYXRvcnMxMjMiDQogDQpbYm9vbF0kSGlkZUVtcHR5R3JvdXBzID0gJGZhbHNlDQpbYm9vbF0kSGlkZUJ1aWx0SW5Hcm91cHMgPSAkdHJ1ZQ0KDQojPg0KDQpmdW5jdGlvbiBFc2NhcGUtSlNPTlN0cmluZygkc3RyKXsNCiAgICBpZiAoJHN0ciAtZXEgJG51bGwpIHtyZXR1cm4gIiJ9DQogICAgICAgICAkc3RyID0gJHN0ci5Ub1N0cmluZygpLlJlcGxhY2UoJyInLCdcIicpLlJlcGxhY2UoJ1wnLCdcXCcpLlJlcGxhY2UoImBuIiwnXG4nKS5SZXBsYWNlKCJgciIsJ1xyJykuUmVwbGFjZSgiYHQiLCdcdCcpDQogICAgcmV0dXJuICRzdHI7DQp9DQoNCg0KZnVuY3Rpb24gQ29udmVydFRvLUpTT05QMigkbWF4RGVwdGggPSAxMCwkZm9yY2VBcnJheSA9ICRmYWxzZSkgew0KYmVnaW4gew0KJGRhdGEgPSBAKCkNCn0NCnByb2Nlc3N7DQokZGF0YSArPSAkXw0KfQ0KZW5kew0KaWYgKCRkYXRhLmxlbmd0aCAtZXEgMSAtYW5kICRmb3JjZUFycmF5IC1lcSAkZmFsc2UpIHsNCiR2YWx1ZSA9ICRkYXRhWzBdDQp9IGVsc2UgeyANCiR2YWx1ZSA9ICRkYXRhDQp9DQoNCg0KaWYgKCR2YWx1ZSAtZXEgJG51bGwpIHsNCnJldHVybiAibnVsbCINCn0NCg0KDQoNCg0KJGRhdGFUeXBlID0gJHZhbHVlLkdldFR5cGUoKS5OYW1lDQpzd2l0Y2ggLXJlZ2V4ICgkZGF0YVR5cGUpIHsNCiAgICAgICAgICAgICdTdHJpbmcnICB7DQpyZXR1cm4gICJgInswfWAiIiAtZiAoRXNjYXBlLUpTT05TdHJpbmcgJHZhbHVlICkNCn0NCiAgICAgICAgICAgICcoU3lzdGVtXC4pP0RhdGVUaW1lJyAge3JldHVybiAgImAiezA6eXl5eS1NTS1kZH1UezA6SEg6bW06c3N9YCIiIC1mICR2YWx1ZX0NCiAgICAgICAgICAgICdJbnQzMnxEb3VibGUnIHtyZXR1cm4gICIkdmFsdWUifQ0KJ0Jvb2xlYW4nIHtyZXR1cm4gICIkdmFsdWUiLlRvTG93ZXIoKX0NCiAgICAgICAgICAgICcoU3lzdGVtXC4pP09iamVjdFxbXF0nIHsgIyBhcnJheQ0KaWYgKCRtYXhEZXB0aCAtbGUgMCl7cmV0dXJuICJgIiR2YWx1ZWAiIn0NCiRqc29uUmVzdWx0ID0gJycNCmZvcmVhY2goJGVsZW0gaW4gJHZhbHVlKXsNCiNpZiAoJGVsZW0gLWVxICRudWxsKSB7Y29udGludWV9DQppZiAoJGpzb25SZXN1bHQuTGVuZ3RoIC1ndCAwKSB7JGpzb25SZXN1bHQgKz0nLCAnfSANCiRqc29uUmVzdWx0ICs9ICgkZWxlbSB8IENvbnZlcnRUby1KU09OUDIgLW1heERlcHRoICgkbWF4RGVwdGggLTEpKQ0KfQ0KcmV0dXJuICJbIiArICRqc29uUmVzdWx0ICsgIl0iDQogICAgICAgICAgICB9DQonKFN5c3RlbVwuKT9IYXNodGFibGUnIHsgIyBoYXNodGFibGUNCiRqc29uUmVzdWx0ID0gJycNCmZvcmVhY2goJGtleSBpbiAkdmFsdWUuS2V5cyl7DQppZiAoJGpzb25SZXN1bHQuTGVuZ3RoIC1ndCAwKSB7JGpzb25SZXN1bHQgKz0nLCAnfQ0KJGpzb25SZXN1bHQgKz0gDQpAIg0KInswfSI6IHsxfQ0KIkAgLWYgJGtleSAsICgkdmFsdWVbJGtleV0gfCBDb252ZXJ0VG8tSlNPTlAyIC1tYXhEZXB0aCAoJG1heERlcHRoIC0xKSApDQp9DQpyZXR1cm4gInsiICsgJGpzb25SZXN1bHQgKyAifSINCn0NCiAgICAgICAgICAgIGRlZmF1bHQgeyAjb2JqZWN0DQppZiAoJG1heERlcHRoIC1sZSAwKXtyZXR1cm4gICJgInswfWAiIiAtZiAoRXNjYXBlLUpTT05TdHJpbmcgJHZhbHVlKX0NCnJldHVybiAieyIgKw0KKCgkdmFsdWUgfCBHZXQtTWVtYmVyIC1NZW1iZXJUeXBlICpwcm9wZXJ0eSB8ICUgeyANCkAiDQoiezB9IjogezF9DQoiQCAtZiAkXy5OYW1lICwgKCR2YWx1ZS4oJF8uTmFtZSkgfCBDb252ZXJ0VG8tSlNPTlAyIC1tYXhEZXB0aCAoJG1heERlcHRoIC0xKSApIA0KfSkgLWpvaW4gJywgJykgKyAifSINCiAgICB9DQp9DQp9DQp9DQogDQogDQpmdW5jdGlvbiBUZXN0LURvbWFpbk5ldHdvcmtDb25uZWN0aW9uDQp7DQogICAgJHN0ck9TVmVyc2lvbiA9IChHZXQtV21pT2JqZWN0IC1RdWVyeSAiU2VsZWN0IFZlcnNpb24gZnJvbSBXaW4zMl9PcGVyYXRpbmdTeXN0ZW0iKS5WZXJzaW9uDQogICAgJGFyclN0ck9TVmVyc2lvbiA9ICRzdHJPU1ZlcnNpb24uU3BsaXQoIi4iKQ0KICAgICRpbnRPU01ham9yVmVyc2lvbiA9IFtVSW50MTZdJGFyclN0ck9TVmVyc2lvblswXQ0KICAgIGlmICgkYXJyU3RyT1NWZXJzaW9uLkxlbmd0aCAtZ2UgMikNCiAgICB7DQogICAgICAgICRpbnRPU01pbm9yVmVyc2lvbiA9IFtVSW50MTZdJGFyclN0ck9TVmVyc2lvblsxXQ0KICAgIH0gYA0KICAgIGVsc2UNCiAgICB7DQogICAgICAgICRpbnRPU01pbm9yVmVyc2lvbiA9IFtVSW50MTZdMA0KICAgIH0NCiAgICAgICAgDQogICAgaWYgKCgkaW50T1NNYWpvclZlcnNpb24gLWd0IDYpIC1vciAoKCRpbnRPU01ham9yVmVyc2lvbiAtZXEgNikgLWFuZCAoJGludE9TTWlub3JWZXJzaW9uIC1ndCAxKSkpDQogICAgeyAgICAgICAgDQogICAgICAgICRkb21haW5OZXR3b3JrcyA9IEdldC1OZXRDb25uZWN0aW9uUHJvZmlsZSB8IFdoZXJlLU9iamVjdCB7JF8uTmV0d29ya0NhdGVnb3J5IC1lcSAiRG9tYWluIn0NCiAgICB9IGANCiAgICBlbHNlDQogICAgew0KICAgICAgICAkZG9tYWluTmV0d29ya3MgPSAoW0FjdGl2YXRvcl06OkNyZWF0ZUluc3RhbmNlKFtUeXBlXTo6R2V0VHlwZUZyb21DTFNJRChbR3VpZF0ie0RDQjAwQzAxLTU3MEYtNEE5Qi04RDY5LTE5OUZEQkE1NzIzQn0iKSkpLkdldE5ldHdvcmtDb25uZWN0aW9ucygpIHwgYA0KICAgICAgICAgICAgRm9yRWFjaC1PYmplY3QgeyRfLkdldE5ldHdvcmsoKS5HZXRDYXRlZ29yeSgpfSB8IFdoZXJlLU9iamVjdCB7JF8gLWVxIDJ9DQogICAgfQ0KICAgIHJldHVybiAoJGRvbWFpbk5ldHdvcmtzIC1uZSAkbnVsbCkNCiAgICANCn0NCiANCkZ1bmN0aW9uIEdldC1Mb2NhbE9SRG9tYWluR3JvdXAgIHsNCiANCiAgW0NtZGxldGJpbmRpbmcoKV0NCiAgUGFyYW0oDQogIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JFRydWUpXQ0KICBbU3RyaW5nW11dJENvbXB1dGVybmFtZSA9ICAkRW52OkNPTVBVVEVSTkFNRSwNCiAgW3BhcmFtZXRlcigpXQ0KICBbc3RyaW5nW11dJEdyb3VwDQogICkNCiANCiAgQmVnaW4gew0KIA0KICAgICAgRnVuY3Rpb24gIENvbnZlcnRUby1TSUQgew0KIA0KICAgICAgICAgIFBhcmFtKFtieXRlW11dJEJpbmFyeVNJRCkNCiAgICAgICAgIChOZXctT2JqZWN0ICBTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllcigkQmluYXJ5U0lELDApKS5WYWx1ZQ0KICAgICAgICAgDQogICAgIH0NCiANCiAgICAgIEZ1bmN0aW9uICBHZXRUeXBlIHsNCiANCiAgICAgICAgICBQYXJhbShbYnl0ZVtdXSRUeXBlKQ0KICAgICAgICAgKE5ldy1PYmplY3QgIFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyKCRUeXBlLDApKS5WYWx1ZQ0KICAgICAgICAgDQogICAgIH0NCiAgICAgDQogICAgIEZ1bmN0aW9uICBHZXQtTG9jYWxHcm91cE1lbWJlciB7DQogDQogICAgICAgICAgUGFyYW0gICgkR3JvdXApDQogICAgICAgICAgJGdyb3VwLkludm9rZSgnbWVtYmVycycpICB8IEZvckVhY2ggew0KICAgICAgICAgICRfLkdldFR5cGUoKS5JbnZva2VNZW1iZXIoIk5hbWUiLCAgJ0dldFByb3BlcnR5JywgICRudWxsLCAgJF8sICRudWxsKX0NCiAgICAgfQ0KIA0KICB9DQogIFByb2Nlc3MgIHsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAkTG9jYWxHcm91cHMgPSBAKCkNCiAgICAgICAgICAgJGFkc2kgPSAiIg0KIA0KICAgICAgICAgIFRyeSAgew0KICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgaWYoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJEVudmlyb21lbnQpKXsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJQbGVhc2UgcHJvdmlkZSBzY29wZSBhcyAnTG9jYWwnIG9yICdEb21haW4nICINCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgfQ0KIA0KICAgICAgICAgICAgICBpZigkRW52aXJvbWVudCAtZXEgIkxvY2FsIil7JGFkc2kgID0gW0FEU0ldIldpbk5UOi8vJENvbXB1dGVybmFtZSJ9DQogDQogICAgICAgICAgICAgIGlmKCRFbnZpcm9tZW50IC1lcSAiRG9tYWluIil7JGFkc2kgID0gW0FEU0ldIldpbk5UOi8vJGVudjpVU0VSRE9NQUlOIn0NCiANCiAgICAgICAgICAgICAgaWYoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJGFkc2kpKXtyZXR1cm59DQogICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgIElmKCRQU0JvdW5kUGFyYW1ldGVycy5Db250YWluc0tleSgnR3JvdXAnKSkgew0KICAgICAgICAgICAgICAgICAgICAgIHRyeXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwcyAgPSBGb3JFYWNoICAoJGl0ZW0gaW4gICRncm91cCkgeyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgJGFkc2kuQ2hpbGRyZW4uRmluZCgkSXRlbSwgJ0dyb3VwJyl9DQogICAgICAgICAgICAgICAgICAgICAgfWNhdGNoeyB9DQogDQogICAgICAgICAgICAgICAgICB9RWxzZXskZ3JvdXBzICA9ICRhZHNpLkNoaWxkcmVuIHwgd2hlcmUgeyRfLlNjaGVtYUNsYXNzTmFtZSAtZXEgICdncm91cCd9fQ0KIA0KICAgICAgICAgICAgICAgICAgSWYgICgkZ3JvdXBzKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgJGdyb3VwcyAgfCBGb3JFYWNoIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtwc2N1c3RvbW9iamVjdF1Aew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lID0gJF8uTmFtZVswXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZW1iZXJzID0gKChHZXQtTG9jYWxHcm91cE1lbWJlciAgLUdyb3VwICRfKSkgIC1qb2luICcsICcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNJRCA9IChDb252ZXJ0VG8tU0lEIC1CaW5hcnlTSUQgJF8uT2JqZWN0U0lEWzBdKSAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICB9ICANCiAgICAgICAgICAgICAgICAgICAgICB9DQogDQogICAgICAgICAgICAgICAgICB9RWxzZXt9I0Vsc2V7VGhyb3cgICJObyBncm91cHMgZm91bmQhIn0NCiAgICAgICAgICAgICANCiAgICAgICAgICB9Q2F0Y2h7IFdyaXRlLVdhcm5pbmcgICIkKCRDb21wdXRlcik6ICRfIn0gDQogDQogICB9DQogDQogIH0NCiANCiAgRnVuY3Rpb24gR2V0X0FsbFNlY3VyaXR5R3JvdXBzew0KDQogICAkU2VjR3JwT2JqZWN0ID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgcHNvYmplY3QNCiAgICRTZWNHcnBPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBUYXNrTmFtZSAtVmFsdWUgIkxpc3QgYWxsIHNlY3VyaXR5IGdyb3VwcyINCiAgICAgICAgICAgIA0KICAgJGhvc3RWZXJTaW9uTWFqb3IgPSAoJFBTVmVyc2lvblRhYmxlLlBTVmVyc2lvbi5NYWpvcikuVG9TdHJpbmcoKQ0KICAgJGhvc3RWZXJTaW9uTWlub3IgPSAoJFBTVmVyc2lvblRhYmxlLlBTVmVyc2lvbi5NaW5vcikuVG9TdHJpbmcoKQ0KICAgJGhvc3RWZXJzaW9uID0gJGhvc3RWZXJTaW9uTWFqb3IgKycuJysgJGhvc3RWZXJTaW9uTWlub3IgDQogDQogICAkb3NWZXJzaW9uTWFqb3IgPSAoW1N5c3RlbS5FbnZpcm9ubWVudF06Ok9TVmVyc2lvbi5WZXJzaW9uLm1ham9yKS5Ub1N0cmluZygpDQogICAkb3NWZXJzaW9uTWlub3IgPSAoW1N5c3RlbS5FbnZpcm9ubWVudF06Ok9TVmVyc2lvbi5WZXJzaW9uLm1pbm9yKS5Ub1N0cmluZygpDQogICAkb3NWZXJzaW9uID0gJG9zVmVyc2lvbk1ham9yICsnLicrICRvc1ZlcnNpb25NaW5vcg0KIA0KICAgW2Jvb2xlYW5dJGlzUHNWZXJzaW9uT2sgPSAoW3ZlcnNpb25dJGhvc3RWZXJzaW9uIC1nZSBbdmVyc2lvbl0nMi4wJykNCiAgIFtib29sZWFuXSRpc09TVmVyc2lvbk9rID0gKFt2ZXJzaW9uXSRvc1ZlcnNpb24gLWdlIFt2ZXJzaW9uXSc2LjAnKQ0KICAgDQogICAjLS0tLS0tLS0tLSBDaGVjayBmb3IgUG93ZXJzaGVsbCB2ZXJzaW9uIC0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgaWYoLW5vdCAkaXNQc1ZlcnNpb25Payl7DQogICAgICANCiAgICAgICRTdGRFcnJBcnIgPSBAKCkNCiAgICAgICRzdGRPdXRBcnIgPSBAKCkNCiAgICAgICRTdGRFcnIgPSBOZXctT2JqZWN0IFBTT2JqZWN0IC1Qcm9wZXJ0eSBAewkJICAgICAgIA0KCQkgICAgICAgICAgICAgICAgICBpZCA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID0gICJQb3dlclNoZWxsIHZlcnNpb24gYmVsb3cgMi4wIGlzIG5vdCBzdXBwb3J0ZWQiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWwgPSAiUG93ZXJTaGVsbCB2ZXJzaW9uIGJlbG93IDIuMCBpcyBub3Qgc3VwcG9ydGVkIjsNCg0KICAgICAgICAgICAgICAgfQ0KICAgICAgICAgDQogICAgICRTdGRFcnJBcnIgKz0gJFN0ZEVycg0KICAgICAkc3RkT3V0QXJyICs9ICgiUG93ZXJTaGVsbCB2ZXJzaW9uIGJlbG93IDIuMCBpcyBub3Qgc3VwcG9ydGVkIikNCiAgICANCiAgICAgJFNlY0dycE9iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIFN0YXR1cyAtVmFsdWUgImZhaWwiIA0KICAgICAkU2VjR3JwT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgQ29kZSAtVmFsdWUgMQ0KICAgICAkU2VjR3JwT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgc3RkZXJyIC1WYWx1ZSAkU3RkRXJyQXJyDQogICAgICRTZWNHcnBPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBSZXN1bHQgLVZhbHVlICJQb3dlclNoZWxsIHZlcnNpb24gYmVsb3cgMi4wIGlzIG5vdCBzdXBwb3J0ZWQiDQogICAgICRTZWNHcnBPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBzdGRvdXQgLVZhbHVlICAkc3RkT3V0QXJyICAgDQoNCiAgICAgcmV0dXJuICRTZWNHcnBPYmplY3QNCiANCiAgICB9DQogDQogICAjLS0tLS0tLS0tLSBDaGVjayBPUyBWZXJzaW9uIC0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgaWYoLW5vdCAkaXNPU1ZlcnNpb25Payl7DQogICANCiAgICAgICRTdGRFcnJBcnIgPSBAKCkNCiAgICAgICRzdGRPdXRBcnIgPSBAKCkNCiAgICAgICRTdGRFcnIgPSBOZXctT2JqZWN0IFBTT2JqZWN0IC1Qcm9wZXJ0eSBAewkJICAgICAgIA0KCQkgICAgICAgICAgICAgICAgICBpZCA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID0gICJQb3dlclNoZWxsIFNjcmlwdCBzdXBwb3J0cyBXaW5kb3cgNywgV2luZG93IDIwMDhSMiBhbmQgaGlnaGVyIHZlcnNpb24gb3BlcmF0aW5nIHN5c3RlbSI7DQogICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbCA9ICJQb3dlclNoZWxsIFNjcmlwdCBzdXBwb3J0cyBXaW5kb3cgNywgV2luZG93IDIwMDhSMiBhbmQgaGlnaGVyIHZlcnNpb24gb3BlcmF0aW5nIHN5c3RlbSI7DQoNCiAgICAgICAgICAgICAgIH0NCiAgICAgICAgIA0KICAgICAkU3RkRXJyQXJyICs9ICRTdGRFcnINCiAgICAgJHN0ZE91dEFyciArPSAoIlBvd2VyU2hlbGwgU2NyaXB0IHN1cHBvcnRzIFdpbmRvdyA3LCBXaW5kb3cgMjAwOFIyIGFuZCBoaWdoZXIgdmVyc2lvbiBvcGVyYXRpbmcgc3lzdGVtIikNCiAgICANCiAgICAgJFNlY0dycE9iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIFN0YXR1cyAtVmFsdWUgImZhaWwiIA0KICAgICAkU2VjR3JwT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgQ29kZSAtVmFsdWUgMQ0KICAgICAkU2VjR3JwT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgc3RkZXJyIC1WYWx1ZSAkU3RkRXJyQXJyDQogICAgICRTZWNHcnBPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBSZXN1bHQgLVZhbHVlICJQb3dlclNoZWxsIFNjcmlwdCBzdXBwb3J0cyBXaW5kb3cgNywgV2luZG93IDIwMDhSMiBhbmQgaGlnaGVyIHZlcnNpb24gb3BlcmF0aW5nIHN5c3RlbSINCiAgICAgJFNlY0dycE9iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIHN0ZG91dCAtVmFsdWUgICRzdGRPdXRBcnIgICANCg0KICAgICByZXR1cm4gJFNlY0dycE9iamVjdA0KICAgIH0NCiANCiAgICMtLS0tLS0tIENoZWNrIHdoZXRoZXIgc3lzdGVtIGlzIHBhcnQgb2YgZG9hbWluIG9yIG5vdC0tLS0tLS0tLS0tLS0tLS0tDQogICAjIFRlc3QtRG9tYWluTmV0d29ya0Nvbm5lY3Rpb24NCiANCiAgIGlmKCRFbnZpcm9tZW50IC1lcSAiRG9tYWluIil7DQogICAgIGlmKC1ub3QoVGVzdC1Eb21haW5OZXR3b3JrQ29ubmVjdGlvbikpew0KICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAkU3RkRXJyQXJyID0gQCgpDQogICAgICAgICAgICAgICRzdGRPdXRBcnIgPSBAKCkNCiAgICAgICAgICAgICAgJFN0ZEVyciA9IE5ldy1PYmplY3QgUFNPYmplY3QgLVByb3BlcnR5IEB7CQkgICAgICAgDQoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSAwOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID0gICJEb21haW4gc2NvcGUgc2VsZWN0ZWQgb24gYSBtYWNoaW5lIG5vdCBqb2luZWQgdG8gYSBkb21haW4uIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWwgPSAiRG9tYWluIHNjb3BlIHNlbGVjdGVkIG9uIGEgbWFjaGluZSBub3Qgam9pbmVkIHRvIGEgZG9tYWluLiI7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgDQogICAgICAgICAgICAgJFN0ZEVyckFyciArPSAkU3RkRXJyDQogICAgICAgICAgICAgJHN0ZE91dEFyciArPSAoIkRvbWFpbiBzY29wZSBzZWxlY3RlZCBvbiBhIG1hY2hpbmUgbm90IGpvaW5lZCB0byBhIGRvbWFpbi4iKQ0KICAgIA0KICAgICAgICAgICAgICRTZWNHcnBPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBTdGF0dXMgLVZhbHVlICJmYWlsIiANCiAgICAgICAgICAgICAkU2VjR3JwT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgQ29kZSAtVmFsdWUgMQ0KICAgICAgICAgICAgICRTZWNHcnBPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBzdGRlcnIgLVZhbHVlICRTdGRFcnJBcnINCiAgICAgICAgICAgICAkU2VjR3JwT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgUmVzdWx0IC1WYWx1ZSAiRG9tYWluIHNjb3BlIHNlbGVjdGVkIG9uIGEgbWFjaGluZSBub3Qgam9pbmVkIHRvIGEgZG9tYWluLiINCiAgICAgICAgICAgICAkU2VjR3JwT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgc3Rkb3V0IC1WYWx1ZSAgJHN0ZE91dEFyciAgIA0KDQogICAgICAgICAgICAgcmV0dXJuICRTZWNHcnBPYmplY3QNCiAgICAgIH0NCiAgIH0NCiANCiAgIGlmKCRFbnZpcm9tZW50IC1lcSAiRG9tYWluIil7DQogICAgICAgJFBhcnRPZkRvbWFpbiA9IChHZXQtV21pT2JqZWN0IC1DbGFzcyBXaW4zMl9Db21wdXRlclN5c3RlbSkuUGFydE9mRG9tYWluDQogICAgICAgaWYoLW5vdCAkUGFydE9mRG9tYWluKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICRTdGRFcnJBcnIgPSBAKCkNCiAgICAgICAgICAgICAgJHN0ZE91dEFyciA9IEAoKQ0KICAgICAgICAgICAgICAkU3RkRXJyID0gTmV3LU9iamVjdCBQU09iamVjdCAtUHJvcGVydHkgQHsJCSAgICAgICANCgkJICAgICAgICAgICAgICAgICAgICAgICAgICBpZCA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSAgIkRvbWFpbiBzY29wZSBzZWxlY3RlZCBvbiBhIG1hY2hpbmUgbm90IGpvaW5lZCB0byBhIGRvbWFpbi4iOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbCA9ICJEb21haW4gc2NvcGUgc2VsZWN0ZWQgb24gYSBtYWNoaW5lIG5vdCBqb2luZWQgdG8gYSBkb21haW4uIjsNCg0KICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICANCiAgICAgICAgICAgICAkU3RkRXJyQXJyICs9ICRTdGRFcnINCiAgICAgICAgICAgICAkc3RkT3V0QXJyICs9ICgiRG9tYWluIHNjb3BlIHNlbGVjdGVkIG9uIGEgbWFjaGluZSBub3Qgam9pbmVkIHRvIGEgZG9tYWluLiIpDQogICAgDQogICAgICAgICAgICAgJFNlY0dycE9iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIFN0YXR1cyAtVmFsdWUgImZhaWwiIA0KICAgICAgICAgICAgICRTZWNHcnBPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBDb2RlIC1WYWx1ZSAxDQogICAgICAgICAgICAgJFNlY0dycE9iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIHN0ZGVyciAtVmFsdWUgJFN0ZEVyckFycg0KICAgICAgICAgICAgICRTZWNHcnBPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBSZXN1bHQgLVZhbHVlICJEb21haW4gc2NvcGUgc2VsZWN0ZWQgb24gYSBtYWNoaW5lIG5vdCBqb2luZWQgdG8gYSBkb21haW4uIg0KICAgICAgICAgICAgICRTZWNHcnBPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBzdGRvdXQgLVZhbHVlICAkc3RkT3V0QXJyICAgDQoNCiAgICAgICAgICAgICByZXR1cm4gJFNlY0dycE9iamVjdA0KICAgICAgICAgfQ0KICAgfQ0KICAgDQogICBpZigkRW52aXJvbWVudCAtZXEgIkxvY2FsIil7DQogICAgICAkb3NJbmZvID0gR2V0LVdtaU9iamVjdCAtQ2xhc3MgV2luMzJfT3BlcmF0aW5nU3lzdGVtICAgICANCiAgICAgIGlmKCAkb3NJbmZvLlByb2R1Y3RUeXBlIC1lcSAyKXsNCg0KICAgICAgICBXcml0ZS1XYXJuaW5nICJMb2NhbCBzY29wZSBzZWxlY3RlZCBvbiBhIERvbWFpbiBDb250cm9sbGVyIjsNCiAgICAgICAgcmV0dXJuDQoNCiAgICAgICAgICAgICAgJFN0ZEVyckFyciA9IEAoKQ0KICAgICAgICAgICAgICAkc3RkT3V0QXJyID0gQCgpDQogICAgICAgICAgICAgICRTdGRFcnIgPSBOZXctT2JqZWN0IFBTT2JqZWN0IC1Qcm9wZXJ0eSBAewkJICAgICAgIA0KCQkgICAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gMDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA9ICAiTG9jYWwgc2NvcGUgc2VsZWN0ZWQgb24gYSBEb21haW4gQ29udHJvbGxlciI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsID0gIkxvY2FsIHNjb3BlIHNlbGVjdGVkIG9uIGEgRG9tYWluIENvbnRyb2xsZXIiOw0KDQogICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgIA0KICAgICAgICAgICAgICRTdGRFcnJBcnIgKz0gJFN0ZEVycg0KICAgICAgICAgICAgICRzdGRPdXRBcnIgKz0gKCJMb2NhbCBzY29wZSBzZWxlY3RlZCBvbiBhIERvbWFpbiBDb250cm9sbGVyIikNCiAgICANCiAgICAgICAgICAgICAkU2VjR3JwT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgU3RhdHVzIC1WYWx1ZSAiZmFpbCIgDQogICAgICAgICAgICAgJFNlY0dycE9iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIENvZGUgLVZhbHVlIDENCiAgICAgICAgICAgICAkU2VjR3JwT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgc3RkZXJyIC1WYWx1ZSAkU3RkRXJyQXJyDQogICAgICAgICAgICAgJFNlY0dycE9iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIFJlc3VsdCAtVmFsdWUgIkxvY2FsIHNjb3BlIHNlbGVjdGVkIG9uIGEgRG9tYWluIENvbnRyb2xsZXIiOw0KICAgICAgICAgICAgICRTZWNHcnBPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBzdGRvdXQgLVZhbHVlICAkc3RkT3V0QXJyICAgDQoNCiAgICAgICAgICAgICByZXR1cm4gJFNlY0dycE9iamVjdA0KDQogICAgICB9DQogICAgIA0KICAgfQ0KIA0KICAgIFtzdHJpbmdbXV0kU2VjdXJpdHlHcm91cHNBcnIgPSBAKCkNCiAgICBpZigtbm90KFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRTZWN1cml0eUdyb3VwKSkpeyAkU2VjdXJpdHlHcm91cHNBcnIgPSAkU2VjdXJpdHlHcm91cC5TcGxpdCgnLCcpIH0NCiANCiAgICAkTG9jYWxEb21haW5Hcm91cHMgPSBAKCkNCiAgICAkTG9jYWxEb21haW5Hcm91cHMgPSBHZXQtTG9jYWxPUkRvbWFpbkdyb3VwIC1Db21wdXRlcm5hbWUgICRlbnY6Q09NUFVURVJOQU1FDQogDQogICAgIyBpZigkRW52aXJvbWVudCAtZXEgIkxvY2FsIil7IFdyaXRlLUhvc3QgICJQdWxsaW5nIGdyb3VwcyBmcm9tIHN5c3RlbTogJCgkZW52OkNPTVBVVEVSTkFNRSkifQ0KICAgICMgaWYoJEVudmlyb21lbnQgLWVxICJEb21haW4iKXtXcml0ZS1Ib3N0ICAiUHVsbGluZyBncm91cHMgZnJvbSBzeXN0ZW06ICQoJGVudjpVU0VSRE9NQUlOKSJ9DQogDQogICAgICAgICAgIA0KICAgICAgICAgIA0KICAgaWYoJFNlY3VyaXR5R3JvdXBzQXJyLkNvdW50IC1ndCAwKXsgIA0KICAgICAgICAgICANCiAgICAgICAgJENvZGUgPSAwDQogICAgICAgICRTdGF0dXMgPSAiU3VjY2VzcyIgICAgDQogICAgICAgICRSZXN1bHRNc2cgPSAiU3VjY2VzcyA6IFB1bGxpbmcgZ3JvdXBzOiAkKCRTZWN1cml0eUdyb3Vwc0FyciAtam9pbiAnLCcpIg0KICAgICAgIA0KICAgICAgICAkU0lEQXJyID0gQCgpDQogICAgICAgICRTSUQgPSAiIg0KICAgICAgICAkTGFzdEluZGV4VmFsdWUgPSAiIg0KICAgICAgICAkTGFzdEluZGV4VmFsdWVBcnIgPSBAKCkNCiAgICAgICAgJFVzZXMgPSAiSW4gVXNlIg0KICAgICAgICAkVHlwZSA9ICJDdXN0b20iDQogICAgICAgICRHcm91cHNFeGlzdCA9IEAoKQ0KICAgICAgICAkR3JvdXBzRG9lc05vdEV4aXN0ID0gQCgpDQogICAgICAgICRHcm91cE5hbWVzID0gQCgpDQogICAgICAgIA0KICAgICAgICAkU3RkQXJyID0gQCgpDQogICAgICAgICRTdGRBcnJTdHIgPSBAKCkNCiAgICAgICAgJFN0ZEVyckFyciA9IEAoKQ0KDQogICAgICAgIGZvcmVhY2goJGduIGluICRTZWN1cml0eUdyb3Vwc0Fycil7ICANCiAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICR4ID0gJExvY2FsRG9tYWluR3JvdXBzIHwgV2hlcmUtT2JqZWN0IHskXy5OYW1lIC1lcSAkZ259DQogDQogICAgICAgICAgIGlmKCR4KXskR3JvdXBzRXhpc3QgKz0gJGdufQ0KICAgICAgICAgICBlbHNleyRHcm91cHNEb2VzTm90RXhpc3QgKz0gJGdufSAgICAgICAgICAgDQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIGlmKCRHcm91cHNFeGlzdC5Db3VudCAtZ3QgMCl7DQogDQogICAgICAgICAjIFdyaXRlLUhvc3QgIlB1bGxpbmcgZ3JvdXAocyk6ICQoJEdyb3Vwc0V4aXN0IC1qb2luICcsJykiIA0KICAgICAgICAgIyBXcml0ZS1Ib3N0ICItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KICAgICAgICAgICRMb2NhbEdyb3VwcyA9IEdldC1Mb2NhbE9SRG9tYWluR3JvdXAgLUNvbXB1dGVybmFtZSAgJGVudjpDT01QVVRFUk5BTUUgLUdyb3VwICRHcm91cHNFeGlzdA0KIA0KICAgICAgICAgIGlmKCRMb2NhbEdyb3Vwcyl7DQogICAgICAgICAgICAgICRMb2NhbEdyb3VwcyB8IEZvckVhY2ggew0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgIGlmKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRfLk1lbWJlcnMpKXskVXNlcyA9ICJFbXB0eSJ9DQogICAgICAgICAgICAgICAgICAgICAkU0lEID0gJF8uU0lEDQogDQogICAgICAgICAgICAgICAgICAgICAkU0lEQXJyID0gJFNJRC5TcGxpdCgnLScpDQogICAgICAgICAgICAgICAgICAgICAkTGFzdEluZGV4VmFsdWUgPSAkU0lEQXJyWyRTSURBcnIubGVuZ3RoIC0xXQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAkTGFzdEluZGV4VmFsdWVBcnIgPSAkTGFzdEluZGV4VmFsdWUuVG9DaGFyQXJyYXkoKSAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICBpZigoJExhc3RJbmRleFZhbHVlQXJyLmxlbmd0aCAtZXEgIjMiKSAtYW5kICgkTGFzdEluZGV4VmFsdWVBcnJbMF0gLWVxICI1IikpeyRUeXBlID0gIkJ1aWx0IEluIn0gDQogICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICMgTmV3LU9iamVjdCBwc29iamVjdCAtUHJvcGVydHkgQHtOYW1lID0gJF8uTmFtZTtTdGF0dXMgPSAkVXNlcztUeXBlID0gJFR5cGV9IHwgc2VsZWN0IE5hbWUsU3RhdHVzLFR5cGUNCg0KICAgICAgICAgICAgICAgICAgICAgJE9iamVjdCA9IE5ldy1PYmplY3QgcHNvYmplY3QgLVByb3BlcnR5IEB7TmFtZSA9ICRfLk5hbWU7U3RhdHVzID0gJFVzZXM7VHlwZSA9ICRUeXBlfQ0KICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICROYW1lID0gJF8uTmFtZTsNCiAgICAgICAgICAgICAgICAgICAgICRTdGF0dXMgPSAkVXNlczsNCiAgICAgICAgICAgICAgICAgICAgICRUeXBlID0gJFR5cGUNCg0KICAgICAgICAgICAgICAgICAgICAgJFN0ZEFyciArPSAkT2JqZWN0DQogICAgICAgICAgICAgICAgICAgICAkU3RkQXJyU3RyICs9ICJOYW1lIDogJE5hbWUsIFN0YXR1cyA6ICRTdGF0dXMsIFR5cGUgOiAkVHlwZSINCiAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICB9ZWxzZSB7DQogICAgIA0KICAgICAgICAgICAjIFdyaXRlLVdhcm5pbmcgIk5vIEdyb3VwIGZvdW5kIg0KICAgICAgICAgICAjIFdyaXRlLUhvc3QgIiINCiAgICAgDQogICAgICAgICB9DQogICAgICAgIH0NCiANCiAgICAgICAgaWYoJEdyb3Vwc0RvZXNOb3RFeGlzdC5Db3VudCAtZ3QgMCl7DQogICAgICAgICAgIA0KICAgICAgICAgICMgV3JpdGUtSG9zdCAiIg0KICAgICAgICAgICMgV3JpdGUtV2FybmluZyAiTm8gZ3JvdXAocykgZm91bmQgY29udGFpbmluZyA6ICQoJEdyb3Vwc0RvZXNOb3RFeGlzdCAtam9pbiAnLCcpIiAgDQoNCiAgICAgICAgICAgIyAkU3VjY2Vzc01zZyA9ICJQdWxsaW5nIGdyb3VwczogJCgkU2VjdXJpdHlHcm91cHNBcnIgLWpvaW4gJywnKSINCg0KICAgICAgICAgICAkRXJyb3JUaXRsZSA9ICJObyBncm91cChzKSBmb3VuZCBjb250YWluaW5nIDogJCgkR3JvdXBzRG9lc05vdEV4aXN0IC1qb2luICcsJykiIA0KICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAkRkwxID0gIiINCiAgICAgICAgICAgJEZMID0gIiINCiAgICAgICAgICAgZm9yZWFjaCgkc2cgaW4gJEdyb3Vwc0RvZXNOb3RFeGlzdCl7DQoNCiAgICAgICAgICAgICRTZWN1cml0eUdyb3Vwc0NoYXJBcnIgPSAkc2cuVG9DaGFyQXJyYXkoKQ0KICAgICAgICAgICAgJEZMMSArPSAgJFNlY3VyaXR5R3JvdXBzQ2hhckFyclswXSsnLCcgDQogICAgICAgICAgICANCiAgICAgICAgICAgIH0NCiANCiAgICAgICAgICAkTEkgPSAkRkwxLkxhc3RJbmRleE9mKCcsJykNCiAgICAgICAgICAkRkwxID0gJEZMMS5TdWJTdHJpbmcoMCwkTEkpDQoNCiAgICAgICAgICRFcnJvckRldGFpbCA9ICJMaXN0IG9mIGFsbCBncm91cCBzdGFydGluZyB3aXRoICQoJEZMMSkgIg0KICAgICAgICAgICMgIFdyaXRlLUhvc3QgIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIg0KDQogICAgICAgICAkU3RkRXJyID0gTmV3LU9iamVjdCBQU09iamVjdCAtUHJvcGVydHkgQHsJCSAgICAgICANCgkJICAgICAgICAgICAgICAgICAgaWQgPSAwOw0KICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA9ICRFcnJvclRpdGxlOw0KICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWwgPSAkRXJyb3JEZXRhaWw7DQoNCiAgICAgICAgICAgICAgIH0NCg0KDQogICAgICAgICAgJFN0ZEVyckFyciArPSAkU3RkRXJyDQogICAgICAgICAgDQogICAgICAgICAgZm9yZWFjaCgkc2cgaW4gJEdyb3Vwc0RvZXNOb3RFeGlzdCl7DQogICAgICAgICAgICAgDQogICAgICAgICAgICAgJFNlY3VyaXR5R3JvdXBzQ2hhckFyciA9ICRzZy5Ub0NoYXJBcnJheSgpDQogICAgICAgICAgICAgJEZMID0gICRTZWN1cml0eUdyb3Vwc0NoYXJBcnJbMF0rJyonICAgICAgICAgICAgIA0KICAgICAgICAgICAgICRGTCA9ICRGTC5UcmltKCkgICAgICAgICANCiAgICAgICAgICAgDQogICAgICAgICAgICAgJExvY2FsR3JvdXBzID0gIEdldC1Mb2NhbE9SRG9tYWluR3JvdXAgLUNvbXB1dGVybmFtZSAgJGVudjpDT01QVVRFUk5BTUUgfCBXaGVyZS1PYmplY3R7ICRfLk5hbWUgLWxpa2UgICRGTCB9DQogICAgICAgICAgICAgDQogICAgICAgICAgICAgaWYoJExvY2FsR3JvdXBzKXsNCiAgICAgICAgICAgICAgICAgJExvY2FsR3JvdXBzIHwgRm9yRWFjaCB7DQoNCiAgICAgICAgICAgICAgICAgICAgIGlmKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRfLk1lbWJlcnMpKXskVXNlcyA9ICJFbXB0eSJ9DQogICAgICAgICAgICAgICAgICAgICAkU0lEID0gJF8uU0lEDQogDQogICAgICAgICAgICAgICAgICAgICAkU0lEQXJyID0gJFNJRC5TcGxpdCgnLScpDQogICAgICAgICAgICAgICAgICAgICAkTGFzdEluZGV4VmFsdWUgPSAkU0lEQXJyWyRTSURBcnIubGVuZ3RoIC0xXQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAkTGFzdEluZGV4VmFsdWVBcnIgPSAkTGFzdEluZGV4VmFsdWUuVG9DaGFyQXJyYXkoKSAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICBpZigoJExhc3RJbmRleFZhbHVlQXJyLmxlbmd0aCAtZXEgIjMiKSAtYW5kICgkTGFzdEluZGV4VmFsdWVBcnJbMF0gLWVxICI1IikpeyRUeXBlID0gIkJ1aWx0IEluIn0gDQoNCiAgICAgICAgICAgICAgICAgICAgICMgTmV3LU9iamVjdCBwc29iamVjdCAtUHJvcGVydHkgQHtOYW1lID0gJF8uTmFtZTtTdGF0dXMgPSAkVXNlcztUeXBlID0gJFR5cGV9fHNlbGVjdCBOYW1lLFN0YXR1cyxUeXBlDQoNCiAgICAgICAgICAgICAgICAgICAgICRPYmplY3QgPSBOZXctT2JqZWN0IHBzb2JqZWN0IC1Qcm9wZXJ0eSBAe05hbWUgPSAkXy5OYW1lO1N0YXR1cyA9ICRVc2VzO1R5cGUgPSAkVHlwZX0NCiAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAkTmFtZSA9ICRfLk5hbWU7DQogICAgICAgICAgICAgICAgICAgICAkU3RhdHVzID0gJFVzZXM7DQogICAgICAgICAgICAgICAgICAgICAkVHlwZSA9ICRUeXBlDQoNCiAgICAgICAgICAgICAgICAgICAgICRTdGRBcnIgKz0gJE9iamVjdA0KICAgICAgICAgICAgICAgICAgICAgJFN0ZEFyclN0ciArPSAiTmFtZSA6ICROYW1lLCBTdGF0dXMgOiAkU3RhdHVzLCBUeXBlIDogJFR5cGUiDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgIH0gZWxzZSB7DQoNCg0KICAgICAgICAgICAgaWYoJEdyb3Vwc0V4aXN0LkNvdW50IC1lcSAwKXsNCiAgICAgICAgICAgICAgJFN0ZEFyclN0ciArPSAiTm8gR3JvdXAgRm91bmQiDQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICRTZWNHcnBPYmogPSAgTmV3LU9iamVjdCBwc29iamVjdA0KICAgICAgICAgICAgJFNlY0dycE9iaiB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIFNlY3VyaXR5R3JvdXBzIC1WYWx1ZSAkU3RkQXJyDQogICAgIA0KICAgICAgICAgICAgJFNlY0dycE9iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIFN0YXR1cyAtVmFsdWUgIkZhaWwiDQogICAgICAgICAgICAkU2VjR3JwT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgQ29kZSAtVmFsdWUgMQ0KICAgICAgICAgICAgJFNlY0dycE9iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIFJlc3VsdCAtVmFsdWUgIkVycm9yIDogTm8gR3JvdXAgRm91bmQiDQogICAgICAgICAgICAkU2VjR3JwT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgc3Rkb3V0IC1WYWx1ZSAgJFN0ZEFyclN0cg0KICAgICAgICAgICAgJFNlY0dycE9iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIHN0ZGVyciAtVmFsdWUgJFN0ZEVyckFycg0KDQogICAgICAgICAgICBpZigkR3JvdXBzRXhpc3QuQ291bnQgLWd0IDApew0KDQogICAgICAgICAgICAgICAgJFNlY0dycE9iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIGRhdGFPYmplY3QgLVZhbHVlICRTZWNHcnBPYmogIA0KICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIHJldHVybiAkU2VjR3JwT2JqZWN0DQogICAgIA0KICAgICAgICAgfQ0KIA0KICAgICAgICAgIH0jIGVuZCBmb3JlYWNoICAgICAgDQogDQogICAgICAgIH0NCg0KICAgICAgICAjICRTdGRFcnJBcnINCg0KICAgICAgICBpZigkR3JvdXBzRG9lc05vdEV4aXN0LkNvdW50IC1ndCAwKXsNCiAgICAgICAgICANCiAgICAgICAgICAgJENvZGUgPSAxDQogICAgICAgICAgICRTdGF0dXMgPSAiRmFpbCINCiAgICAgICAgICAgJFJlc3VsdE1zZyA9ICJGYWlsIDogRmFpbGVkIHRvIHB1bGwgZ3JvdXAocyk6ICQoJFNlY3VyaXR5R3JvdXBzQXJyIC1qb2luICcsJykiDQogICAgICAgICAgDQogICAgICAgIH0NCg0KDQogICAgICAgICRTZWNHcnBPYmogPSAgTmV3LU9iamVjdCBwc29iamVjdA0KICAgICAgICAkU2VjR3JwT2JqIHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgU2VjdXJpdHlHcm91cHMgLVZhbHVlICRTdGRBcnINCiAgICAgICAgICAgICAgDQogICAgICAgICRTZWNHcnBPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBTdGF0dXMgLVZhbHVlICRTdGF0dXMNCiAgICAgICAgJFNlY0dycE9iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIENvZGUgLVZhbHVlICRDb2RlDQogICAgICAgICRTZWNHcnBPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBSZXN1bHQgLVZhbHVlICIkUmVzdWx0TXNnIg0KICAgICAgICAkU2VjR3JwT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgc3Rkb3V0IC1WYWx1ZSAgJFN0ZEFyclN0cg0KICAgICAgICAkU2VjR3JwT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgZGF0YU9iamVjdCAtVmFsdWUgJFNlY0dycE9iaiAgDQoNCiAgICAgICAgaWYoJEdyb3Vwc0RvZXNOb3RFeGlzdC5Db3VudCAtZ3QgMCl7DQoNCiAgICAgICAgICAgICRTZWNHcnBPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBzdGRlcnIgLVZhbHVlICRTdGRFcnJBcnINCg0KICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICByZXR1cm4gJFNlY0dycE9iamVjdA0KDQogIH0gDQogICANCiAgIA0KICAgaWYoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJFNlY3VyaXR5R3JvdXApIC1hbmQgJFNlY3VyaXR5R3JvdXBzQXJyLkNvdW50IC1lcSAwKXsNCiANCiAgICAgaWYoJExvY2FsRG9tYWluR3JvdXBzKXsNCiAgICAgICAgICANCiAgICAgICAgICAkU3RkQXJyID0gQCgpDQogICAgICAgICAgJFN0ZEFyclN0ciA9IEAoKQ0KICAgICAgICAgIA0KICAgICAgICAgICRMb2NhbERvbWFpbkdyb3VwcyB8IEZvckVhY2ggew0KICAgICAgICAgICAgICANCiAgICAgICAgICAgJFNJREFyciA9IEAoKQ0KICAgICAgICAgICAkU0lEID0gIiINCiAgICAgICAgICAgJExhc3RJbmRleFZhbHVlID0gIiINCiAgICAgICAgICAgJExhc3RJbmRleFZhbHVlQXJyID0gQCgpDQogDQogICAgICAgICAgICRVc2VzID0gIkluIFVzZSINCiAgICAgICAgICAgJFR5cGUgPSAiQ3VzdG9tIg0KIA0KICAgICAgICAgICBpZihbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkXy5NZW1iZXJzKSl7JFVzZXMgPSAiRW1wdHkifQ0KICAgICAgIA0KICAgICAgICAgICAkU0lEID0gJF8uU0lEICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICRTSURBcnIgPSAkU0lELlNwbGl0KCctJykNCiAgICAgICAgICAgJExhc3RJbmRleFZhbHVlID0gJFNJREFyclskU0lEQXJyLmxlbmd0aCAtMV0NCiAgICAgICAgICAgJExhc3RJbmRleFZhbHVlQXJyID0gJExhc3RJbmRleFZhbHVlLlRvQ2hhckFycmF5KCkNCiANCiAgICAgICAgICAgaWYoKCRMYXN0SW5kZXhWYWx1ZUFyci5sZW5ndGggLWVxICIzIikgLWFuZCAoJExhc3RJbmRleFZhbHVlQXJyWzBdIC1lcSAiNSIpKXskVHlwZSA9ICJCdWlsdCBJbiJ9ICANCiAgICAgICAgICAgICAgDQogICAgICAgICAgIGlmKCRIaWRlRW1wdHlHcm91cHMgLWFuZCAkSGlkZUJ1aWx0SW5Hcm91cHMpeyAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICBpZiggKCRVc2VzIC1lcSAiSW4gVXNlIikgLWFuZCAoICRUeXBlIC1lcSAiQ3VzdG9tIikpew0KDQogICAgICAgICAgICAgICAgICAjTmV3LU9iamVjdCBwc29iamVjdCAtUHJvcGVydHkgQHtOYW1lID0gJF8uTmFtZTtTdGF0dXMgPSAkVXNlcztUeXBlID0gJFR5cGV9fHNlbGVjdCBOYW1lLFN0YXR1cyxUeXBlDQogICAgICAgICAgICAgICAgICAkT2JqZWN0ID0gTmV3LU9iamVjdCBwc29iamVjdCAtUHJvcGVydHkgQHtOYW1lID0gJF8uTmFtZTtTdGF0dXMgPSAkVXNlcztUeXBlID0gJFR5cGV9DQogICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgJE5hbWUgPSAkXy5OYW1lOw0KICAgICAgICAgICAgICAgICAgJFN0YXR1cyA9ICRVc2VzOw0KICAgICAgICAgICAgICAgICAgJFR5cGUgPSAkVHlwZQ0KDQogICAgICAgICAgICAgICAgICAkU3RkQXJyICs9ICRPYmplY3QNCiAgICAgICAgICAgICAgICAgICRTdGRBcnJTdHIgKz0gIk5hbWUgOiAkTmFtZSwgU3RhdHVzIDogJFN0YXR1cywgVHlwZSA6ICRUeXBlIiANCiAgICAgICAgICANCg0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgICANCiAgICAgICAgICAgIGlmKCRIaWRlRW1wdHlHcm91cHMgLWFuZCAtbm90KCRIaWRlQnVpbHRJbkdyb3Vwcykpew0KICAgICAgICAgICAgICBpZigkVXNlcyAtZXEgIkluIFVzZSIpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICMgTmV3LU9iamVjdCBwc29iamVjdCAtUHJvcGVydHkgQHtOYW1lID0gJF8uTmFtZTtTdGF0dXMgPSAkVXNlcztUeXBlID0gJFR5cGV9fHNlbGVjdCBOYW1lLFN0YXR1cyxUeXBlfQ0KDQogICAgICAgICAgICAgICAgICRPYmplY3QgPSBOZXctT2JqZWN0IHBzb2JqZWN0IC1Qcm9wZXJ0eSBAe05hbWUgPSAkXy5OYW1lO1N0YXR1cyA9ICRVc2VzO1R5cGUgPSAkVHlwZX0NCiAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAkTmFtZSA9ICRfLk5hbWU7DQogICAgICAgICAgICAgICAgICAkU3RhdHVzID0gJFVzZXM7DQogICAgICAgICAgICAgICAgICAkVHlwZSA9ICRUeXBlDQoNCiAgICAgICAgICAgICAgICAgICRTdGRBcnIgKz0gJE9iamVjdA0KICAgICAgICAgICAgICAgICAgJFN0ZEFyclN0ciArPSAiTmFtZSA6ICROYW1lLCBTdGF0dXMgOiAkU3RhdHVzLCBUeXBlIDogJFR5cGUiIA0KICAgICAgICAgIA0KICAgICAgICAgICAgICAgfSAgICANCiAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZigtbm90KCRIaWRlRW1wdHlHcm91cHMpIC1hbmQgJEhpZGVCdWlsdEluR3JvdXBzKXsNCiAgICAgICAgICAgICAgIGlmKCRUeXBlIC1lcSAiQ3VzdG9tIil7DQoNCiAgICAgICAgICAgICAgICAgICAjIE5ldy1PYmplY3QgcHNvYmplY3QgLVByb3BlcnR5IEB7TmFtZSA9ICRfLk5hbWU7U3RhdHVzID0gJFVzZXM7VHlwZSA9ICRUeXBlfXxzZWxlY3QgTmFtZSxTdGF0dXMsVHlwZX0NCiAgICAgICAgICAgICAgICAgICAkT2JqZWN0ID0gTmV3LU9iamVjdCBwc29iamVjdCAtUHJvcGVydHkgQHtOYW1lID0gJF8uTmFtZTtTdGF0dXMgPSAkVXNlcztUeXBlID0gJFR5cGV9DQogICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgJE5hbWUgPSAkXy5OYW1lOw0KICAgICAgICAgICAgICAgICAgJFN0YXR1cyA9ICRVc2VzOw0KICAgICAgICAgICAgICAgICAgJFR5cGUgPSAkVHlwZQ0KDQogICAgICAgICAgICAgICAgICAkU3RkQXJyICs9ICRPYmplY3QNCiAgICAgICAgICAgICAgICAgICRTdGRBcnJTdHIgKz0gIk5hbWUgOiAkTmFtZSwgU3RhdHVzIDogJFN0YXR1cywgVHlwZSA6ICRUeXBlIiANCiAgICAgICAgICANCiAgICAgICAgICAgICAgIH0gICAgDQogICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYoLW5vdCgkSGlkZUVtcHR5R3JvdXBzKSAtYW5kIC1ub3QoJEhpZGVCdWlsdEluR3JvdXBzKSl7DQoNCiAgICAgICAgICAgICAgICAgICMgIE5ldy1PYmplY3QgcHNvYmplY3QgLVByb3BlcnR5IEB7TmFtZSA9ICRfLk5hbWU7U3RhdHVzID0gJFVzZXM7VHlwZSA9ICRUeXBlfXxzZWxlY3QgTmFtZSxTdGF0dXMsVHlwZQ0KDQogICAgICAgICAgICAgICAgICAkT2JqZWN0ID0gTmV3LU9iamVjdCBwc29iamVjdCAtUHJvcGVydHkgQHtOYW1lID0gJF8uTmFtZTtTdGF0dXMgPSAkVXNlcztUeXBlID0gJFR5cGV9DQogICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgJE5hbWUgPSAkXy5OYW1lOw0KICAgICAgICAgICAgICAgICAgJFN0YXR1cyA9ICRVc2VzOw0KICAgICAgICAgICAgICAgICAgJFR5cGUgPSAkVHlwZQ0KDQogICAgICAgICAgICAgICAgICAkU3RkQXJyICs9ICRPYmplY3QNCiAgICAgICAgICAgICAgICAgICRTdGRBcnJTdHIgKz0gIk5hbWUgOiAkTmFtZSwgU3RhdHVzIDogJFN0YXR1cywgVHlwZSA6ICRUeXBlIiANCiAgICAgICAgICANCiAgICAgICAgICAgICAgfSANCiAgICAgICAgIA0KICAgICAgICAgfSNlbmQgZm9yZWFjaCANCg0KICAgICAgICAgICAgICRTZWNHcnBPYmogPSAgTmV3LU9iamVjdCBwc29iamVjdA0KICAgICAgICAgICAgICRTZWNHcnBPYmogfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBTZWN1cml0eUdyb3VwcyAtVmFsdWUgJFN0ZEFycg0KICAgICAgICAgICAgICANCiAgICAgICAgICAgICAkU2VjR3JwT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgU3RhdHVzIC1WYWx1ZSAiU3VjY2VzcyIgDQogICAgICAgICAgICAgJFNlY0dycE9iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIENvZGUgLVZhbHVlIDANCiAgICAgICAgICAgICAkU2VjR3JwT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgUmVzdWx0IC1WYWx1ZSAiU3VjY2VzcyA6IFB1bGxpbmcgYWxsIGdyb3VwcyxIaWRlIGVtcHR5IGdyb3VwcyA6ICQoJEhpZGVFbXB0eUdyb3VwcyksSGlkZSBidWlsdC1pbiBncm91cHMgOiAkKCRIaWRlQnVpbHRJbkdyb3VwcykiDQogICAgICAgICAgICAgJFNlY0dycE9iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIHN0ZG91dCAtVmFsdWUgICRTdGRBcnJTdHINCiAgICAgICAgICAgICAkU2VjR3JwT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgZGF0YU9iamVjdCAtVmFsdWUgJFNlY0dycE9iaiAgDQogICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgIHJldHVybiAkU2VjR3JwT2JqZWN0DQoNCg0KICAgICB9ICMgZW5kIGlmDQogICAgIGVsc2Ugew0KICAgICANCiAgICAgICAgV3JpdGUtV2FybmluZyAiTm8gR3JvdXAgZm91bmQiDQogICAgICAgIFdyaXRlLUhvc3QgIiINCiAgICAgDQogICAgIH0NCiAgIH0NCiAgICAgDQogIH0NCg0KDQppZigkUFNWZXJzaW9uVGFibGUuUFNWZXJzaW9uLk1ham9yIC1lcSAyKXsNCg0KICAgIEdldF9BbGxTZWN1cml0eUdyb3VwcyB8ICBDb252ZXJ0VG8tSlNPTlAyDQoNCn1lbHNlew0KDQogICAgR2V0X0FsbFNlY3VyaXR5R3JvdXBzIHwgIENvbnZlcnRUby1Kc29uIC1EZXB0aCAxMA0KfQ0K",
"jsonSchema":{
"type":"object",
"properties":{
	"Enviroment":{
      "type":"string",
      "title":"Enter either Local or Domain",
      "minLength":1
    },
	"SecurityGroup":{
      "type":"string",
      "title":"Enter security group",
      "minLength":1
    },
	"HideEmptyGroups":{
      "type":"boolean",
      "title":"Select HideEmptyGroups",
      "minLength":1
    },
	"HideBuiltInGroups":{
      "type":"boolean",
      "title":"Select HideBuiltInGroups",
      "minLength":1
    }
 },
  "required":[
  "Enviroment"
  ],
  "additionalProperties": false
},
"uiSchema":{
"Enviroment":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"SecurityGroup":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"HideEmptyGroups":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"HideBuiltInGroups":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
  "ui:order":["Enviroment", "SecurityGroup","HideEmptyGroups", "HideBuiltInGroups"]
},
"isHDScript":true}
