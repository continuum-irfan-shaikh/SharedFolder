{"id":"229290c3-8833-11e9-8f95-00155d130b89","partnerId":"00000000-0000-0000-0000-000000000000","category":["HD Automation"],"description":"MS Office Repair","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":300,"failureMessage":"Executed with errors","successMessage":"Executed Successfully","internal":false,"name":"MSOfficeRepair","tags":["Windows 7","Windows 10"],"sequence":true,"content":"",
"jsonSchema":{
"type":"object",
"properties":{
	"RepairMSOffice":{
      "type":"string",
      "title":"Enter MS Office to be repaired",
      "minLength":1
    },
	"IsQuickRepairSelected":{
      "type":"boolean",
      "title":"Select quick repair",
      "minLength":1
    },
	"Admin":{
      "type":"string",
      "title":"Enter admin ID",
      "minLength":1
    },
	"AdminPass":{
      "type":"string",
      "title":"Enter admin password",
      "minLength":1
    },
	"User":{
      "type":"string",
      "title":"Enter user ID",
      "minLength":1
    },
	"DisplayRepairModal":{
      "type":"boolean",
      "title":"Select display repair modal",
      "minLength":1
    },
	"StartAndStopPrintSpooler":{
      "type":"boolean",
      "title":"Select start and stop spooler service",
      "minLength":1
    }
 },
  "required":[
  "RepairMSOffice"
  ],
  "additionalProperties": false
},
"uiSchema":{
"RepairMSOffice":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"IsQuickRepairSelected":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"Admin":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"AdminPass":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"User":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
},
"DisplayRepairModal":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
},
"StartAndStopPrintSpooler":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
},
"ui:order":["RepairMSOffice", "IsQuickRepairSelected", "Admin", "AdminPass", "User", "DisplayRepairModal" ,"StartAndStopPrintSpooler" ]
},
"isHDScript":true}