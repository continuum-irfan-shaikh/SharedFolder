{"id":"1688d5a1-bdb7-11e9-8e0b-00155d130b01","partnerId":"00000000-0000-0000-0000-000000000000","category":["Setup"],"description":"The task will check for missing NIC driver INF file on the system and replace the missing file from DriverStore.","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":600,"failureMessage":"Executed with errors","successMessage":"Executed successfully","internal":false,"name":"Find and replace missing OEM.inf","tags":["Windows 7","Windows 10"],"sequence":true,"content":"","jsonSchema":"","uiSchema":"","isHDScript":false}