{"id":"1e65485f-7d4e-11e9-9e01-00155d130b89","partnerId":"00000000-0000-0000-0000-000000000000","category":["HD Automation"],"description":"Get Chipset Driver","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":300,"failureMessage":"Executed with errors","successMessage":"Executed Successfully","internal":false,"name":"GetChipsetDriver","tags":["Windows 7","Windows 10"],"sequence":true,"content":"",
"jsonSchema":{
"type":"object",
"properties":{
	"ChipsetDriverName":{
      "type":"string",
      "title":"Enter Chipset Driver Name",
      "minLength":1
    }
 },
  "required":[
  ],
  "additionalProperties": false
},
"uiSchema":{
"ChipsetDriverName":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
  "ui:order":["ChipsetDriverName"]
},
"isHDScript":true}
