{"id":"c87ff3ff-81d0-11e9-a3f8-00155d130b89","partnerId":"00000000-0000-0000-0000-000000000000","category":["HD Automation"],"description":"Check share Or NTFS permissions","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":300,"failureMessage":"Executed with errors","successMessage":"Executed Successfully","internal":false,"name":"CheckShareOrNTFSPermissions","tags":["Windows 7","Windows 10"],"sequence":true,"content":"DQpDbGVhci1Ib3N0DQoNCjwjDQoNCltzdHJpbmddJFBhdGggPSAiRDpcdGVtcDIiICAgICAgICANCltzdHJpbmddJFVzZXJuYW1lICA9ICIiICAgICAgICAgIyBJTkZJQ1NcXGt1bWFyZyAgDQpbYm9vbF0kU2hhcmVQZXJtaXNzaW9ucyA9ICR0cnVlDQpbYm9vbF0kTlRGU1Blcm1pc3Npb25zICA9ICR0cnVlDQpzc3MNCiM+DQoNCmZ1bmN0aW9uIEVzY2FwZS1KU09OU3RyaW5nKCRzdHIpew0KICAgIGlmICgkc3RyIC1lcSAkbnVsbCkge3JldHVybiAiIn0NCiAgICAgICAgICRzdHIgPSAkc3RyLlRvU3RyaW5nKCkuUmVwbGFjZSgnIicsJ1wiJykuUmVwbGFjZSgnXCcsJ1xcJykuUmVwbGFjZSgiYG4iLCdcbicpLlJlcGxhY2UoImByIiwnXHInKS5SZXBsYWNlKCJgdCIsJ1x0JykNCiAgICByZXR1cm4gJHN0cjsNCn0NCg0KDQpmdW5jdGlvbiBDb252ZXJ0VG8tSlNPTlAyKCRtYXhEZXB0aCA9IDEwLCRmb3JjZUFycmF5ID0gJGZhbHNlKSB7DQpiZWdpbiB7DQokZGF0YSA9IEAoKQ0KfQ0KcHJvY2Vzc3sNCiRkYXRhICs9ICRfDQp9DQplbmR7DQppZiAoJGRhdGEubGVuZ3RoIC1lcSAxIC1hbmQgJGZvcmNlQXJyYXkgLWVxICRmYWxzZSkgew0KJHZhbHVlID0gJGRhdGFbMF0NCn0gZWxzZSB7IA0KJHZhbHVlID0gJGRhdGENCn0NCg0KDQppZiAoJHZhbHVlIC1lcSAkbnVsbCkgew0KcmV0dXJuICJudWxsIg0KfQ0KDQoNCg0KDQokZGF0YVR5cGUgPSAkdmFsdWUuR2V0VHlwZSgpLk5hbWUNCnN3aXRjaCAtcmVnZXggKCRkYXRhVHlwZSkgew0KICAgICAgICAgICAgJ1N0cmluZycgIHsNCnJldHVybiAgImAiezB9YCIiIC1mIChFc2NhcGUtSlNPTlN0cmluZyAkdmFsdWUgKQ0KfQ0KICAgICAgICAgICAgJyhTeXN0ZW1cLik/RGF0ZVRpbWUnICB7cmV0dXJuICAiYCJ7MDp5eXl5LU1NLWRkfVR7MDpISDptbTpzc31gIiIgLWYgJHZhbHVlfQ0KICAgICAgICAgICAgJ0ludDMyfERvdWJsZScge3JldHVybiAgIiR2YWx1ZSJ9DQonQm9vbGVhbicge3JldHVybiAgIiR2YWx1ZSIuVG9Mb3dlcigpfQ0KICAgICAgICAgICAgJyhTeXN0ZW1cLik/T2JqZWN0XFtcXScgeyAjIGFycmF5DQppZiAoJG1heERlcHRoIC1sZSAwKXtyZXR1cm4gImAiJHZhbHVlYCIifQ0KJGpzb25SZXN1bHQgPSAnJw0KZm9yZWFjaCgkZWxlbSBpbiAkdmFsdWUpew0KI2lmICgkZWxlbSAtZXEgJG51bGwpIHtjb250aW51ZX0NCmlmICgkanNvblJlc3VsdC5MZW5ndGggLWd0IDApIHskanNvblJlc3VsdCArPScsICd9IA0KJGpzb25SZXN1bHQgKz0gKCRlbGVtIHwgQ29udmVydFRvLUpTT05QMiAtbWF4RGVwdGggKCRtYXhEZXB0aCAtMSkpDQp9DQpyZXR1cm4gIlsiICsgJGpzb25SZXN1bHQgKyAiXSINCiAgICAgICAgICAgIH0NCicoU3lzdGVtXC4pP0hhc2h0YWJsZScgeyAjIGhhc2h0YWJsZQ0KJGpzb25SZXN1bHQgPSAnJw0KZm9yZWFjaCgka2V5IGluICR2YWx1ZS5LZXlzKXsNCmlmICgkanNvblJlc3VsdC5MZW5ndGggLWd0IDApIHskanNvblJlc3VsdCArPScsICd9DQokanNvblJlc3VsdCArPSANCkAiDQoiezB9IjogezF9DQoiQCAtZiAka2V5ICwgKCR2YWx1ZVska2V5XSB8IENvbnZlcnRUby1KU09OUDIgLW1heERlcHRoICgkbWF4RGVwdGggLTEpICkNCn0NCnJldHVybiAieyIgKyAkanNvblJlc3VsdCArICJ9Ig0KfQ0KICAgICAgICAgICAgZGVmYXVsdCB7ICNvYmplY3QNCmlmICgkbWF4RGVwdGggLWxlIDApe3JldHVybiAgImAiezB9YCIiIC1mIChFc2NhcGUtSlNPTlN0cmluZyAkdmFsdWUpfQ0KcmV0dXJuICJ7IiArDQooKCR2YWx1ZSB8IEdldC1NZW1iZXIgLU1lbWJlclR5cGUgKnByb3BlcnR5IHwgJSB7IA0KQCINCiJ7MH0iOiB7MX0NCiJAIC1mICRfLk5hbWUgLCAoJHZhbHVlLigkXy5OYW1lKSB8IENvbnZlcnRUby1KU09OUDIgLW1heERlcHRoICgkbWF4RGVwdGggLTEpICkgDQp9KSAtam9pbiAnLCAnKSArICJ9Ig0KICAgIH0NCn0NCn0NCn0NCg0KDQogDQpmdW5jdGlvbiBHZXQtU2hhcmVQZXJtaXNzaW9uc3sgDQoNCltjbWRsZXRiaW5kaW5nKCANCiAgICBEZWZhdWx0UGFyYW1ldGVyU2V0TmFtZSA9ICdjb21wdXRlcicsIA0KICAgIENvbmZpcm1JbXBhY3QgPSAnbG93JyANCildIA0KICAgIFBhcmFtKCANCiAgICAgICAgW1BhcmFtZXRlciggDQogICAgICAgICAgICBNYW5kYXRvcnkgPSAkVHJ1ZSwgDQogICAgICAgICAgICBQb3NpdGlvbiA9IDAsIA0KICAgICAgICAgICAgUGFyYW1ldGVyU2V0TmFtZSA9ICdjb21wdXRlcicsIA0KICAgICAgICAgICAgVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSldIA0KICAgICAgICAgICAgW2FycmF5XSRjb21wdXRlciAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICApIA0KQmVnaW4geyAgICAgICAgICAgICAgICAgDQogICAgI1Byb2Nlc3MgU2hhcmUgcmVwb3J0IA0KICAgICRzaGFyZXJlcG9ydCA9IEAoKSANCiAgICB9IA0KUHJvY2VzcyB7IA0KICAgICNJdGVyYXRlIHRocm91Z2ggY29tcHR1ZXJzIA0KICAgIEZvckVhY2ggKCRjIGluICRjb21wdXRlcikgeyANCiAgICAgICAgVHJ5IHsgICAgIA0KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ29tcHV0ZXI6ICQoJGMpIiANCiAgICAgICAgICAgICNSZXRyaWV2ZSBzaGFyZSBpbmZvcm1hdGlvbiBmcm9tIGNvbXB0dWVyIA0KICAgICAgICAgICAgJFNoYXJlU2VjID0gR2V0LVdtaU9iamVjdCAtQ2xhc3MgV2luMzJfTG9naWNhbFNoYXJlU2VjdXJpdHlTZXR0aW5nIC1Db21wdXRlck5hbWUgJGMgLWVhIHN0b3AgDQogICAgICAgICAgICBGb3JFYWNoICgkU2hhcmVzIGluICRzaGFyZXNlYykgeyANCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJTaGFyZTogJCgkU2hhcmVzLm5hbWUpIiANCiAgICAgICAgICAgICAgICAgICAgI1RyeSB0byBnZXQgdGhlIHNlY3VyaXR5IGRlc2NyaXB0b3IgDQogICAgICAgICAgICAgICAgICAgICRTZWN1cml0eURlc2NyaXB0b3IgPSAkU2hhcmVTLkdldFNlY3VyaXR5RGVzY3JpcHRvcigpIA0KICAgICAgICAgICAgICAgICAgICAjSXRlcmF0ZSB0aHJvdWdoIGVhY2ggZGVzY3JpcHRvciANCiAgICAgICAgICAgICAgICAgICAgRm9yRWFjaCAoJERBQ0wgaW4gJFNlY3VyaXR5RGVzY3JpcHRvci5EZXNjcmlwdG9yLkRBQ0wpIHsgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRhcnJzaGFyZSA9IE5ldy1PYmplY3QgUFNPYmplY3QgDQogICAgICAgICAgICAgICAgICAgICAgICAkYXJyc2hhcmUgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSBDb21wdXRlciAkYyANCiAgICAgICAgICAgICAgICAgICAgICAgICRhcnJzaGFyZSB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5IE5hbWUgJFNoYXJlcy5OYW1lIA0KICAgICAgICAgICAgICAgICAgICAgICAgJGFycnNoYXJlIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgSUQgJERBQ0wuVHJ1c3RlZS5OYW1lIA0KDQogICAgICAgICAgICAgICAgICAgICAgICAjQ29udmVydCB0aGUgY3VycmVudCBvdXRwdXQgaW50byBzb21ldGhpbmcgbW9yZSByZWFkYWJsZSANCiAgICAgICAgICAgICAgICAgICAgICAgIFN3aXRjaCAoJERBQ0wuQWNjZXNzTWFzaykgeyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMDMyMTI3IHskQWNjZXNzTWFzayA9ICJGdWxsQ29udHJvbCJ9IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDExNzk3ODUgeyRBY2Nlc3NNYXNrID0gIlJlYWQifSANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMTgwMDYzIHskQWNjZXNzTWFzayA9ICJSZWFkLCBXcml0ZSJ9IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDExNzk4MTcgeyRBY2Nlc3NNYXNrID0gIlJlYWRBbmRFeGVjdXRlIn0gDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLTE2MTA2MTI3MzYgeyRBY2Nlc3NNYXNrID0gIlJlYWRBbmRFeGVjdXRlRXh0ZW5kZWQifSANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMjQ1NjMxIHskQWNjZXNzTWFzayA9ICJSZWFkQW5kRXhlY3V0ZSwgTW9kaWZ5LCBXcml0ZSJ9IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDExODAwOTUgeyRBY2Nlc3NNYXNrID0gIlJlYWRBbmRFeGVjdXRlLCBXcml0ZSJ9IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI2ODQzNTQ1NiB7JEFjY2Vzc01hc2sgPSAiRnVsbENvbnRyb2wgKFN1YiBPbmx5KSJ9IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQgeyRBY2Nlc3NNYXNrID0gJERBQ0wuQWNjZXNzTWFza30gDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICAgICAgICAgICRhcnJzaGFyZSB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5IEFjY2Vzc01hc2sgJEFjY2Vzc01hc2sgDQogICAgICAgICAgICAgICAgICAgICAgICAjQ29udmVydCB0aGUgY3VycmVudCBvdXRwdXQgaW50byBzb21ldGhpbmcgbW9yZSByZWFkYWJsZSANCiAgICAgICAgICAgICAgICAgICAgICAgIFN3aXRjaCAoJERBQ0wuQWNlVHlwZSkgeyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwIHskQWNlVHlwZSA9ICJBbGxvdyJ9IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgeyRBY2VUeXBlID0gIkRlbnkifSANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyIHskQWNlVHlwZSA9ICJBdWRpdCJ9IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgICAgICAgICAkYXJyc2hhcmUgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSBBY2VUeXBlICRBY2VUeXBlIA0KICAgICAgICAgICAgICAgICAgICAgICAgI0FkZCB0byBleGlzdGluZyBhcnJheSANCiAgICAgICAgICAgICAgICAgICAgICAgICRzaGFyZXJlcG9ydCArPSAkYXJyc2hhcmUgDQogICAgICAgICAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAjQ2F0Y2ggYW55IGVycm9ycyAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICBDYXRjaCB7IA0KICAgICAgICAgICAgICAgICRhcnJzaGFyZSB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5IENvbXB1dGVyICRjIA0KICAgICAgICAgICAgICAgICRhcnJzaGFyZSB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5IE5hbWUgIk5BIiANCiAgICAgICAgICAgICAgICAkYXJyc2hhcmUgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSBJRCAiTkEiICANCiAgICAgICAgICAgICAgICAkYXJyc2hhcmUgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSBBY2Nlc3NNYXNrICJOQSIgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIH0gIA0KICAgICAgICAgICAgRmluYWxseSB7IA0KICAgICAgICAgICAgICAgICNBZGQgdG8gZXhpc3RpbmcgYXJyYXkgDQogICAgICAgICAgICAgICAgJHNoYXJlcmVwb3J0ICs9ICRhcnJzaGFyZSANCiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgfSAgDQogICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICANCkVuZCB7IA0KICAgICAgICANCiAgICAgICAgJFNoYXJlUGVybWlzc2lvbiA9IEAoKQ0KICAgICAgICAkU2hhcmVBcnIgPSBAKCkNCg0KICAgICAgICAgaWYoKFt1cmldJFBhdGgpLklzVW5jKXsNCiAgICAgICAgICAgICAgDQogICAgICAgICAgICAgJEZpbGVPckZvbGRlciA9ICgkUGF0aCAtc3BsaXQgJ1xcJylbLTFdDQogICAgICAgICAgICANCiAgICAgICAgICB9RWxzZXsNCg0KICAgICAgICAgICAgICRGaWxlT3JGb2xkZXIgPSBzcGxpdC1wYXRoICRQYXRoIC1sZWFmIC1yZXNvbHZlDQogICAgICAgICAgfQ0KDQogICAgICAgICRTaGFyZVBlcm1pc3Npb24gPSAkU2hhcmVyZXBvcnQgfCBXaGVyZS1PYmplY3QgeyRfLk5hbWUgLWVxICIkRmlsZU9yRm9sZGVyIn0NCg0KICAgICAgICBpZiggJFNoYXJlUGVybWlzc2lvbi5Db3VudCAtZ3QgMCApew0KDQogICAgICAgICAgICBmb3JlYWNoKCRTUCBpbiAkU2hhcmVQZXJtaXNzaW9uKXsNCg0KICAgICAgICAgICAgICAgJFNQLklEICsnICcrICcoJyArICRTUC5BY2VUeXBlICsnKScgKycgJysgJFNQLkFjY2Vzc01hc2sNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgIH1FbHNlew0KDQogICAgICAgICAgICMgV3JpdGUtV2FybmluZyAiRmlsZSBvciBGb2xkZXIgOiAkKCRGaWxlT3JGb2xkZXIpIG5vdCBmb3VuZCINCiAgICAgICAgfQ0KDQogICAgfSAjIEVuZA0KfSAgIyBmdW5jdGlvbiAgIA0KIA0KZnVuY3Rpb24gR2V0LVNoYXJlTlRGU1Blcm1pc3Npb25zeyANCg0KW2NtZGxldGJpbmRpbmcoIA0KICAgIERlZmF1bHRQYXJhbWV0ZXJTZXROYW1lID0gJ2NvbXB1dGVyJywgDQogICAgQ29uZmlybUltcGFjdCA9ICdsb3cnIA0KKV0gDQogICAgUGFyYW0oIA0KICAgICAgICBbUGFyYW1ldGVyKCANCiAgICAgICAgICAgIE1hbmRhdG9yeSA9ICRUcnVlLCANCiAgICAgICAgICAgIFBvc2l0aW9uID0gMCwgDQogICAgICAgICAgICBQYXJhbWV0ZXJTZXROYW1lID0gJ2NvbXB1dGVyJywgDQogICAgICAgICAgICBWYWx1ZUZyb21QaXBlbGluZSA9ICRUcnVlKV0gDQogICAgICAgICAgICBbYXJyYXldJGNvbXB1dGVyICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICkgICANCkJlZ2luIHsgICAgICAgICAgICAgICANCiAgICAjUHJvY2VzcyBOVEZTIFNoYXJlIHJlcG9ydCAgICAgICAgICAgICAgICAgDQogICAgJG50ZnNyZXBvcnQgPSBAKCkgICAgICAgDQogICAgfSANClByb2Nlc3MgeyANCiRhcnJudGZzID0gQCgpDQogICAgI0l0ZXJhdGUgdGhyb3VnaCBlYWNoIGNvbXB1dGVyIA0KICAgIEZvckVhY2ggKCRjIGluICRjb21wdXRlcikgeyAgDQogICAgICAgIFRyeSB7ICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJDb21wdXRlcjogJCgkYykiICANCiAgICAgICAgICAgICNHYXRoZXIgc2hhcmUgaW5mb3JtYXRpb24gDQogICAgICAgICAgICAkc2hhcmVzID0gR3dtaSAtY29tcCAkYyBXaW4zMl9TaGFyZSAtZWEgc3RvcCB8ID8geyRfLk5hbWUgLW5lICdBRE1JTiQnLUFORCAkXy5OYW1lIC1uZSAnQyQnIC1BTkQgJF8uTmFtZSAtbmUgJ0lQQyQnfSB8IFNlbGVjdCBOYW1lLFBhdGggDQogICAgICAgICAgICBGb3JFYWNoICgkc2hhcmUgaW4gJHNoYXJlcykgeyANCiAgICAgICAgICAgICAgICAjSXRlcmF0ZSB0aHJvdWdoIHNoYXJlcyANCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJTaGFyZTogJCgkc2hhcmUubmFtZSkiIA0KICAgICAgICAgICAgICAgIElmICgkc2hhcmUucGF0aCAtbmUgIiIpIHsgDQogICAgICAgICAgICAgICAgICAgICNSZXRyaWV2ZSBBQ0wgaW5mb3JtYXRpb24gZnJvbSBTaGFyZSAgIA0KICAgICAgICAgICAgICAgICAgICAkcmVtb3Rlc2hhcmUgPSAkc2hhcmUucGF0aCAtcmVwbGFjZSAiOiIsIiQiICANCiAgICAgICAgICAgICAgICAgICAgVHJ5IHsgDQogICAgICAgICAgICAgICAgICAgICAgICAjR2F0aGVyIE5URlMgc2VjdXJpdHkgaW5mb3JtYXRpb24gZnJvbSBlYWNoIHNoYXJlIA0KICAgICAgICAgICAgICAgICAgICAgICAgJGFjbHMgPSBHZXQtQUNMICJcXCRjb21wdXRlclwkcmVtb3Rlc2hhcmUiIA0KICAgICAgICAgICAgICAgICAgICAgICAgI2l0ZXJhdGUgdGhyb3VnaCBlYWNoIEFDTCANCiAgICAgICAgICAgICAgICAgICAgICAgIEZvckVhY2ggKCRhY2wgaW4gJGFjbHMuYWNjZXNzKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAkQWNjZXNzTWFzayA9ICRhY2wuRmlsZVN5c3RlbVJpZ2h0cyANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFycm50ZnMgKz0gTmV3LU9iamVjdCBQU09iamVjdCAtUHJvcGVydHkgQHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tcHV0ZXIgPSAkYyAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgU2hhcmVOYW1lID0gJFNoYXJlLm5hbWUgDQogICAgICAgICAgICAgICAgICAgICAgICAgICBQYXRoID0gICRzaGFyZS5wYXRoIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgTlRGU19Vc2VyID0gJGFjbC5JZGVudGl0eVJlZmVyZW5jZSANCiAgICAgICAgICAgICAgICAgICAgICAgICAgIE5URlNfUmlnaHRzID0gJEFjY2Vzc01hc2sgDQogICAgICAgICAgICAgICAgICAgICAgICAgICBOVEZTX0NvbnRyb2xUeXBlID0gJGFjbC5BY2Nlc3NDb250cm9sVHlwZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgTlRGU19Jc0luaGVyaXRlZCA9ICRhY2wuSXNJbmhlcml0ZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyRhcnJudGZzIHwgc2VsZWN0IFNoYXJlTmFtZSxQYXRoLE5URlNfVXNlcixOVEZTX1JpZ2h0cyxOVEZTX0NvbnRyb2xUeXBlDQogICAgICAgICAgICAgICAgICAgICAgICB9ICAjIGVuZCBmb3JlYWNoICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICAgICAgQ2F0Y2ggeyANCiAgICAgICAgICAgICAgICAgICAgICAgICRhcnJudGZzID0gTmV3LU9iamVjdCBQU09iamVjdCAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgI1Byb2Nlc3MgTlRGUyBSZXBvcnQgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAkYXJybnRmcyB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5IENvbXB1dGVyICRjICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAkYXJybnRmcyB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5IFNoYXJlTmFtZSAiTkEiIA0KICAgICAgICAgICAgICAgICAgICAgICAgJGFycm50ZnMgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSBQYXRoICJOQSIgDQogICAgICAgICAgICAgICAgICAgICAgICAkYXJybnRmcyB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5IE5URlNfVXNlciAiTkEiIA0KICAgICAgICAgICAgICAgICAgICAgICAgJGFycm50ZnMgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSBOVEZTX1JpZ2h0cyAiTkEiIA0KICAgICAgICAgICAgICAgICAgICAgICAgJGFycm50ZnMgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSBOVEZTX0NvbnRyb2xUeXBlICJOQSIgDQogICAgICAgICAgICAgICAgICAgICAgICAkYXJybnRmcyB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5IE5URlNfSXNJbmhlcml0ZWQgIk5BIiAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgICAgIEZpbmFsbHkgeyANCiAgICAgICAgICAgICAgICAgICAgICAgICNBZGQgdG8gZXhpc3RpbmcgYXJyYXkgDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRudGZzcmVwb3J0ID0gJGFycm50ZnMgIA0KICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgfSANCiAgICAgICAgQ2F0Y2ggeyANCiAgICAgICAgICAgICRhcnJudGZzIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgQ29tcHV0ZXIgJGMgICAgICAgICAgICAgICANCiAgICAgICAgICAgICRhcnJudGZzIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgU2hhcmVOYW1lICJOQSIgIA0KICAgICAgICAgICAgJGFycm50ZnMgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSBQYXRoICJOQSIgIA0KICAgICAgICAgICAgJGFycm50ZnMgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSBOVEZTX1VzZXIgIk5BIiAgDQogICAgICAgICAgICAkYXJybnRmcyB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5IE5URlNfUmlnaHRzICJOQSIgDQogICAgICAgICAgICAkYXJybnRmcyB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5IE5URlNfQ29udHJvbFR5cGUgIk5BIiANCiAgICAgICAgICAgICRhcnJudGZzIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgTlRGU19Jc0luaGVyaXRlZCAiTkEiICAgICAgICAgICAgDQogICAgICAgICAgICB9IA0KICAgICAgICBGaW5hbGx5IHsgDQogICAgICAgICAgICAjQWRkIHRvIGV4aXN0aW5nIGFycmF5IA0KICAgICAgICAgICAgJG50ZnNyZXBvcnQgPSAkYXJybnRmcyAgICAgICAgICANCiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICB9ICAgICAgICAgICAgIA0KICAgIH0gDQpFbmQgeyANCiAgICAgICAgDQogICAgJE5URlNQZXJtaXNzaW9uID0gQCgpDQogICAgJE5URlNBcnIgPSBAKCkNCiAgICAgDQogICAjICAkbnRmc3JlcG9ydA0KDQogICAgIyBGaWx0ZXIgd2l0aG91dCB1c2VyDQogICAgaWYoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJFVzZXJuYW1lKSl7DQogICAgICANCiAgICAgIA0KICAgICAgICAgIGlmKChbdXJpXSRQYXRoKS5Jc1VuYyl7DQogICAgICAgICAgICANCiAgICAgICAgICAgICRGaWxlT3JGb2xkZXIgPSAoJFBhdGggLXNwbGl0ICdcXCcpWy0xXQ0KICAgICAgICAgICAgJEZpbGVPckZvbGRlciA9ICRGaWxlT3JGb2xkZXINCiAgICAgICAgICAgICROVEZTUGVybWlzc2lvbiA9ICRudGZzcmVwb3J0IHwgV2hlcmUtT2JqZWN0IHskXy5TaGFyZU5hbWUgLWVxICRGaWxlT3JGb2xkZXJ9IA0KDQogICAgICAgICAgfUVsc2V7DQoNCiAgICAgICAgICAgICROVEZTUGVybWlzc2lvbiA9ICRudGZzcmVwb3J0IHwgV2hlcmUtT2JqZWN0IHskXy5QYXRoIC1lcSAkUGF0aH0gDQogICAgICAgICAgfQ0KDQoNCiAgICAgDQogICAgICAgIGlmKCROVEZTUGVybWlzc2lvbil7DQoNCiAgICAgICAgICAgIGlmKCROVEZTLk5URlNfSXNJbmhlcml0ZWQpeyAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGZvcmVhY2goJE5URlMgaW4gJE5URlNQZXJtaXNzaW9uKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgJE5URlNBcnIgKz0gJ1snICsgIklzSW5oZXJpdGVkIiArICddJysgICgkTlRGUy5OVEZTX1VzZXIpLlRvU3RyaW5nKCkgKycgJysgJygnICsgJE5URlMuTlRGU19Db250cm9sVHlwZSArJyknICsnICcrICROVEZTLk5URlNfUmlnaHRzDQoNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgIGZvcmVhY2goJE5URlMgaW4gJE5URlNQZXJtaXNzaW9uKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAkTlRGU0FyciArPSAoJE5URlMuTlRGU19Vc2VyKS5Ub1N0cmluZygpICsnICcrICcoJyArICROVEZTLk5URlNfQ29udHJvbFR5cGUgKycpJyArJyAnKyAkTlRGUy5OVEZTX1JpZ2h0cw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuICROVEZTQXJyDQoNCiAgICAgICAgfWVsc2V7DQogICAgICAgICAgDQogICAgICAgICAjIFdyaXRlLVdhcm5pbmcgIlNwZWNpZmllZCBmb2xkZXIgbm90IGZvdW5kIg0KDQogICAgICAgIH0NCiAgICB9DQoNCiAgICAjIEZpbHRlciB3aXRoIHVzZXINCiAgICBpZigtbm90IFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRVc2VybmFtZSkpew0KDQogICAgICAgIA0KICAgICAgICAgIGlmKChbdXJpXSRQYXRoKS5Jc1VuYyl7DQogICAgICAgICAgICANCiAgICAgICAgICAgICRGaWxlT3JGb2xkZXIgPSAoJFBhdGggLXNwbGl0ICdcXCcpWy0xXQ0KICAgICAgICAgICAgJEZpbGVPckZvbGRlciA9ICRGaWxlT3JGb2xkZXINCiAgICAgICAgICAgICROVEZTUGVybWlzc2lvbiA9ICRudGZzcmVwb3J0IHwgV2hlcmUtT2JqZWN0IHsoJF8uU2hhcmVOYW1lIC1lcSAkRmlsZU9yRm9sZGVyKSAtYW5kICgkXy5OVEZTX1VzZXIgLWVxICRVc2VybmFtZSl9DQoNCiAgICAgICAgICB9RWxzZXsNCg0KICAgICAgICAgICAgJE5URlNQZXJtaXNzaW9uID0gJG50ZnNyZXBvcnQgfCBXaGVyZS1PYmplY3QgeygkXy5QYXRoIC1lcSAkUGF0aCkgLWFuZCAoJF8uTlRGU19Vc2VyIC1lcSAkVXNlcm5hbWUpfQ0KICAgICAgICAgIH0NCiAgICAgICAgICAgICAgIA0KICAgICAgIA0KICAgICAgICBpZigkTlRGU1Blcm1pc3Npb24pew0KDQogICAgICAgICAgICBpZigkTlRGUy5OVEZTX0lzSW5oZXJpdGVkKXsNCiAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGZvcmVhY2goJE5URlMgaW4gJE5URlNQZXJtaXNzaW9uKXsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICROVEZTQXJyICs9ICdbJyArICJJc0luaGVyaXRlZCIgKyAnXScrICAoJE5URlMuTlRGU19Vc2VyKS5Ub1N0cmluZygpICsnICcrICcoJyArICROVEZTLk5URlNfQ29udHJvbFR5cGUgKycpJyArJyAnKyAkTlRGUy5OVEZTX1JpZ2h0cw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgZm9yZWFjaCgkTlRGUyBpbiAkTlRGU1Blcm1pc3Npb24pew0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICROVEZTQXJyICs9ICAoJE5URlMuTlRGU19Vc2VyKS5Ub1N0cmluZygpICsnICcrICcoJyArICROVEZTLk5URlNfQ29udHJvbFR5cGUgKycpJyArJyAnKyAkTlRGUy5OVEZTX1JpZ2h0cw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfWVsc2V7DQogICAgICAgICAgDQogICAgICAgICAjIFdyaXRlLVdhcm5pbmcgIlNwZWNpZmllZCB1c2VyIG5vdCBmb3VuZCINCg0KICAgICAgICB9DQoNCiAgICB9DQoNCg0KICAgIH0gICAjIEVuZCAgICAgICAgICAgDQp9ICMgRW5kIGZ1bmN0aW9uDQogDQoNCmZ1bmN0aW9uIEdldC1zaGFyZU5URlNQZXJtaXNzaW9uew0KICAgDQogICAkU2hhcmVkTlRGU09iamVjdCA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIHBzb2JqZWN0DQogICAkU2hhcmVkTlRGU09iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIFRhc2tOYW1lIC1WYWx1ZSAiQ2hlY2sgc2hhcmVkIG9yIE5URlMgcGVybWlzc2lvbiINCg0KICAgJENvbXAgPSAkZW52OkNPTVBVVEVSTkFNRQ0KDQogICAkaG9zdFZlclNpb25NYWpvciA9ICgkUFNWZXJzaW9uVGFibGUuUFNWZXJzaW9uLk1ham9yKS5Ub1N0cmluZygpDQogICAkaG9zdFZlclNpb25NaW5vciA9ICgkUFNWZXJzaW9uVGFibGUuUFNWZXJzaW9uLk1pbm9yKS5Ub1N0cmluZygpDQogICAkaG9zdFZlcnNpb24gPSAkaG9zdFZlclNpb25NYWpvciArJy4nKyAkaG9zdFZlclNpb25NaW5vciANCg0KICAgJG9zVmVyc2lvbk1ham9yID0gKFtTeXN0ZW0uRW52aXJvbm1lbnRdOjpPU1ZlcnNpb24uVmVyc2lvbi5tYWpvcikuVG9TdHJpbmcoKQ0KICAgJG9zVmVyc2lvbk1pbm9yID0gKFtTeXN0ZW0uRW52aXJvbm1lbnRdOjpPU1ZlcnNpb24uVmVyc2lvbi5taW5vcikuVG9TdHJpbmcoKQ0KICAgJG9zVmVyc2lvbiA9ICRvc1ZlcnNpb25NYWpvciArJy4nKyAkb3NWZXJzaW9uTWlub3INCg0KICAgW2Jvb2xlYW5dJGlzUHNWZXJzaW9uT2sgPSAoW3ZlcnNpb25dJGhvc3RWZXJzaW9uIC1nZSBbdmVyc2lvbl0nMi4wJykNCiAgIFtib29sZWFuXSRpc09TVmVyc2lvbk9rID0gKFt2ZXJzaW9uXSRvc1ZlcnNpb24gLWdlIFt2ZXJzaW9uXSc2LjAnKQ0KICAgICAgICANCiAgDQogICBpZigtbm90ICRpc1BzVmVyc2lvbk9rKXsNCiAgICAgIA0KICAgICAgICAgICRTdGRFcnJBcnIgPSBAKCkNCiAgICAgICAgICAkc3RkT3V0QXJyID0gQCgpDQogICAgICAgICAgJFN0ZEVyciA9IE5ldy1PYmplY3QgUFNPYmplY3QgLVByb3BlcnR5IEB7CQkgICAgICAgDQoJCSAgICAgICAgICAgICAgICAgICAgICBpZCA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA9ICAiUG93ZXJTaGVsbCB2ZXJzaW9uIGJlbG93IDIuMCBpcyBub3Qgc3VwcG9ydGVkIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbCA9ICJQb3dlclNoZWxsIHZlcnNpb24gYmVsb3cgMi4wIGlzIG5vdCBzdXBwb3J0ZWQiOw0KDQogICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgDQogICAgICAgICAkU3RkRXJyQXJyICs9ICRTdGRFcnINCiAgICAgICAgICRzdGRPdXRBcnIgKz0gKCJQb3dlclNoZWxsIHZlcnNpb24gYmVsb3cgMi4wIGlzIG5vdCBzdXBwb3J0ZWQiKQ0KICAgIA0KICAgICAgICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBTdGF0dXMgLVZhbHVlICJmYWlsIiANCiAgICAgICAgICRTaGFyZWROVEZTT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgQ29kZSAtVmFsdWUgMQ0KICAgICAgICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBzdGRlcnIgLVZhbHVlICRTdGRFcnJBcnINCiAgICAgICAgICRTaGFyZWROVEZTT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgUmVzdWx0IC1WYWx1ZSAiUG93ZXJTaGVsbCB2ZXJzaW9uIGJlbG93IDIuMCBpcyBub3Qgc3VwcG9ydGVkIg0KICAgICAgICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBzdGRvdXQgLVZhbHVlICAkc3RkT3V0QXJyICAgDQoNCiAgICAgICAgIHJldHVybiAkU2hhcmVkTlRGU09iamVjdA0KDQogICAgfQ0KDQogIA0KICAgaWYoLW5vdCAkaXNPU1ZlcnNpb25Payl7DQogICANCiAgICAgICRTdGRFcnJBcnIgPSBAKCkNCiAgICAgICRzdGRPdXRBcnIgPSBAKCkNCiAgICAgICRTdGRFcnIgPSBOZXctT2JqZWN0IFBTT2JqZWN0IC1Qcm9wZXJ0eSBAewkJICAgICAgIA0KCQkgICAgICAgICAgICAgICAgICBpZCA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID0gICJQb3dlclNoZWxsIFNjcmlwdCBzdXBwb3J0cyBXaW5kb3cgNywgV2luZG93IDIwMDhSMiBhbmQgaGlnaGVyIHZlcnNpb24gb3BlcmF0aW5nIHN5c3RlbSI7DQogICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbCA9ICJQb3dlclNoZWxsIFNjcmlwdCBzdXBwb3J0cyBXaW5kb3cgNywgV2luZG93IDIwMDhSMiBhbmQgaGlnaGVyIHZlcnNpb24gb3BlcmF0aW5nIHN5c3RlbSI7DQoNCiAgICAgICAgICAgICAgIH0NCiAgICAgICAgIA0KICAgICAkU3RkRXJyQXJyICs9ICRTdGRFcnINCiAgICAgJHN0ZE91dEFyciArPSAoIlBvd2VyU2hlbGwgU2NyaXB0IHN1cHBvcnRzIFdpbmRvdyA3LCBXaW5kb3cgMjAwOFIyIGFuZCBoaWdoZXIgdmVyc2lvbiBvcGVyYXRpbmcgc3lzdGVtIikNCiAgICANCiAgICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBTdGF0dXMgLVZhbHVlICJmYWlsIiANCiAgICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBDb2RlIC1WYWx1ZSAxDQogICAgICRTaGFyZWROVEZTT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgc3RkZXJyIC1WYWx1ZSAkU3RkRXJyQXJyDQogICAgICRTaGFyZWROVEZTT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgUmVzdWx0IC1WYWx1ZSAiUG93ZXJTaGVsbCBTY3JpcHQgc3VwcG9ydHMgV2luZG93IDcsIFdpbmRvdyAyMDA4UjIgYW5kIGhpZ2hlciB2ZXJzaW9uIG9wZXJhdGluZyBzeXN0ZW0iDQogICAgICRTaGFyZWROVEZTT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgc3Rkb3V0IC1WYWx1ZSAgJHN0ZE91dEFyciAgIA0KDQogICAgIHJldHVybiAkU2hhcmVkTlRGU09iamVjdA0KDQogICAgfQ0KDQogICAjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgIyBWZXJpZnkgVU5DIG9yIGFic29sdXRlIHBhdGgNCiAgICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCiAgIGlmKChbdXJpXSRQYXRoKS5Jc1VuYyl7DQogICAgDQogICAgICNXcml0ZS1Ib3N0ICJVTkMgUGF0aCA6ICQoJFBhdGgpIg0KDQogICAgIGlmKC1ub3QoJFBhdGggLW1hdGNoICdeKFxcKShcXFtBLVphLXowLTktXy5dKyl7MiwyfShcXD8pJCcpKXsNCiAgICAgICAgDQogICAgICAgICAgJFN0ZEVyckFyciA9IEAoKQ0KICAgICAgICAgICRzdGRPdXRBcnIgPSBAKCkNCiAgICAgICAgICAkU3RkRXJyID0gTmV3LU9iamVjdCBQU09iamVjdCAtUHJvcGVydHkgQHsJCSAgICAgICANCgkJICAgICAgICAgICAgICAgICAgICAgIGlkID0gMDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID0gICJFbnRlcmVkIHBhdGggaXMgbm90IGNvcnJlY3QiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsID0gIlRoZSBwYXRoIHNob3VsZCBiZSBvZiB0aGUgZm9ybSBcXHNlcnZlclxzaGFyZSINCg0KICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgIA0KICAgICAgICAgJFN0ZEVyckFyciArPSAkU3RkRXJyDQogICAgICAgICAkc3RkT3V0QXJyICs9ICgiRW50ZXJlZCBwYXRoIGlzIG5vdCBjb3JyZWN0IikNCiAgICANCiAgICAgICAgICRTaGFyZWROVEZTT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgU3RhdHVzIC1WYWx1ZSAiZmFpbCIgDQogICAgICAgICAkU2hhcmVkTlRGU09iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIENvZGUgLVZhbHVlIDENCiAgICAgICAgICRTaGFyZWROVEZTT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgc3RkZXJyIC1WYWx1ZSAkU3RkRXJyQXJyDQogICAgICAgICAkU2hhcmVkTlRGU09iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIFJlc3VsdCAtVmFsdWUgIkVudGVyZWQgcGF0aCBpcyBub3QgY29ycmVjdCINCiAgICAgICAgICRTaGFyZWROVEZTT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgc3Rkb3V0IC1WYWx1ZSAgJHN0ZE91dEFyciAgIA0KDQogICAgICAgICByZXR1cm4gJFNoYXJlZE5URlNPYmplY3QNCiAgICAgfSANCiAgIH1lbHNlew0KDQogICAgIA0KICAgICAgJGRyaXZlbGV0dGVyID0gJFBhdGguU3BsaXQoJzonKVswXSANCiAgICAgICREcml2ZUxldHRlclJhbmdlID0gJ0EtWicNCiAgICAgICRkcml2ZWxldHRlciA9ICRkcml2ZWxldHRlci5Ub1VwcGVyKCk7DQoNCiAgICAgIGlmICgtbm90KCRkcml2ZWxldHRlciAtbm90bWF0Y2ggJ1tBLVpdKC1bQS1aXSk/JykgLWFuZCAoJGRyaXZlbGV0dGVyLkxlbmd0aCAtbmUgMSkpIHsNCg0KICAgICAgICAgICAgICAkU3RkRXJyQXJyID0gQCgpDQogICAgICAgICAgICAgICRzdGRPdXRBcnIgPSBAKCkNCiAgICAgICAgICAgICAgJFN0ZEVyciA9IE5ldy1PYmplY3QgUFNPYmplY3QgLVByb3BlcnR5IEB7CQkgICAgICAgDQoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSAwOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID0gICJFbnRlcmVkIGRyaXZlIG5vdCBjb3JyZWN0IjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWwgPSAiRHJpdmUgTGV0dGVyICRkcml2ZWxldHRlciBpcyBub3QgaW4gdGhlIHJhbmdlIG9mIEEtWiINCg0KICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICANCiAgICAgICAgICAgICAkU3RkRXJyQXJyICs9ICRTdGRFcnINCiAgICAgICAgICAgICAkc3RkT3V0QXJyICs9ICgiRW50ZXJlZCBkcml2ZSBub3QgY29ycmVjdCIpDQogICAgDQogICAgICAgICAgICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBTdGF0dXMgLVZhbHVlICJmYWlsIiANCiAgICAgICAgICAgICAkU2hhcmVkTlRGU09iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIENvZGUgLVZhbHVlIDENCiAgICAgICAgICAgICAkU2hhcmVkTlRGU09iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIHN0ZGVyciAtVmFsdWUgJFN0ZEVyckFycg0KICAgICAgICAgICAgICRTaGFyZWROVEZTT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgUmVzdWx0IC1WYWx1ZSAiRW50ZXJlZCBkcml2ZSBub3QgY29ycmVjdCINCiAgICAgICAgICAgICAkU2hhcmVkTlRGU09iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIHN0ZG91dCAtVmFsdWUgICRzdGRPdXRBcnIgICANCg0KICAgICAgICAgICAgIHJldHVybiAkU2hhcmVkTlRGU09iamVjdA0KICAgICAgfQ0KICAgICAgICAgDQogICAgICAkSXNEcml2ZUxldHRlckV4aXN0ID0gR2V0LVdtaU9iamVjdCAtQ2xhc3MgV2luMzJfbG9naWNhbGRpc2t8IFdoZXJlLU9iamVjdHsgJF8uRGV2aWNlSUQgLWVxICgkZHJpdmVsZXR0ZXIrJzonKSB9DQoNCiAgICAgIGlmKC1ub3QgJElzRHJpdmVMZXR0ZXJFeGlzdCl7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICRTdGRFcnJBcnIgPSBAKCkNCiAgICAgICAgICAgICAgJHN0ZE91dEFyciA9IEAoKQ0KDQogICAgICAgICAgICAgICRTdGRFcnIgPSBOZXctT2JqZWN0IFBTT2JqZWN0IC1Qcm9wZXJ0eSBAewkJICAgICAgIA0KCQkgICAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gMDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA9ICAiRXJyb3I6IFZvbHVtZSAkZHJpdmVsZXR0ZXIgZG9lcyBub3QgZXhpc3QiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbCA9ICJMaXN0IG9mIGFsbCBhdmFsaWFibGUgZHJpdmVzIg0KDQogICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICANCiAgICAgICAgICAgICAkRHJpdmVzID0gR2V0LVdtaU9iamVjdCAtQ2xhc3MgV2luMzJfbG9naWNhbGRpc2sgfCBzZWxlY3QgRGV2aWNlSUQsVm9sdW1lTmFtZQ0KDQogICAgICAgICAgICAgJFNoYXJlZE5URlNPYmogPSAgTmV3LU9iamVjdCBwc29iamVjdA0KICAgICAgICAgICAgICRTaGFyZWROVEZTT2JqIHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgRHJpdmVzIC1WYWx1ZSAkRHJpdmVzDQogICAgICAgICANCiAgICAgICAgICAgICAkU3RkRXJyQXJyICs9ICRTdGRFcnINCiAgICAgICAgICAgICAkc3RkT3V0QXJyICs9ICgiRXJyb3I6IFZvbHVtZSAkZHJpdmVsZXR0ZXIgZG9lcyBub3QgZXhpc3QiKQ0KICAgIA0KICAgICAgICAgICAgICRTaGFyZWROVEZTT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgU3RhdHVzIC1WYWx1ZSAiZmFpbCIgDQogICAgICAgICAgICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBDb2RlIC1WYWx1ZSAxDQogICAgICAgICAgICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBzdGRlcnIgLVZhbHVlICRTdGRFcnJBcnINCiAgICAgICAgICAgICAkU2hhcmVkTlRGU09iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIFJlc3VsdCAtVmFsdWUgIkVycm9yOiBWb2x1bWUgJGRyaXZlbGV0dGVyIGRvZXMgbm90IGV4aXN0Ig0KICAgICAgICAgICAgICRTaGFyZWROVEZTT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgc3Rkb3V0IC1WYWx1ZSAgJHN0ZE91dEFycg0KICAgICAgICAgICAgICRTaGFyZWROVEZTT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgZGF0YU9iamVjdCAtVmFsdWUgJFNoYXJlZE5URlNPYmogICAgIA0KDQogICAgICAgICAgICAgcmV0dXJuICRTaGFyZWROVEZTT2JqZWN0DQoNCiAgICAgICB9DQoNCiAgICAgIGlmKC1ub3QgKFRlc3QtUGF0aCAtUGF0aCAkUGF0aCkpew0KDQogICAgICAgIA0KICAgICAgICAgICAgICAkU3RkRXJyQXJyID0gQCgpDQogICAgICAgICAgICAgICRzdGRPdXRBcnIgPSBAKCkNCg0KICAgICAgICAgICAgICAkU3RkRXJyID0gTmV3LU9iamVjdCBQU09iamVjdCAtUHJvcGVydHkgQHsJCSAgICAgICANCgkJICAgICAgICAgICAgICAgICAgICAgICAgICBpZCA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSAgIkluY29ycmVjdCBQYXRoIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWwgPSAiRXJyb3I6IEZvbGRlciAkUGF0aCBkb2VzIG5vdCBleGlzdCI7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICRTdGRFcnJBcnIgKz0gJFN0ZEVycg0KICAgICAgICAgICAgICRzdGRPdXRBcnIgKz0gKCJJbmNvcnJlY3QgUGF0aCIpDQogICAgDQogICAgICAgICAgICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBTdGF0dXMgLVZhbHVlICJmYWlsIiANCiAgICAgICAgICAgICAkU2hhcmVkTlRGU09iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIENvZGUgLVZhbHVlIDENCiAgICAgICAgICAgICAkU2hhcmVkTlRGU09iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIHN0ZGVyciAtVmFsdWUgJFN0ZEVyckFycg0KICAgICAgICAgICAgICRTaGFyZWROVEZTT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgUmVzdWx0IC1WYWx1ZSAiRXJyb3I6IEluY29ycmVjdCBQYXRoIg0KICAgICAgICAgICAgICRTaGFyZWROVEZTT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgc3Rkb3V0IC1WYWx1ZSAgJHN0ZE91dEFycg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgcmV0dXJuICRTaGFyZWROVEZTT2JqZWN0DQoNCiAgICAgIH0NCiAgIH0gIyBlbmQgcGF0aA0KICAgDQogICRDb21wID0gIiINCiAgDQogIGlmKChbdXJpXSRQYXRoKS5Jc1VuYyl7DQogICAgICR1cmkgPSBuZXctb2JqZWN0IFN5c3RlbS5VcmkoJFBhdGgpDQogICAgICRIb3N0TmFtZSA9ICR1cmkuaG9zdA0KICAgICAkQ29tcCA9ICRIb3N0TmFtZQ0KDQogIH1FbHNlew0KDQogICAgJENvbXAgPSAkZW52OkNPTVBVVEVSTkFNRQ0KICB9DQogIA0KICBpZigkU2hhcmVQZXJtaXNzaW9ucyAtYW5kICROVEZTUGVybWlzc2lvbnMpew0KDQogICAgJFNoYXJlZCA9ICBHZXQtU2hhcmVQZXJtaXNzaW9ucyAtY29tcHV0ZXIgJENvbXANCiAgICAkTlRGUyA9IEdldC1TaGFyZU5URlNQZXJtaXNzaW9ucyAtY29tcHV0ZXIgJENvbXANCg0KICAgICRTaGFyZWRPYmplY3QgPSAgTmV3LU9iamVjdCBwc29iamVjdA0KICAgICRTaGFyZWRPYmplY3QgfCAgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgU2hhcmVkUGVybWlzc2lvbnMgLVZhbHVlICRTaGFyZWQNCiAgICAkU2hhcmVkT2JqZWN0IHwgIEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIE5URlNQZXJtaXNzaW9ucyAtVmFsdWUgJE5URlMNCg0KICAgICRhcnJTdHIgPSBAKCkNCg0KICAgICRhcnJTdHIgKz0gJFNoYXJlZA0KICAgICRhcnJTdHIgKz0gJE5URlMNCiAgICAgICAgICAgICAgDQogICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBTdGF0dXMgLVZhbHVlICJTdWNjZXNzIiANCiAgICAkU2hhcmVkTlRGU09iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIENvZGUgLVZhbHVlIDANCiAgICAkU2hhcmVkTlRGU09iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIFJlc3VsdCAtVmFsdWUgIlN1Y2Nlc3MgOiBTaGFyZWQgYW5kIE5URlMgcGVybWlzc2lvbnMiICANCiAgICAkU2hhcmVkTlRGU09iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIHN0ZG91dCAtVmFsdWUgICRhcnJTdHINCiAgICAkU2hhcmVkTlRGU09iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIGRhdGFPYmplY3QgLVZhbHVlICRTaGFyZWRPYmplY3QNCiAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgcmV0dXJuICRTaGFyZWROVEZTT2JqZWN0DQoNCiAgfQ0KDQogIGlmKCRTaGFyZVBlcm1pc3Npb25zIC1hbmQgKC1ub3QgJE5URlNQZXJtaXNzaW9ucykpew0KICAgIA0KICAgICRTaGFyZWQgPSBHZXQtU2hhcmVQZXJtaXNzaW9ucyAtY29tcHV0ZXIgJENvbXANCg0KICAgICRTaGFyZWRPYmplY3QgPSAgTmV3LU9iamVjdCBwc29iamVjdA0KICAgICRTaGFyZWRPYmplY3QgfCAgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgU2hhcmVkUGVybWlzc2lvbnMgLVZhbHVlICRTaGFyZWQNCiAgIA0KICAgICRhcnJTdHIgPSBAKCkNCg0KICAgICRhcnJTdHIgKz0gJFNoYXJlZA0KICAgIA0KICAgICRTaGFyZWROVEZTT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgU3RhdHVzIC1WYWx1ZSAiU3VjY2VzcyIgDQogICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBDb2RlIC1WYWx1ZSAwDQogICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBSZXN1bHQgLVZhbHVlICJTdWNjZXNzIDogU2hhcmVkIHBlcm1pc3Npb25zIiAgDQogICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBzdGRvdXQgLVZhbHVlICAkYXJyU3RyDQogICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBkYXRhT2JqZWN0IC1WYWx1ZSAkU2hhcmVkT2JqZWN0DQogICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgIHJldHVybiAkU2hhcmVkTlRGU09iamVjdA0KICB9DQoNCiAgaWYoKCAtbm90ICRTaGFyZVBlcm1pc3Npb25zKSAtYW5kICROVEZTUGVybWlzc2lvbnMpew0KICAgIA0KICAgIA0KICAgICROVEZTID0gR2V0LVNoYXJlTlRGU1Blcm1pc3Npb25zIC1jb21wdXRlciAkQ29tcA0KDQogICAgJFNoYXJlZE9iamVjdCA9ICBOZXctT2JqZWN0IHBzb2JqZWN0DQogICAgJFNoYXJlZE9iamVjdCB8ICBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBOVEZTUGVybWlzc2lvbnMgLVZhbHVlICROVEZTDQogICANCiAgICAkYXJyU3RyID0gQCgpDQoNCiAgICAkYXJyU3RyICs9ICROVEZTDQogICAgDQogICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBTdGF0dXMgLVZhbHVlICJTdWNjZXNzIiANCiAgICAkU2hhcmVkTlRGU09iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIENvZGUgLVZhbHVlIDANCiAgICAkU2hhcmVkTlRGU09iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIFJlc3VsdCAtVmFsdWUgIlN1Y2Nlc3MgOiBOVEZTIHBlcm1pc3Npb25zIiAgDQogICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBzdGRvdXQgLVZhbHVlICAkYXJyU3RyDQogICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBkYXRhT2JqZWN0IC1WYWx1ZSAkU2hhcmVkT2JqZWN0DQogICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgIHJldHVybiAkU2hhcmVkTlRGU09iamVjdA0KICB9DQoNCiAgaWYoKC1ub3QgJFNoYXJlUGVybWlzc2lvbnMpIC1hbmQgKC1ub3QgJE5URlNQZXJtaXNzaW9ucykpew0KICAgIA0KICAgICAgICAgICAgICAkU3RkRXJyQXJyID0gQCgpDQogICAgICAgICAgICAgICRzdGRPdXRBcnIgPSBAKCkNCg0KICAgICAgICAgICAgICAkU3RkRXJyID0gTmV3LU9iamVjdCBQU09iamVjdCAtUHJvcGVydHkgQHsJCSAgICAgICANCgkJICAgICAgICAgICAgICAgICAgICAgICAgICBpZCA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSAgIlBsZWFzZSBzZWxlY3QgYXRsZWFzdCBvbmUgcGVybWlzc2lvbiI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsID0gIlBsZWFzZSBzZWxlY3QgYXRsZWFzdCBvbmUgcGVybWlzc2lvbiI7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICRTdGRFcnJBcnIgKz0gJFN0ZEVycg0KICAgICAgICAgICAgICRzdGRPdXRBcnIgKz0gKCJQbGVhc2Ugc2VsZWN0IGF0bGVhc3Qgb25lIHBlcm1pc3Npb24iKQ0KICAgIA0KICAgICAgICAgICAgICRTaGFyZWROVEZTT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgU3RhdHVzIC1WYWx1ZSAiZmFpbCIgDQogICAgICAgICAgICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBDb2RlIC1WYWx1ZSAxDQogICAgICAgICAgICAgJFNoYXJlZE5URlNPYmplY3QgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBzdGRlcnIgLVZhbHVlICRTdGRFcnJBcnINCiAgICAgICAgICAgICAkU2hhcmVkTlRGU09iamVjdCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIFJlc3VsdCAtVmFsdWUgIkVycm9yOiBQbGVhc2Ugc2VsZWN0IGF0bGVhc3Qgb25lIHBlcm1pc3Npb24iOw0KICAgICAgICAgICAgICRTaGFyZWROVEZTT2JqZWN0IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgc3Rkb3V0IC1WYWx1ZSAgJHN0ZE91dEFycg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgcmV0dXJuICRTaGFyZWROVEZTT2JqZWN0ICAgIA0KICB9DQoNCn0NCg0KDQppZigkUFNWZXJzaW9uVGFibGUuUFNWZXJzaW9uLk1ham9yIC1lcSAyKXsNCg0KICAgIEdldC1zaGFyZU5URlNQZXJtaXNzaW9uIHwgIENvbnZlcnRUby1KU09OUDINCg0KfWVsc2V7DQoNCiAgICBHZXQtc2hhcmVOVEZTUGVybWlzc2lvbiB8ICBDb252ZXJ0VG8tSnNvbiAtRGVwdGggMTANCn0=",
"jsonSchema":{
"type":"object",
"properties":{
	"Path":{
      "type":"string",
      "title":"Enter Path",
      "minLength":1
    },
	"Username":{
      "type":"string",
      "title":"Enter user name",
      "minLength":1
    },
	"SharePermissions":{
      "type":"boolean",
      "title":"Select SharePermissions",
      "minLength":1
    },
	"NTFSPermissions":{
      "type":"boolean",
      "title":"Select NTFSPermissions",
      "minLength":1
    }
 },
  "required":[
  "Path"
  ],
  "additionalProperties": false
},
"uiSchema":{
"Path":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"Username":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"SharePermissions":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"NTFSPermissions":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
  "ui:order":["Path", "Username","SharePermissions", "NTFSPermissions"]
},
"isHDScript":true}
