{"id":"e8f57e90-7fe2-11e9-9ad5-00155d130b89","partnerId":"00000000-0000-0000-0000-000000000000","category":["HD Automation"],"description":"Local Port Checks","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":300,"failureMessage":"Executed with errors","successMessage":"Successfully Executed","internal":false,"name":"Local Port Checks","tags":["Windows 7","Windows 10"],"sequence":true,"content":"",
"jsonSchema":{
  "type":"object",
"properties":{
	"Specific_port":{
      "type":"string",
      "title":"Specific port - example: 80",
      "minLength":1
    },
	"Multiple_port":{
      "type":"string",
      "title":"Multiple port - example: 80,82",
      "minLength":1
	},  
	"Port_range":{
      "type":"boolean",
      "title":"Multiple port - example: 80-90",
      "minLength":1
	},
	"All_Format":{
      "type":"boolean",
      "title":"All Format - example: 80-90,80",
      "minLength":1
	}
},	
  "required":[
  ],
  "additionalProperties": false
},
"uiSchema":{
"Specific_port":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"Multiple_port":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"Port_range":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"All_Format":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },  
  "ui:order":["Specific_port", "Multiple_port", "Port_range", "All_Format"]
},
"isHDScript":true}
