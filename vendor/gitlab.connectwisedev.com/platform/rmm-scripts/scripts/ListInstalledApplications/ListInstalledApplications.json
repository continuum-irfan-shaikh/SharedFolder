{"id":"343aa629-7d4e-11e9-92b6-00155d130b89","partnerId":"00000000-0000-0000-0000-000000000000","category":["HD Automation"],"description":"List Installed Applications","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":300,"failureMessage":"Executed with errors","successMessage":"Executed Successfully","internal":false,"name":"ListInstalledApplications","tags":["Windows 7","Windows 10"],"sequence":true,"content":"",
"jsonSchema":{
"type":"object",
"properties":{
	"ApplicationName":{
      "type":"string",
      "title":"Enter Application Name",
      "minLength":1
    }
 },
  "required":[
  ],
  "additionalProperties": false
},
"uiSchema":{
"ApplicationName":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
  "ui:order":["ApplicationName"]
},
"isHDScript":true}