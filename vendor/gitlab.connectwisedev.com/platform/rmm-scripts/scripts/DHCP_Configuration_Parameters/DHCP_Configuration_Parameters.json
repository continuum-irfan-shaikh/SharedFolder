{"id":"2c96844f-7cae-11e9-adbf-00155d130b89","partnerId":"00000000-0000-0000-0000-000000000000","category":[ "HD Automation" ],"description":"Pull DHCP Adapter information","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":300,"failureMessage":"Executed with errors","successMessage":"Successfully Executed","internal":false,"name":"DHCP Adapter information","tags":["Windows 7","Windows 10"],"sequence":true,"content":"",
 "jsonSchema":"",
"uiSchema":"",
"isHDScript":true}
