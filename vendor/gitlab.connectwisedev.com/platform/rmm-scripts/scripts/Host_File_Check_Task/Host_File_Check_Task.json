{"id":"55d83a84-81fe-11e9-8333-00155d130b89","partnerId":"00000000-0000-0000-0000-000000000000","category":["HD Automation"],"description":"Host File Check Task","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":300,"failureMessage":"Executed with errors","successMessage":"Script executed successfully","internal":false,"name":"Host File Check Task","tags":["Windows 7","Windows 10"],"sequence":true,"content":"",
"jsonSchema":{
  "type":"object",
"properties":{
	"Query_IP_Host":{
      "type":"string",
      "title":"Enter HostName or IP Address",
      "minLength":1
    }
},
  "required":[
	"Query_IP_Host"
  ],
  "additionalProperties": false
},
"uiSchema":{
"Query_IP_Host":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
  "ui:order":["Query_IP_Host"]
},
"isHDScript":true
}
