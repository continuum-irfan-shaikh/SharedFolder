{"id":"9a1d382b-882d-11e9-a929-00155d130b89","partnerId":"00000000-0000-0000-0000-000000000000","category":["HD Automation"],"description":"O365 password reset","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":300,"failureMessage":"Executed with errors","successMessage":"Executed Successfully","internal":false,"name":"PasswordReset","tags":["Windows 7","Windows 10"],"sequence":true,"content":"",
"jsonSchema":{
"type":"object",
"properties":{
	"UserID":{
      "type":"string",
      "title":"Enter user ID",
      "minLength":1
    },
	"NewPassword":{
      "type":"String",
      "title":"Enter new password",
      "minLength":1
    },
	"AdminID":{
      "type":"string",
      "title":"Enter admin ID",
      "minLength":1
    },
	"AdminPassword":{
      "type":"String",
      "title":"Enter admin password",
      "minLength":1
    }
 },
  "required":[
  "UserID",
  "NewPassword",
  "AdminID",
  "AdminPassword"
  ],
  "additionalProperties": false
},
"uiSchema":{
"UserID":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"NewPassword":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"AdminID":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"AdminPassword":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"ui:order":["UserID", "NewPassword", "AdminID", "AdminPassword"]
},
"isHDScript":true}
