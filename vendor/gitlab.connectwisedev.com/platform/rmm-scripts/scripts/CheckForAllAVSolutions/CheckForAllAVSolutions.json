{"id":"da9e3481-7d4d-11e9-a738-00155d130b89","partnerId":"00000000-0000-0000-0000-000000000000","category":["HD Automation"],"description":"Check For All Anti Virus Solutions","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":300,"failureMessage":"Executed with errors","successMessage":"Successfully Executed","internal":false,"name":"CheckForAllAVSolutions","tags":["Windows 7","Windows 10"],"sequence":true,"content":"","jsonSchema":"","uiSchema":"","isHDScript":true}
