{"id":"79f2e46b-86f1-11e9-a2b0-00155d130b01","partnerId":"00000000-0000-0000-0000-000000000000","category":["Application"],"description":"This task updates Chrome to accept cookies from logmein.com. The change initiates once Chrome restarts; users receive a final request to re-download the client app when launching LogMeIn remote control.","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":600,"failureMessage":"Executed with errors","successMessage":"Excecuted successfully","internal":false,"name":"Update Chrome to accept LogMeIn cookies","tags":["Windows 7","Windows 10"],"sequence":true,"content":"IyAkTWV0aG9kID0gIkNsb3NlIENocm9tZSIKCmlmICgkZW52OlBST0NFU1NPUl9BUkNISVRFVzY0MzIgLWVxICJBTUQ2NCIpIHsKICAgIGlmICgkbXlJbnZvY2F0aW9uLkxpbmUpIHsKICAgICAgICAmIiRlbnY6c3lzdGVtcm9vdFxzeXNuYXRpdmVcd2luZG93c3Bvd2Vyc2hlbGxcdjEuMFxwb3dlcnNoZWxsLmV4ZSIgLU5vbkludGVyYWN0aXZlIC1Ob1Byb2ZpbGUgJG15SW52b2NhdGlvbi5MaW5lCiAgICB9CiAgICBlbHNlIHsKICAgICAgICAmIiRlbnY6c3lzdGVtcm9vdFxzeXNuYXRpdmVcd2luZG93c3Bvd2Vyc2hlbGxcdjEuMFxwb3dlcnNoZWxsLmV4ZSIgLU5vbkludGVyYWN0aXZlIC1Ob1Byb2ZpbGUgLWZpbGUgIiQoJG15SW52b2NhdGlvbi5JbnZvY2F0aW9uTmFtZSkiICRhcmdzCiAgICB9CiAgICBleGl0ICRsYXN0ZXhpdGNvZGUKfQppZiAoISRNZXRob2QpIHsgCiAgICBXcml0ZS1vdXRwdXQgIlVwZGF0ZSBvcHRpb24gbm90IHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IGEgdGFzayBvcHRpb24gYmVmb3JlIGV4ZWN1dGluZyBhZ2Fpbi4iCiAgICBFeGl0Cn0KCiRTY3JpcHRibG9jayA9IHsKICAgIHRyeSB7CiAgICAgICAgJEFsbG93RXhjZXB0aW9uID0gJ2xvZ21laW4uY29tJwogICAgICAgICRFcnJvckFjdGlvblByZWZlcmVuY2UgPSAnU3RvcCcKICAgICAgICAkUHJvZmlsZXMgPSBHZXQtV21pT2JqZWN0IHdpbjMyX3VzZXJwcm9maWxlIHwgV2hlcmUtT2JqZWN0IHsgJF8uc2lkIC1saWtlICJTLTEtNS0yMSoiIH0gfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBsb2NhbHBhdGgKICAgICAgICAkUHJvZ3JhbUZpbGVzID0gaWYgKCRlbnY6UFJPQ0VTU09SX0FSQ0hJVEVDVFVSRSAtZXEgJ0FNRDY0JykgeyAke0VudjpQcm9ncmFtRmlsZXMoeDg2KX0gfSBlbHNlIHsgJEVudjpQcm9ncmFtRmlsZXMgfQogICAgICAgICREYXRlVGltZU5vdyA9IChHZXQtRGF0ZSkudG9zdHJpbmcoJ2RkLU1NTS15eXl5X0hILW1tLXNzJykKICAgICAgICAkTG9nRGlyID0gIkM6XFdpbmRvd3NcTG9nc1xMTUlDb29raWVFeGNlcHRpb25cJERhdGVUaW1lTm93IgogICAgICAgICRMb2dGaWxlID0gSm9pbi1QYXRoICRMb2dEaXIgIkxvZ18kRGF0ZVRpbWVOb3cubG9nIgogICAgICAgICRDaHJvbWVNYXN0ZXJQcmVmZXJlbmNlQmFja3VwRmlsZSA9IEpvaW4tUGF0aCAkTG9nRGlyICJtYXN0ZXJfcHJlZmVyZW5jZXNfQkFDS1VQXyREYXRlVGltZU5vdyIKICAgICAgICAkQ2hyb21lTWFzdGVyUHJlZmVyZW5jZUZpbGUgPSAiJFByb2dyYW1GaWxlc1xHb29nbGVcQ2hyb21lXEFwcGxpY2F0aW9uXG1hc3Rlcl9wcmVmZXJlbmNlcyIKICAgICAgICAkUGFkZGluZyA9ICgkUHJvZmlsZXMgfCBGb3JFYWNoLU9iamVjdCB7IChTcGxpdC1QYXRoICRfIC1MZWFmKS5MZW5ndGggfSB8IE1lYXN1cmUtT2JqZWN0IC1NYXhpbXVtKS5NYXhpbXVtCiAgICAgICAgJFRleHRJbmZvID0gKEdldC1DdWx0dXJlKS5UZXh0SW5mbwogICAgICAgIEZ1bmN0aW9uIFdyaXRlLUxvZyB7CiAgICAgICAgICAgIFBhcmFtKAogICAgICAgICAgICAgICAgJE1lc3NhZ2UsCiAgICAgICAgICAgICAgICBbU3dpdGNoXSAkV3JpdGVPdXRwdXQsCiAgICAgICAgICAgICAgICBbU3dpdGNoXSAkQWRkTmV3TGluZQogICAgICAgICAgICApIAogICAgICAgIAogICAgICAgICAgICAkTG9nID0gIlt7MH1dIHsxfSIgLWYgW2RhdGV0aW1lXTo6Tm93ICwgJE1lc3NhZ2UKICAgICAgICAgICAgJExvZyB8IE91dC1GaWxlICRMb2dGaWxlIC1BcHBlbmQKICAgICAgICAgICAgaWYgKCRXcml0ZU91dHB1dCkgewogICAgICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICRNZXNzYWdlCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gQ29udmVydFRvLUpzb24oW3Bzb2JqZWN0XSAkaXRlbSkgewogICAgICAgICAgICBbU3lzdGVtLlJlZmxlY3Rpb24uQXNzZW1ibHldOjpMb2FkV2l0aFBhcnRpYWxOYW1lKCJTeXN0ZW0uV2ViLkV4dGVuc2lvbnMiKSB8IG91dC1udWxsCiAgICAgICAgICAgICRzZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5XZWIuU2NyaXB0LlNlcmlhbGl6YXRpb24uSmF2YVNjcmlwdFNlcmlhbGl6ZXIgCiAgICAgICAgICAgICRoYXNoZWQgPSBAeyB9CiAgICAgICAgICAgICRpdGVtLnBzb2JqZWN0LnByb3BlcnRpZXMgfCBGb3JFYWNoLU9iamVjdCB7ICRoYXNoZWQuKCRfLk5hbWUpID0gJF8uVmFsdWUgfQogICAgICAgICAgICB3cml0ZS1vdXRwdXQgJHNlci5TZXJpYWxpemUoJGhhc2hlZCkgCiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIENvbnZlcnRGcm9tLUpzb24oW3N0cmluZ10gJGpzb24pIHsKICAgICAgICAgICAgW1N5c3RlbS5SZWZsZWN0aW9uLkFzc2VtYmx5XTo6TG9hZFdpdGhQYXJ0aWFsTmFtZSgiU3lzdGVtLldlYi5FeHRlbnNpb25zIikgfCBvdXQtbnVsbAogICAgICAgICAgICAkc2VyID0gTmV3LU9iamVjdCBTeXN0ZW0uV2ViLlNjcmlwdC5TZXJpYWxpemF0aW9uLkphdmFTY3JpcHRTZXJpYWxpemVyCiAgICAgICAgICAgIHdyaXRlLW91dHB1dCAobmV3LW9iamVjdCAtdHlwZSBQU09iamVjdCAtcHJvcGVydHkgJHNlci5EZXNlcmlhbGl6ZU9iamVjdCgkanNvbikpCiAgICAgICAgfQogICAgICAgIEZ1bmN0aW9uIEFkZEFsbG93Q29va2llRXhjZXB0aW9uIHsKICAgICAgICAgICAgcGFyYW0oCiAgICAgICAgICAgICAgICAkUGF0aCwKICAgICAgICAgICAgICAgICRVUkwKICAgICAgICAgICAgKQogICAgICAgIAogICAgICAgICAgICAkTGFzdE1vZGlmaWVkID0gW2ludDY0XSgoW2RhdGV0aW1lXTo6VXRjTm93KSAtIChnZXQtZGF0ZSAiMS8xLzE5NzAiKSkuVG90YWxNaWxsaXNlY29uZHMKICAgICAgICAgICAgJE9iaiA9IENvbnZlcnRGcm9tLUpzb24gKEdldC1Db250ZW50ICRQYXRoKQogICAgICAgIAogICAgICAgICAgICBpZiAoISRPYmoucHJvZmlsZSkgewogICAgICAgICAgICAgICAgJERpY3Rpb25hcnkgPSBOZXctT2JqZWN0ICdTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5EaWN0aW9uYXJ5W3N0cmluZyxsb25nXScKICAgICAgICAgICAgICAgICREaWN0aW9uYXJ5LmFkZCgnbGFzdF9tb2RpZmllZCcsICRMYXN0TW9kaWZpZWQpCiAgICAgICAgICAgICAgICAkRGljdGlvbmFyeS5hZGQoJ3NldHRpbmcnLCAxKQogICAgICAgICAgICAKICAgICAgICAgICAgICAgICRjb29raWVzID0gTmV3LU9iamVjdCAnU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuRGljdGlvbmFyeVtTeXN0ZW0uc3RyaW5nLFN5c3RlbS5PYmplY3RdJwogICAgICAgICAgICAgICAgJGNvb2tpZXMuYWRkKCIkVVJMLCoiLCAkZGljdGlvbmFyeSkKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkZXhjZXB0aW9ucyA9IE5ldy1PYmplY3QgJ1N5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnlbU3lzdGVtLnN0cmluZyxTeXN0ZW0uT2JqZWN0XScKICAgICAgICAgICAgICAgICRleGNlcHRpb25zLmFkZCgnY29va2llcycsICRjb29raWVzKQogICAgICAgICAgICAKICAgICAgICAgICAgICAgICRjb250ZW50X3NldHRpbmdzID0gTmV3LU9iamVjdCAnU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuRGljdGlvbmFyeVtTeXN0ZW0uc3RyaW5nLFN5c3RlbS5PYmplY3RdJwogICAgICAgICAgICAgICAgJGNvbnRlbnRfc2V0dGluZ3MuYWRkKCdleGNlcHRpb25zJywgJGV4Y2VwdGlvbnMpCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJHByZWZfcHJvZmlsZSA9IE5ldy1PYmplY3QgJ1N5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnlbU3lzdGVtLnN0cmluZyxTeXN0ZW0uT2JqZWN0XScKICAgICAgICAgICAgICAgICRwcmVmX3Byb2ZpbGUuYWRkKCdjb250ZW50X3NldHRpbmdzJywgJGNvbnRlbnRfc2V0dGluZ3MpCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJE9iaiB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1uYW1lICJwcm9maWxlIiAtVmFsdWUgKFtIYXNodGFibGVdJHByZWZfcHJvZmlsZSkKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCEkb2JqLnByb2ZpbGUuY29udGVudF9zZXR0aW5ncykgewogICAgICAgICAgICAgICAgJERpY3Rpb25hcnkgPSBOZXctT2JqZWN0ICdTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5EaWN0aW9uYXJ5W3N0cmluZyxsb25nXScKICAgICAgICAgICAgICAgICREaWN0aW9uYXJ5LmFkZCgnbGFzdF9tb2RpZmllZCcsICRMYXN0TW9kaWZpZWQpCiAgICAgICAgICAgICAgICAkRGljdGlvbmFyeS5hZGQoJ3NldHRpbmcnLCAxKQogICAgICAgICAgICAKICAgICAgICAgICAgICAgICRjb29raWVzID0gTmV3LU9iamVjdCAnU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuRGljdGlvbmFyeVtTeXN0ZW0uc3RyaW5nLFN5c3RlbS5PYmplY3RdJwogICAgICAgICAgICAgICAgJGNvb2tpZXMuYWRkKCIkVVJMLCoiLCAkZGljdGlvbmFyeSkKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkZXhjZXB0aW9ucyA9IE5ldy1PYmplY3QgJ1N5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnlbU3lzdGVtLnN0cmluZyxTeXN0ZW0uT2JqZWN0XScKICAgICAgICAgICAgICAgICRleGNlcHRpb25zLmFkZCgnY29va2llcycsICRjb29raWVzKQogICAgICAgICAgICAKICAgICAgICAgICAgICAgICRjb250ZW50X3NldHRpbmdzID0gTmV3LU9iamVjdCAnU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuRGljdGlvbmFyeVtTeXN0ZW0uc3RyaW5nLFN5c3RlbS5PYmplY3RdJwogICAgICAgICAgICAgICAgJGNvbnRlbnRfc2V0dGluZ3MuYWRkKCdleGNlcHRpb25zJywgJGV4Y2VwdGlvbnMpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICRvYmoucHJvZmlsZS5hZGQoJ2NvbnRlbnRfc2V0dGluZ3MnLCAkY29udGVudF9zZXR0aW5ncykKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCEkb2JqLnByb2ZpbGUuY29udGVudF9zZXR0aW5ncy5leGNlcHRpb25zKSB7CiAgICAgICAgICAgICAgICAkRGljdGlvbmFyeSA9IE5ldy1PYmplY3QgJ1N5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnlbc3RyaW5nLGxvbmddJwogICAgICAgICAgICAgICAgJERpY3Rpb25hcnkuYWRkKCdsYXN0X21vZGlmaWVkJywgJExhc3RNb2RpZmllZCkKICAgICAgICAgICAgICAgICREaWN0aW9uYXJ5LmFkZCgnc2V0dGluZycsIDEpCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJGNvb2tpZXMgPSBOZXctT2JqZWN0ICdTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5EaWN0aW9uYXJ5W1N5c3RlbS5zdHJpbmcsU3lzdGVtLk9iamVjdF0nCiAgICAgICAgICAgICAgICAkY29va2llcy5hZGQoIiRVUkwsKiIsICRkaWN0aW9uYXJ5KQogICAgICAgICAgICAKICAgICAgICAgICAgICAgICRleGNlcHRpb25zID0gTmV3LU9iamVjdCAnU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuRGljdGlvbmFyeVtTeXN0ZW0uc3RyaW5nLFN5c3RlbS5PYmplY3RdJwogICAgICAgICAgICAgICAgJGV4Y2VwdGlvbnMuYWRkKCdjb29raWVzJywgJGNvb2tpZXMpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICRvYmoucHJvZmlsZS5jb250ZW50X3NldHRpbmdzLmFkZCgnZXhjZXB0aW9ucycsICRleGNlcHRpb25zKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2VpZiAoISRvYmoucHJvZmlsZS5jb250ZW50X3NldHRpbmdzLmV4Y2VwdGlvbnMuY29va2llcykgewogICAgICAgICAgICAgICAgJERpY3Rpb25hcnkgPSBOZXctT2JqZWN0ICdTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5EaWN0aW9uYXJ5W3N0cmluZyxsb25nXScKICAgICAgICAgICAgICAgICREaWN0aW9uYXJ5LmFkZCgnbGFzdF9tb2RpZmllZCcsICRMYXN0TW9kaWZpZWQpCiAgICAgICAgICAgICAgICAkRGljdGlvbmFyeS5hZGQoJ3NldHRpbmcnLCAxKQogICAgICAgICAgICAKICAgICAgICAgICAgICAgICRjb29raWVzID0gTmV3LU9iamVjdCAnU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuRGljdGlvbmFyeVtTeXN0ZW0uc3RyaW5nLFN5c3RlbS5PYmplY3RdJwogICAgICAgICAgICAgICAgJGNvb2tpZXMuYWRkKCIkVVJMLCoiLCAkZGljdGlvbmFyeSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJG9iai5wcm9maWxlLmNvbnRlbnRfc2V0dGluZ3MuZXhjZXB0aW9ucy5hZGQoJ2Nvb2tpZXMnLCAkY29va2llcykKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYgKCEoJG9iai5wcm9maWxlLmNvbnRlbnRfc2V0dGluZ3MuZXhjZXB0aW9ucy5jb29raWVzLiIkVVJMLCoiKSkgewogICAgICAgICAgICAgICAgJERpY3Rpb25hcnkgPSBOZXctT2JqZWN0ICdTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5EaWN0aW9uYXJ5W3N0cmluZyxsb25nXScKICAgICAgICAgICAgICAgICREaWN0aW9uYXJ5LmFkZCgnbGFzdF9tb2RpZmllZCcsICRMYXN0TW9kaWZpZWQpCiAgICAgICAgICAgICAgICAkRGljdGlvbmFyeS5hZGQoJ3NldHRpbmcnLCAxKQogICAgICAgICAgICAgICAgJG9iai5wcm9maWxlLmNvbnRlbnRfc2V0dGluZ3MuZXhjZXB0aW9ucy5jb29raWVzLmFkZCgiJFVSTCwqIiwgJGRpY3Rpb25hcnkpCiAgICAgICAgICAgIH0KICAgICAgICAKICAgICAgICAgICAgcmV0dXJuICRPYmoKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gVmFsaWRhdGVDb29raWVFeGNlcHRpb24gewogICAgICAgICAgICBwYXJhbSAoCiAgICAgICAgICAgICAgICAkUGF0aCwKICAgICAgICAgICAgICAgICRVUkwKICAgICAgICAgICAgKQogICAgICAgICAgICByZXR1cm4gKChDb252ZXJ0RnJvbS1Kc29uIChHZXQtQ29udGVudCAkUGF0aCkpLnByb2ZpbGUuY29udGVudF9zZXR0aW5ncy5leGNlcHRpb25zKS5jb29raWVzLiIkVVJMLCoiCiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmICghW0lPLkRpcmVjdG9yeV06OkV4aXN0cygkTG9nRGlyKSkgeyBbSU8uRGlyZWN0b3J5XTo6Q3JlYXRlRGlyZWN0b3J5KCRMb2dEaXIpIHwgT3V0LU51bGwgfSAjIGNyZWF0ZSBmb2xkZXIgaWYgdGhhdCBkb2Vzbid0IGV4aXN0cwogICAgICAgIAogICAgICAgICNyZWdpb24gQ0hST01FX1NFVFRJTkdTCiAgICAgICAgV3JpdGUtTG9nICJbQkVHSU46IFNURVAtMV0gTG9vcCBhbmQgQWRkIGNvb2tpZSBleGNlcHRpb24gKCRBbGxvd0V4Y2VwdGlvbikgdG8gYWxsIENocm9tZSB1c2VyIHByb2ZpbGVzIgogICAgICAgIFdyaXRlLU91dHB1dCAiYG5BZGRpbmcgY29va2llIGV4Y2VwdGlvbiB0byBmb2xsb3dpbmcgQ2hyb21lIHVzZXIgcHJvZmlsZXM6YG4iCiAgICAgICAgIyBhZGRpbmcgZ29vZ2xlIGNocm9tZSBjb29raWUgZXhjZXB0aW9uIG9uIGVhY2ggdXNlciBwcm9maWxlCiAgICAgICAgZm9yZWFjaCAoJEl0ZW0gaW4gJFByb2ZpbGVzKSB7IAogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJFVzZXJuYW1lID0gJFRleHRJbmZvLlRvVGl0bGVDYXNlKCQoU3BsaXQtUGF0aCAkSXRlbSAtTGVhZikpCiAgICAgICAgICAgICAgICAkQ2hyb21lVXNlclByZWZlcmVuY2VCYWNrdXBGaWxlID0gSm9pbi1QYXRoICRMb2dEaXIgIiQoU3BsaXQtUGF0aCAkVXNlcm5hbWUgLUxlYWYpX3ByZWZlcmVuY2VzX0JBQ0tVUF8kRGF0ZVRpbWVOb3ciCiAgICAgICAgICAgICAgICAkTG9jYWxBcHBEYXRhID0gIiRJdGVtXEFwcERhdGFcTG9jYWwiCiAgICAgICAgICAgICAgICAkUGF0aCA9ICIkTG9jYWxBcHBEYXRhXEdvb2dsZVxDaHJvbWVcVXNlciBEYXRhXERlZmF1bHRccHJlZmVyZW5jZXMiCiAgICAgICAgICAgICAgICBXcml0ZS1Mb2cgIltBVFRFTVBUXSBBZGQgY29va2llIGV4Y2VwdGlvbiB0byB0aGUgdXNlciBwcm9maWxlIFskSXRlbV0iCiAgICAgICAgICAgICAgICBpZiAoVGVzdC1QYXRoICRQYXRoKSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtTG9nICJbQ09OVElOVUVdIFByZWZlcmVuY2VzIGZpbGUgcGF0aCBmb3VuZCBmb3IgdGhlIHVzZXIgWyRQYXRoXSIKICAgICAgICAgICAgICAgICAgICAkTGFzdE1vZGlmaWVkID0gW2ludDY0XSgoW2RhdGV0aW1lXTo6VXRjTm93KSAtIChnZXQtZGF0ZSAiMS8xLzE5NzAiKSkuVG90YWxNaWxsaXNlY29uZHMKICAgICAgICAgICAgICAgICAgICBpZiAoVmFsaWRhdGVDb29raWVFeGNlcHRpb24gLVBhdGggJFBhdGggLVVSTCAkQWxsb3dFeGNlcHRpb24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtTG9nICJbU0tJUF0gQ29va2llIGV4Y2VwdGlvbiBpbiBVc2VyIFByZWZlcmVuY2VzIGFscmVhZHkgZXhpc3RzIFskQWxsb3dFeGNlcHRpb24sKl0iCiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLU91dHB1dCAkKCJ7MH0gOiBBbHJlYWR5IGV4aXN0cyIgLWYgJFVzZXJuYW1lLlBhZFJpZ2h0KCRQYWRkaW5nLCAnICcpKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsgIAogICAgICAgICAgICAgICAgICAgICAgICAkVXNlclByZWZlcmVuY2VzT2JqZWN0ID0gQWRkQWxsb3dDb29raWVFeGNlcHRpb24gLVBhdGggJFBhdGggLVVSTCAkQWxsb3dFeGNlcHRpb24KICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtTG9nICJbSU5GT10gQmFja3VwIENocm9tZSBVc2VyIFByZWZlcmVuY2VzIEZpbGUgYXQgbG9jYXRpb24gWyRDaHJvbWVVc2VyUHJlZmVyZW5jZUJhY2t1cEZpbGVdIgogICAgICAgICAgICAgICAgICAgICAgICBDb3B5LUl0ZW0gJFBhdGggJENocm9tZVVzZXJQcmVmZXJlbmNlQmFja3VwRmlsZQogICAgICAgICAgICAgICAgICAgICAgICBDb252ZXJ0VG8tSnNvbiAkVXNlclByZWZlcmVuY2VzT2JqZWN0IHwgT3V0LUZpbGUgJFBhdGggLUVuY29kaW5nIFVURjgKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgJFZhbGlkYXRlU2V0dGluZyA9IFZhbGlkYXRlQ29va2llRXhjZXB0aW9uIC1QYXRoICRQYXRoIC1VUkwgJEFsbG93RXhjZXB0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkVmFsaWRhdGVTZXR0aW5nLnNldHRpbmcgLWVxIDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLUxvZyAiW1NVQ0NFU1NdIEFkZCBDb29raWUgZXhjZXB0aW9uIFskQWxsb3dFeGNlcHRpb24sKl0gb24gdXNlciBwcm9maWxlIFskSXRlbV0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1PdXRwdXQgJCgiezB9IDogU3VjY2VzcyIgLWYgJFVzZXJuYW1lLlBhZFJpZ2h0KCRQYWRkaW5nLCAnICcpKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtTG9nICJbRkFJTFVSRV0gQWRkIENvb2tpZSBleGNlcHRpb24gWyRBbGxvd0V4Y2VwdGlvbiwqXSBvbiB1c2VyIHByb2ZpbGUgWyRJdGVtXSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLU91dHB1dCAkKCJ7MH0gOiBGYWlsdXJlIiAtZiAkVXNlcm5hbWUuUGFkUmlnaHQoJFBhZGRpbmcsICcgJykpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1Mb2cgIltTS0lQXSBQcmVmZXJlbmNlIGZpbGUgbm90IGZvdW5kIFskUGF0aF0iCiAgICAgICAgICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICQoInswfSA6IENvb2tpZXMgY29uZmlndXJhdGlvbiBmaWxlIG5vdCBmb3VuZC4gUGxlYXNlIGNoZWNrIG1heSBiZSBDaHJvbWUgaXMgbm90IGluc3RhbGxlZC4iIC1mICRVc2VybmFtZS5QYWRSaWdodCgkUGFkZGluZywgJyAnKSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1Mb2cgIltFUlJPUl0gJCgkXy5leGNlcHRpb24ubWVzc2FnZSkiCiAgICAgICAgICAgICAgICBXcml0ZS1Mb2cgIltGQUlMVVJFXSBVbmFibGUgdG8gYWRkIENvb2tpZSBleGNlcHRpb24gWyRBbGxvd0V4Y2VwdGlvbiwqXSBvbiB1c2VyIHByb2ZpbGUgWyRJdGVtXSIKICAgICAgICAgICAgICAgIFdyaXRlLU91dHB1dCAkKCJ7MH0gOiBGYWlsdXJlIiAtZiAkVXNlcm5hbWUuUGFkUmlnaHQoJFBhZGRpbmcsICcgJykpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgfQogICAgICAgIAogICAgICAgIFdyaXRlLUxvZyAiW0VORDogU1RFUC0xXSBMb29wIGFuZCBBZGQgY29va2llIGV4Y2VwdGlvbiAoJEFsbG93RXhjZXB0aW9uKSB0byBhbGwgQ2hyb21lIHVzZXIgcHJvZmlsZXMiCiAgICAgICAgCiAgICAgICAgIyBhZGRpbmcgZ29vZ2xlIGNocm9tZSBjb29raWUgZXhjZXB0aW9uIG9uIG1hc3RlciBwcmVmZXJlbmNlIHNldHRpbmdzIGZvciBhbGwgbmV3IHByb2ZpbGVzIHRoYXQgd291bGQgYmUgY3JlYXRlZAogICAgICAgIAogICAgICAgIFdyaXRlLUxvZyAiW0JFR0lOOiBTVEVQLTJdIEFkZCBjb29raWUgZXhjZXB0aW9uICgkQWxsb3dFeGNlcHRpb24pIHRvIENocm9tZSdzIE1hc3RlciBQcmVmZXJlbmNlcyBGaWxlIgogICAgICAgIAogICAgICAgIFRyeSB7CiAgICAgICAgICAgIGlmIChUZXN0LVBhdGggJENocm9tZU1hc3RlclByZWZlcmVuY2VGaWxlKSB7CiAgICAgICAgICAgICAgICBpZiAoVmFsaWRhdGVDb29raWVFeGNlcHRpb24gLVBhdGggJENocm9tZU1hc3RlclByZWZlcmVuY2VGaWxlIC1VUkwgJEFsbG93RXhjZXB0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtTG9nICJbU0tJUF0gQ29va2llIGV4Y2VwdGlvbiBpbiAnTWFzdGVyIFByZWZlcmVuY2VzJyBhbHJlYWR5IGV4aXN0cyBbJEFsbG93RXhjZXB0aW9uLCpdIgogICAgICAgICAgICAgICAgICAgICMgV3JpdGUtb3V0cHV0ICJgbkFkZGluZyBjb29raWUgdG8gQ2hyb21lJ3MgTWFzdGVyIFByZWZlcmVuY2VzIDogQWxyZWFkeSBleGlzdHMiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1Mb2cgIltBVFRFTVBUXSBBZGQgQ29va2llIGV4Y2VwdGlvbiBpbiAnTWFzdGVyIFByZWZlcmVuY2VzJyBbJEFsbG93RXhjZXB0aW9uLCpdIgogICAgICAgICAgICAgICAgICAgICRDaHJvbWVQcmVmZXJlbmNlc09iamVjdCA9IEFkZEFsbG93Q29va2llRXhjZXB0aW9uIC1QYXRoICRDaHJvbWVNYXN0ZXJQcmVmZXJlbmNlRmlsZSAtVVJMICRBbGxvd0V4Y2VwdGlvbgogICAgICAgICAgICAgICAgICAgIFdyaXRlLUxvZyAiW0lORk9dIEJhY2t1cCBDaHJvbWUgTWFzdGVyIEZpbGUgYXQgbG9jYXRpb24gWyRDaHJvbWVNYXN0ZXJQcmVmZXJlbmNlQmFja3VwRmlsZV0iCiAgICAgICAgICAgICAgICAgICAgQ29weS1JdGVtICIkQ2hyb21lTWFzdGVyUHJlZmVyZW5jZUZpbGUiICIkQ2hyb21lTWFzdGVyUHJlZmVyZW5jZUJhY2t1cEZpbGUiCiAgICAgICAgICAgICAgICAgICAgQ29udmVydHRvLUpzb24gJENocm9tZVByZWZlcmVuY2VzT2JqZWN0IHwgT3V0LUZpbGUgJENocm9tZU1hc3RlclByZWZlcmVuY2VGaWxlIC1FbmNvZGluZyBVVEY4CiAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyB2YWxpZGF0ZSBzZXR0aW5nIGFmdGVyIHVwZGF0aW5nIGl0CiAgICAgICAgICAgICAgICAgICAgJFZhbGlkYXRlU2V0dGluZyA9IFZhbGlkYXRlQ29va2llRXhjZXB0aW9uIC1QYXRoICRDaHJvbWVNYXN0ZXJQcmVmZXJlbmNlRmlsZSAtVVJMICRBbGxvd0V4Y2VwdGlvbgogICAgICAgICAgICAgICAgICAgIGlmICgkVmFsaWRhdGVTZXR0aW5nLnNldHRpbmcgLWVxIDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtTG9nICJbU1VDQ0VTU10gQ29va2llIGV4Y2VwdGlvbiBpbiAnTWFzdGVyIFByZWZlcmVuY2VzJyBleGlzdHMgWyRBbGxvd0V4Y2VwdGlvbiwqXSIKICAgICAgICAgICAgICAgICAgICAgICAgIyBXcml0ZS1vdXRwdXQgImBuQWRkaW5nIGNvb2tpZSB0byBDaHJvbWUncyBNYXN0ZXIgUHJlZmVyZW5jZXMgOiBTdWNjZXNzIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtTG9nICJbRkFJTFVSRV0gQ29va2llIGV4Y2VwdGlvbiBpbiAnTWFzdGVyIFByZWZlcmVuY2VzJyBkb2Vzbid0IGV4aXN0cyBbJEFsbG93RXhjZXB0aW9uLCpdIgogICAgICAgICAgICAgICAgICAgICAgICAjIFdyaXRlLW91dHB1dCAiYG5BZGRpbmcgY29va2llIHRvIENocm9tZSdzIE1hc3RlciBQcmVmZXJlbmNlcyA6IEZhaWx1cmUiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgV3JpdGUtTG9nICJbU0tJUF0gUHJlZmVyZW5jZSBmaWxlIG5vdCBmb3VuZCBbJENocm9tZU1hc3RlclByZWZlcmVuY2VGaWxlXSIKICAgICAgICAgICAgICAgICMgV3JpdGUtb3V0cHV0ICJgbkFkZGluZyBjb29raWUgdG8gQ2hyb21lJ3MgTWFzdGVyIFByZWZlcmVuY2VzIDogUHJlZmVyZW5jZXMgZmlsZSBub3QgZm91bmQiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1Mb2cgIltFUlJPUl0gJCgkXy5leGNlcHRpb24ubWVzc2FnZSkiCiAgICAgICAgICAgIFdyaXRlLUxvZyAiW0ZBSUxVUkVdIFVuYWJsZSB0byBhZGQgQ29va2llIGV4Y2VwdGlvbiBpbiAnTWFzdGVyIFByZWZlcmVuY2VzJyBbJEFsbG93RXhjZXB0aW9uLCpdIgogICAgICAgICAgICAjIFdyaXRlLW91dHB1dCAiYG5BZGRpbmcgY29va2llIHRvIENocm9tZSdzIE1hc3RlciBQcmVmZXJlbmNlcyA6IEZhaWx1cmUiCiAgICAgICAgfQogICAgICAgIFdyaXRlLUxvZyAiW0VORDogU1RFUDJdIEFkZCBjb29raWUgZXhjZXB0aW9uICgkQWxsb3dFeGNlcHRpb24pIHRvIENocm9tZSdzIE1hc3RlciBQcmVmZXJlbmNlcyBGaWxlIgogICAgICAgICNlbmRyZWdpb24gQ0hST01FX1NFVFRJTkdTCiAgICB9CiAgICBjYXRjaCB7CiAgICAgICAgIyBOT1RFOiBpbnRlbnRpb25hbGx5IGF2b2lkIHByaW50aW5nIGVycm9ycyBoZXJlICAgIAogICAgfQogICAgZmluYWxseSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgU3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggUG93ZXJTaGVsbC5leGUgLUFyZ3VtZW50TGlzdCAnc2NodGFza3MuZXhlIC9EZWxldGUgL1ROIExvZ01lSW5Db29raWVFeGNlcHRpb25PblJlc3RhcnQgL0YnIC1XaW5kb3dTdHlsZSBIaWRkZW4KICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAjIE5PVEU6IG5vIGFjdGlvbiByZXF1aXJlZCwgYXMgdGhpcyB0cnkuLmNhdGNoIGJsb2NrIGlzIHRvIHN1cHByZXNzIGFueSBlcnJvcnMgZHVlIHRvIG5vbi1leGlzdGVudCB0YXNrCiAgICAgICAgfQogICAgfQp9CgokRXhjZXB0aW9uSXNTZXQgPSBAKCkKJEV4Y2VwdGlvbklzTm90U2V0ID0gQCgpCiROb1ByZWZlcmVuY2VGaWxlID0gQCgpCiRBbGxvd0V4Y2VwdGlvbiA9ICdsb2dtZWluLmNvbScKJEVycm9yQWN0aW9uUHJlZmVyZW5jZSA9ICdTdG9wJwokUHJvZmlsZXMgPSBHZXQtV21pT2JqZWN0IHdpbjMyX3VzZXJwcm9maWxlIHwgV2hlcmUtT2JqZWN0IHsgJF8uc2lkIC1saWtlICJTLTEtNS0yMSoiIH0gfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBsb2NhbHBhdGgKJFByb2dyYW1GaWxlcyA9IGlmICgkZW52OlBST0NFU1NPUl9BUkNISVRFQ1RVUkUgLWVxICdBTUQ2NCcpIHsgJHtFbnY6UHJvZ3JhbUZpbGVzKHg4Nil9IH0gZWxzZSB7ICRFbnY6UHJvZ3JhbUZpbGVzIH0KJFBhZGRpbmcgPSAoJFByb2ZpbGVzIHwgRm9yRWFjaC1PYmplY3QgeyAoU3BsaXQtUGF0aCAkXyAtTGVhZikuTGVuZ3RoIH0gfCBNZWFzdXJlLU9iamVjdCAtTWF4aW11bSkuTWF4aW11bQokVGV4dEluZm8gPSAoR2V0LUN1bHR1cmUpLlRleHRJbmZvCmlmICghW0lPLkRpcmVjdG9yeV06OkV4aXN0cygnQzpcV2luZG93c1xMb2dzXExNSUNvb2tpZUV4Y2VwdGlvblwnKSkgeyBbSU8uRGlyZWN0b3J5XTo6Q3JlYXRlRGlyZWN0b3J5KCdDOlxXaW5kb3dzXExvZ3NcTE1JQ29va2llRXhjZXB0aW9uXCcpIHwgT3V0LU51bGwgfSAjIGNyZWF0ZSBmb2xkZXIgaWYgdGhhdCBkb2Vzbid0IGV4aXN0cwogICAgCmZ1bmN0aW9uIENvbnZlcnRGcm9tLUpzb24oW3N0cmluZ10gJGpzb24pIHsKICAgIFtTeXN0ZW0uUmVmbGVjdGlvbi5Bc3NlbWJseV06OkxvYWRXaXRoUGFydGlhbE5hbWUoIlN5c3RlbS5XZWIuRXh0ZW5zaW9ucyIpIHwgb3V0LW51bGwKICAgICRzZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5XZWIuU2NyaXB0LlNlcmlhbGl6YXRpb24uSmF2YVNjcmlwdFNlcmlhbGl6ZXIKICAgIHdyaXRlLW91dHB1dCAobmV3LW9iamVjdCAtdHlwZSBQU09iamVjdCAtcHJvcGVydHkgJHNlci5EZXNlcmlhbGl6ZU9iamVjdCgkanNvbikpCn0KICAgIApmdW5jdGlvbiBWYWxpZGF0ZUNvb2tpZUV4Y2VwdGlvbiAoJFBhdGgsICRVUkwpIHsKICAgIHJldHVybiAoKENvbnZlcnRGcm9tLUpzb24gKEdldC1Db250ZW50ICRQYXRoKSkucHJvZmlsZS5jb250ZW50X3NldHRpbmdzLmV4Y2VwdGlvbnMpLmNvb2tpZXMuIiRVUkwsKiIKfQoKCiNpZiAoVGVzdC1QYXRoICIkUHJvZ3JhbUZpbGVzXEdvb2dsZVxDaHJvbWVcQXBwbGljYXRpb25cY2hyb21lLmV4ZSIpIHsKJG91dHB1dCA9IGZvcmVhY2ggKCRJdGVtIGluICRQcm9maWxlcykgeyAKICAgIHRyeSB7CiAgICAgICAgJFVzZXJuYW1lID0gJFRleHRJbmZvLlRvVGl0bGVDYXNlKCQoU3BsaXQtUGF0aCAkSXRlbSAtTGVhZikpCiAgICAgICAgJExvY2FsQXBwRGF0YSA9ICIkSXRlbVxBcHBEYXRhXExvY2FsIgogICAgICAgICRQYXRoID0gIiRMb2NhbEFwcERhdGFcR29vZ2xlXENocm9tZVxVc2VyIERhdGFcRGVmYXVsdFxwcmVmZXJlbmNlcyIKICAgICAgICBpZiAoVGVzdC1QYXRoICRQYXRoKSB7CiAgICAgICAgICAgIGlmIChWYWxpZGF0ZUNvb2tpZUV4Y2VwdGlvbiAtUGF0aCAkUGF0aCAtVVJMICRBbGxvd0V4Y2VwdGlvbikgewogICAgICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICQoInswfSA6IEFscmVhZHkgZXhpc3RzIiAtZiAkVXNlcm5hbWUuUGFkUmlnaHQoJFBhZGRpbmcsICcgJykpCiAgICAgICAgICAgICAgICAkRXhjZXB0aW9uSXNTZXQgKz0gJFVzZXJuYW1lCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7ICAKICAgICAgICAgICAgICAgIFdyaXRlLU91dHB1dCAkKCJ7MH0gOiBOb3QgU2V0IiAtZiAkVXNlcm5hbWUuUGFkUmlnaHQoJFBhZGRpbmcsICcgJykpCiAgICAgICAgICAgICAgICAkRXhjZXB0aW9uSXNOb3RTZXQgKz0gJFVzZXJuYW1lCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIFdyaXRlLU91dHB1dCAkKCJ7MH0gOiBDb29raWVzIGNvbmZpZ3VyYXRpb24gZmlsZSBub3QgZm91bmQuIFBsZWFzZSBjaGVjayBtYXkgYmUgQ2hyb21lIGlzIG5vdCBpbnN0YWxsZWQuIiAtZiAkVXNlcm5hbWUuUGFkUmlnaHQoJFBhZGRpbmcsICcgJykpCiAgICAgICAgICAgICRFeGNlcHRpb25Jc05vdFNldCArPSAkVXNlcm5hbWUKICAgICAgICB9CiAgICB9CiAgICBjYXRjaCB7CiAgICAgICAgV3JpdGUtT3V0cHV0ICQoInswfSA6IEZhaWx1cmUiIC1mICRVc2VybmFtZS5QYWRSaWdodCgkUGFkZGluZywgJyAnKSkKICAgIH0KfQogICAgCmlmICgkRXhjZXB0aW9uSXNOb3RTZXQuQ291bnQgLWdlIDEpIHsKICAgICMgZXhlY3V0ZSBzY3JpcHQgb25seSBpZgogICAgV3JpdGUtT3V0cHV0ICgiYG5Gb3VuZCB7MH0gb3V0IG9mIHsxfSB7Mn0iIC1mICRFeGNlcHRpb25Jc05vdFNldC5jb3VudCwgKCRFeGNlcHRpb25Jc1NldCArICRFeGNlcHRpb25Jc05vdFNldCkuY291bnQsICJ1c2VyIHByb2ZpbGVzIHRoYXQgZG9uJ3QgaGF2ZSB0aGUgY29va2llIGV4Y2VwdGlvbi4iKSAKCiAgICBzd2l0Y2ggKCRNZXRob2QpIHsKICAgICAgICAnU3lzdGVtIFJlYm9vdCcgewogICAgICAgICAgICAiYG4iCiAgICAgICAgICAgICRvdXRwdXQKICAgICAgICAgICAgJFNjcmlwdEZpbGUgPSAiQzpcV2luZG93c1xMb2dzXExNSUNvb2tpZUV4Y2VwdGlvblxTY3JpcHQucHMxIgogICAgICAgICAgICAkU2NyaXB0YmxvY2suVG9TdHJpbmcoKSB8IE91dC1GaWxlICRTY3JpcHRGaWxlIC1Gb3JjZQogICAgICAgICAgICAkVGFzayA9ICJQb3dlclNoZWxsLmV4ZSAtZXhlY3V0aW9ucG9saWN5IGJ5cGFzcyAtTm9FeGl0IC1ub3Byb2ZpbGUgLVdpbmRvd1N0eWxlIEhpZGRlbiAtY29tbWFuZCAnLiAkU2NyaXB0RmlsZSciCiAgICAgICAgICAgIHNjaHRhc2tzLmV4ZSAvY3JlYXRlIC9zICQoJGVudjpDT01QVVRFUk5BTUUpIC90biBMb2dNZUluQ29va2llRXhjZXB0aW9uT25SZXN0YXJ0IC9zYyBPTlNUQVJUIC90ciAkVGFzayAvcnUgJ1N5c3RlbScgL0YgfCBPdXQtTnVsbAogICAgICAgICAgICBzY2h0YXNrcy5leGUgL0VuZCAvVE4gTG9nTWVJbkNvb2tpZUV4Y2VwdGlvbk9uUmVzdGFydCB8IE91dC1OdWxsCiAgICAgICAgICAgIAogICAgICAgICAgICAjIHNwZWNpYWwgY29uZGl0aW9uIHRvIGhhbmRsZSB0aGUgY2FzZSBpZiAtIHByZWZlcmVuY2UgZmlsZSBpcyBub3QgZm91bmQgYW5kIG9ubHkgb25lIHByb2ZpbGUgZXhpc3RzIG9uIHRoZSBzeXN0ZW0KICAgICAgICAgICAgIyB0aGVuIG5vIG5lZWQgdG8gc2NoZWR1bGUgdGhlIHNjcmlwdCBmb3IgbmV4dCBzeXN0ZW0gcmVib290LCBhbmQgc2NyaXB0IGNhbiBleGl0CiAgICAgICAgICAgICRDb3VudCA9ICRvdXRwdXR8IE1lYXN1cmUtT2JqZWN0IHxTZWxlY3QtT2JqZWN0IC1leHBhbmQgY291bnQKICAgICAgICAgICAgaWYoJENvdW50IC1lcSAxKXsKICAgICAgICAgICAgICAgIGlmKCRPdXRwdXQgLWxpa2UgIipQbGVhc2UgY2hlY2sgbWF5IGJlIENocm9tZSBpcyBub3QgaW5zdGFsbGVkLioiKXsKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiAoSW52b2tlLUV4cHJlc3Npb24gIlNjaHRhc2tzLmV4ZSAvUXVlcnkgL1ROIExvZ01lSW5Db29raWVFeGNlcHRpb25PblJlc3RhcnQgL3YiKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1PdXRwdXQgImBuU3VjY2Vzc2Z1bGx5IHNjaGVkdWxlZCB0aGUgc2NyaXB0IHRvIGFkZCBjb29raWUgZXhjZXB0aW9uIGF0IG5leHQgc3lzdGVtIHJlYm9vdC4iCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBXcml0ZS1PdXRwdXQgImBuRmFpbGVkIHRvIHNjaGVkdWxlIHRoZSBzY3JpcHQiCiAgICAgICAgICAgIH0gICAgCiAgICAgICAgfQogICAgICAgICdDbG9zZSBDaHJvbWUnIHsKICAgICAgICAgICAgR2V0LVByb2Nlc3MgQ2hyb21lIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwgU3RvcC1Qcm9jZXNzIC1Gb3JjZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQogICAgICAgICAgICBTdGFydC1TbGVlcCAtcyA1CiAgICAgICAgICAgIGlmICghKEdldC1Qcm9jZXNzIENocm9tZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSkpIHsKICAgICAgICAgICAgICAgICYgJFNjcmlwdGJsb2NrCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBXcml0ZS1PdXRwdXQgJ0Nocm9tZS5leGUgaXMgc3RpbGwgcnVubmluZyBvbiB0aGUgc3lzdGVtLiBGYWlsZWQgdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLicKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCn0KZWxzZSB7CiAgICAjIGV4aXQgbm8gYWN0aW9uIGlzIHJlcXVpcmVkCiAgICBXcml0ZS1PdXRwdXQgKCJgblN1bW1hcnk6IHswfSBvdXQgb2YgezF9IHsyfSIgLWYgJEV4Y2VwdGlvbklzU2V0LmNvdW50LCAoJEV4Y2VwdGlvbklzU2V0ICsgJEV4Y2VwdGlvbklzTm90U2V0KS5jb3VudCwgInVzZXIgcHJvZmlsZXMgaGF2ZSB0aGUgY29va2llIGV4Y2VwdGlvbiwgbm8gYWN0aW9uIGlzIHJlcXVpcmVkLiIpIAp9CiMgfQojIGVsc2UgewojICAgICBXcml0ZS1PdXRwdXQgImBuQ2hyb21lIGlzIG5vdCBpbnN0YWxsZWQgb24gdGhlIHN5c3RlbS4gSGVuY2UgdGhlIHRhc2sgaXMgZXhpdGVkIGFzIG5vIGFjdGlvbiBpcyBuZWVkZWQuIgojIH0gCg==","jsonSchema":{"additionalproperties":false,"properties":{"Method":{"enum":["Close Chrome","System Reboot"],"enumNames":["Task closes Chrome and updates settings to accept LogMeIn cookies.","Task updates Chrome settings to accept LogMeIn cookies upon system restart after next reboot."],"title":"Select a task option to update Chrome:","type":"string"}},"type":"object"},"uiSchema":{"Method":{"classNames":"col-sm-12","ui:help":"Note: Chrome browser must remain closed for up to five minutes to allow the task to successfully complete.","ui:widget":"radio"}},"isHDScript":false}