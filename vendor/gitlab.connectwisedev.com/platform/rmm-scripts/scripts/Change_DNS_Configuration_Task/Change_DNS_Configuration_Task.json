{"id":"1218fddb-81fc-11e9-8163-00155d130b89","partnerId":"00000000-0000-0000-0000-000000000000","category":["HD Automation"],"description":"Change DNS Configuration Task","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":300,"failureMessage":"Executed with errors","successMessage":"Successfully Executed","internal":false,"name":"Change DNS Configuration Task","tags":["Windows 7","Windows 10"],"sequence":true,"content":"",
"jsonSchema":{
  "type":"object",
"properties":{
	"networkName":{
      "type":"string",
      "title":"Enter Network Adapter Name",
      "minLength":1
    },
	"DNS_Server":{
      "type":"string",
      "title":"Enter DNS Server Address -Comma Separated",
      "minLength":1
	},
      "Protocol_IPV4_IPV6": {
        "type": "string",
        "title": "Select Protocol Version",
        "enum": [
          "IPV4",
          "IPV6"
        ]
      }
},	
  "required":[
	"networkName",
	"DNS_Server",	
	"Protocol_IPV4_IPV6"
  ],
  "additionalProperties": false
},
"uiSchema":{
"networkName":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"DNS_Server":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
 "Protocol_IPV4_IPV6":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  }, 
  "ui:order":["networkName","DNS_Server","Protocol_IPV4_IPV6"]
},
"isHDScript":true
}