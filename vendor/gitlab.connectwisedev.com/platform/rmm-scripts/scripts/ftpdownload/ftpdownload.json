{"id":"1e743397-65d3-11e9-a656-00155d130b01","partnerId":"00000000-0000-0000-0000-000000000000","category":["Maintenance"],"description":"Download a specified file/folder (resource) from an FTP server to the local file system","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":3600,"failureMessage":"Executed with errors","successMessage":"Excecuted successfully","internal":false,"name":"FTP download","tags":["Windows 7","Windows 10"],"sequence":true,"content":"","jsonSchema":{"additionalproperties":false,"dependencies":{"PerformPostCheck":{"oneOf":[{"additionalproperties":false,"properties":{"PerformPostCheck":{"enum":[true]},"PostCheckAction":{"enum":["If file exists then Success","If file does not exists then Success","If file exists then Fail","If file does not exists then Fail","If file exists and MD5 checksum matches then Success"],"title":"Action:","type":"string"},"PostCheckFileName":{"title":"File Name:","type":"string"},"PostCheckMD5Checksum":{"title":"MD5 checksum:","type":"string"}},"required":["PostCheckFileName"]},{"properties":{"PerformPostCheck":{"enum":[false]}}}]},"PerformPreCheck":{"oneOf":[{"additionalproperties":false,"dependencies":{"PreCheckType":{"oneOf":[{"properties":{"PreCheckAction":{"enum":["If file exists then Continue","If file does not exists then Continue","If file exists then Abort","If file does not exists then Abort","If file exists and MD5 checksum matches then Continue"],"title":"Action","type":"string"},"PreCheckFileName":{"title":"File Name:","type":"string"},"PreCheckMD5Checksum":{"title":"MD5 checksum:","type":"string"},"PreCheckType":{"enum":["Check if file exists"]}},"required":["PreCheckFileName"]},{"properties":{"PreCheckAction":{"enum":["If key exists then Continue","If key does not exists then Continue","If key exists then Abort","If key not exists then Abort","If key exists and value matches then Continue","If key exists and value does not matches then Continue","If key exists and value matches then Abort","If key exists and value does not matches then Abort","If key exists and value exists and data matches then Continue","If key exists and value exists and data does not matches then Continue","If key exists and value exists and data matches then Abort","If key exists and value exists and data does not matches then Abort"],"title":"Action","type":"string"},"PreCheckData":{"title":"Data:","type":"string"},"PreCheckKey":{"title":"Key:","type":"string"},"PreCheckType":{"enum":["Check if registry information exists"]},"PreCheckValue":{"title":"Value:","type":"string"}},"required":["PreCheckKey"]},{"properties":{"PreCheckAction":{"enum":["If file exists and version equal to specified then Continue","If file exists and version not equal to specified then Continue","If file exists and version higher to specified then Continue","If file exists and version lower to specified then Continue","If file exists and version equal to specified then Abort","If file exists and version not equal to specified then Abort","If file exists and version higher to specified then Abort","If file exists and version lower to specified then Abort","If file does not exists then Abort"],"title":"Action","type":"string"},"PreCheckFileName":{"title":"File Name:","type":"string"},"PreCheckType":{"enum":["Check for file version"]},"PreCheckVersion":{"title":"File Version:","type":"string"}},"required":["PreCheckFileName"]}]}},"properties":{"PerformPreCheck":{"enum":[true]},"PreCheckType":{"enum":["Check if file exists","Check if registry information exists","Check for file version"],"title":"Type","type":"string"}}},{"properties":{"PerformPreCheck":{"enum":[false]}}}]}},"patternproperties":{"^PostCheckAction$":{},"^PostCheckFileName$":{},"^PostCheckMD5Checksum$":{},"^PreCheckAction$":{},"^PreCheckData$":{},"^PreCheckFileName$":{},"^PreCheckKey$":{},"^PreCheckMD5Checksum$":{},"^PreCheckType$":{},"^PreCheckValue$":{},"^PreCheckVersion$":{}},"properties":{"ConnectionPath":{"title":"FTP Connection","type":"string"},"CreateDestinationFolder":{"title":"Create Directory If Required","type":"boolean"},"Destination":{"title":"Destination Directory Path","type":"string"},"Password":{"title":"Password","type":"string"},"PerformPostCheck":{"title":"Perform post-download check","type":"boolean"},"PerformPreCheck":{"title":"Perform pre-download check","type":"boolean"},"Recurse":{"title":"Recursive Download","type":"boolean"},"Source":{"title":"Source Directory Path","type":"string"},"Type":{"enum":["Folder","File"],"enumNames":["Folder","File"],"title":"Select","type":"string"},"Username":{"title":"Username","type":"string"}},"required":["ConnectionPath","Username","Password","Source","Destination","Type"],"title":"FTP Server","type":"object"},"uiSchema":{"ConnectionPath":{"classNames":"col-sm-7","ui:autofocus":true,"ui:help":"e.g. ftp.itsupport247.net or 191.1.4.2"},"CreateDestinationFolder":{"classNames":"col-sm-4","ui:autofocus":true},"Destination":{"classNames":"col-sm-6","ui:autofocus":true},"Password":{"classNames":"col-sm-6","ui:widget":"password"},"PerformPostCheck":{"classNames":"col-sm-12","ui:autofocus":true},"PerformPreCheck":{"classNames":"col-sm-8","ui:autofocus":true},"PostCheckAction":{"classNames":"col-sm-6","ui:autofocus":true,"ui:placeholder":"Select"},"PostCheckFileName":{"classNames":"col-sm-6","ui:autofocus":true},"PostCheckMD5Checksum":{"classNames":"col-sm-8","ui:autofocus":true},"PreCheckAction":{"classNames":"col-sm-8","ui:autofocus":true,"ui:placeholder":"Select"},"PreCheckData":{"classNames":"col-sm-8","ui:autofocus":true},"PreCheckFileName":{"classNames":"col-sm-6","ui:autofocus":true},"PreCheckKey":{"classNames":"col-sm-8","ui:autofocus":true},"PreCheckMD5Checksum":{"classNames":"col-sm-8","ui:autofocus":true},"PreCheckType":{"classNames":"col-sm-7","ui:autofocus":true,"ui:placeholder":"Select"},"PreCheckValue":{"classNames":"col-sm-8","ui:autofocus":true},"PreCheckVersion":{"classNames":"col-sm-7","ui:autofocus":true},"Recurse":{"classNames":"col-sm-6","ui:autofocus":true},"Source":{"classNames":"col-sm-6","ui:autofocus":true},"Type":{"classNames":"col-sm-12","ui:options":{"inline":true},"ui:widget":"radio"},"Username":{"classNames":"col-sm-6","validationSchema":{"notEmpty":"Password","required":["Password"],"type":"requiredFieldsIfNotEmpty"}},"ui:order":["ConnectionPath","Username","Password","Type","Source","Destination","Recurse","CreateDestinationFolder","PerformPreCheck","PreCheckType","PreCheckFileName","PreCheckMD5Checksum","PreCheckKey","PreCheckValue","PreCheckData","PreCheckVersion","PreCheckAction","PerformPostCheck","PostCheckFileName","PostCheckMD5Checksum","PostCheckAction"]},"isHDScript":false}