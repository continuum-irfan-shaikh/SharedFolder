{"id":"26161b49-5a1b-11e9-8366-00155d130b01","partnerId":"00000000-0000-0000-0000-000000000000","category":["Maintenance"],"description":"To set the default search provider option for Internet explorer, select search provider name from the list.","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":300,"failureMessage":"Executed with errors","successMessage":"Excecuted successfully","internal":false,"name":"Define IE default search provider","tags":["Windows 7","Windows 10"],"sequence":true,"content":"","jsonSchema":{"type":"object","properties":{"SearchProvider":{"title":"Search Providers","type":"string","enum":["google","yahoo","bing","wikipedia","graysonline","arena"],"enumNames":["Google","Yahoo","Bing","Wikipedia","Graysonline","Arena"]}},"required":["SearchProvider"],"additionalproperties":false},"uiSchema":{"SearchProvider":{"classNames":"col-sm-4","ui:autofocus":true,"ui:placeholder":"Select search provider"}},"isHDScript":false}
