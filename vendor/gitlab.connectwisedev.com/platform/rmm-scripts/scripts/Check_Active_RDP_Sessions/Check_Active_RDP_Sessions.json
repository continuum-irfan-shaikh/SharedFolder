{"id":"8bc184d7-7fe5-11e9-ba49-00155d130b89","partnerId":"00000000-0000-0000-0000-000000000000","category":["HD Automation"],"description":"Check Active RDP Sessions","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":300,"failureMessage":"Executed with errors","successMessage":"Success Message","internal":false,"name":"Check Active RDP Sessions","tags":["Windows 7","Windows 10"],"sequence":true,"content":"JERhdGExID0gQCgpDQokc3Rkb3V0ID0gQCgpDQoNCiAgICAgICAgICAgICAgICAkcmVzdWx0ID0gcXVlcnkgc2Vzc2lvbiAvc2VydmVyOiRlbnY6Q09NUFVURVJOQU1FDQogICAgICAgICAgICAgICAgJHJvd3MgPSAkcmVzdWx0IC1zcGxpdCAiYG4iICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJHJvdyBpbiAkcm93cykgeyAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAkcmVnZXggPSAiRGlzY3xBY3RpdmUiDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBpZiAoJHJvdyAtTm90TWF0Y2ggInNlcnZpY2VzIiAtYW5kICRyb3cgLW1hdGNoICRyZWdleCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJHNlc3Npb24gPSAoJCgkcm93IC1SZXBsYWNlICcgezIsfScsICcsJykuc3BsaXQoJywnKSkgICAgICAgICAgIA0KDQogICAgICAgICAgICAgICAgICAgIGlmKCRzZXNzaW9uWzNdIC1lcSAnRGlzYycpew0KICAgICAgICAgICAgICAgICAgICAkc2Vzc2lvblszXSA9ICdEaXNjb25uZWN0ZWQnDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICREYXRhID0gbmV3LW9iamVjdCBwc29iamVjdCAtUHJvcGVydHkgQHsNCiAgICAgICAgICAgICAgICAgICAgI0NPTVBVVEVSTkFNRSA9ICRlbnY6Q09NUFVURVJOQU1FDQogICAgICAgICAgICAgICAgICAgICJTZXNzaW9uIE5hbWUiID0gJHNlc3Npb25bMF0NCiAgICAgICAgICAgICAgICAgICAgIlVTRVJOQU1FIiA9ICRzZXNzaW9uWzFdDQogICAgICAgICAgICAgICAgICAgICJTZXNzaW9uSUQiID0gJHNlc3Npb25bMl0NCiAgICAgICAgICAgICAgICAgICAgIlNUQVRFIiA9ICRzZXNzaW9uWzNdDQogICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICREYXRhMSArPSAkRGF0YQ0KDQogICAgICAgICAgICAgICAgJHN0ZG91dCArPSBAKCJTZXNzaW9uIE5hbWU6ICQoJERhdGEuJ1Nlc3Npb24gTmFtZScpYHJgblVTRVJOQU1FOiAkKCREYXRhLlVTRVJOQU1FKWByYG5TZXNzaW9uSUQ6ICQoJERhdGEuU2Vzc2lvbklEKWByYG5TVEFURTogJCgkRGF0YS5TVEFURSkiKQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0NCg0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgQ29udmVydCB0byBKU09OIEZ1bmN0aW9uDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIyMjIyMjIyMjIyMjIyMjIENyZWF0ZSBTVERlcnIgZGF0YQ0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCmZ1bmN0aW9uIEdldF9zdGRlcnINCnsNCnBhcmFtKCRUaXRsZSwkZGV0YWlscykNCiRpbmZvID0gQCgpDQokSUQgPSAwDQoNCiAkZGV0YWlscyB8ICV7DQogICAgJGluZm8gKz0gbmV3LW9iamVjdCBwc29iamVjdCAtUHJvcGVydHkgQHsNCiAgICAiaWQiID0gJElEDQogICAgInRpdGxlIiA9ICRUaXRsZQ0KICAgICJkZXRhaWwiID0gJF8NCiAgICB9DQogICAgJElEKysNCiAgICB9DQoNCnJldHVybiAkaW5mbw0KfQ0KDQpmdW5jdGlvbiBHZXRfRGF0YU9iamVjdA0Kew0KcGFyYW0oJFRpdGxlLCRkZXRhaWxzKQ0KJGluZm8gPSBAKCkNCg0KICRkZXRhaWxzIHwgJXsNCiAgICAkaW5mbyArPSBuZXctb2JqZWN0IHBzb2JqZWN0IC1Qcm9wZXJ0eSBAew0KICAgICJ0aXRsZSIgPSAkVGl0bGUNCiAgICAiU3RhdHVzIiA9ICRfDQogICAgfQ0KICAgICRJRCsrDQogICAgfQ0KcmV0dXJuICRpbmZvDQp9DQoNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQpmdW5jdGlvbiBGb3JtYXRTdHJpbmcgew0KICAgIHBhcmFtKA0KICAgICAgICBbU3RyaW5nXSAkU3RyaW5nKQ0KICAgICMgcmVtb3ZlZDogIy1yZXBsYWNlICcvJywgJ1wvJyBgDQogICAgIyBUaGlzIGlzIHJldHVybmVkIA0KICAgICRTdHJpbmcgLXJlcGxhY2UgJ1xcJywgJ1xcJyAtcmVwbGFjZSAnXG4nLCAnXG4nIGANCiAgICAgICAgLXJlcGxhY2UgJ1x1MDAwOCcsICdcYicgLXJlcGxhY2UgJ1x1MDAwQycsICdcZicgLXJlcGxhY2UgJ1xyJywgJ1xyJyBgDQogICAgICAgIC1yZXBsYWNlICdcdCcsICdcdCcgLXJlcGxhY2UgJyInLCAnXCInDQp9DQoNCmZ1bmN0aW9uIEdldE51bWJlck9yU3RyaW5nIHsNCiAgICBwYXJhbSgNCiAgICAgICAgJElucHV0T2JqZWN0KQ0KICAgIGlmICgkSW5wdXRPYmplY3QgLWlzIFtTeXN0ZW0uQnl0ZV0gLW9yICRJbnB1dE9iamVjdCAtaXMgW1N5c3RlbS5JbnQzMl0gLW9yIGANCiAgICAgICAgKCRlbnY6UFJPQ0VTU09SX0FSQ0hJVEVDVFVSRSAtaW1hdGNoICdeKD86YW1kNjR8aWE2NCkkJyAtYW5kICRJbnB1dE9iamVjdCAtaXMgW1N5c3RlbS5JbnQ2NF0pIC1vciBgDQogICAgICAgICRJbnB1dE9iamVjdCAtaXMgW1N5c3RlbS5EZWNpbWFsXSAtb3IgJElucHV0T2JqZWN0IC1pcyBbU3lzdGVtLkRvdWJsZV0gLW9yIGANCiAgICAgICAgJElucHV0T2JqZWN0IC1pcyBbU3lzdGVtLlNpbmdsZV0gLW9yICRJbnB1dE9iamVjdCAtaXMgW2xvbmddIC1vciBgDQogICAgICAgICgkU2NyaXB0OkNvZXJjZU51bWJlclN0cmluZ3MgLWFuZCAkSW5wdXRPYmplY3QgLW1hdGNoICRTY3JpcHQ6TnVtYmVyUmVnZXgpKSB7DQogICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIkdvdCBhIG51bWJlciBhcyBlbmQgdmFsdWUuIg0KICAgICAgICAiJElucHV0T2JqZWN0Ig0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAiR290IGEgc3RyaW5nIGFzIGVuZCB2YWx1ZS4iDQogICAgICAgICIiIiQoRm9ybWF0U3RyaW5nIC1TdHJpbmcgJElucHV0T2JqZWN0KSIiIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gQ29udmVydFRvSnNvbkludGVybmFsIHsNCiAgICBwYXJhbSgNCiAgICAgICAgJElucHV0T2JqZWN0LCAjIG5vIHR5cGUgZm9yIGEgcmVhc29uDQogICAgICAgIFtJbnQzMl0gJFdoaXRlU3BhY2VQYWQgPSAwKQ0KICAgIFtTdHJpbmddICRKc29uID0gIiINCiAgICAkS2V5cyA9IEAoKQ0KICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIldoaXRlU3BhY2VQYWQ6ICRXaGl0ZVNwYWNlUGFkLiINCiAgICBpZiAoJG51bGwgLWVxICRJbnB1dE9iamVjdCkgew0KICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICJHb3QgJ251bGwnIGluIGAkSW5wdXRPYmplY3QgaW4gaW5uZXIgZnVuY3Rpb24iDQogICAgICAgICRudWxsDQogICAgfQ0KICAgIGVsc2VpZiAoJElucHV0T2JqZWN0IC1pcyBbQm9vbF0gLWFuZCAkSW5wdXRPYmplY3QgLWVxICR0cnVlKSB7DQogICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIkdvdCAndHJ1ZScgaW4gYCRJbnB1dE9iamVjdCBpbiBpbm5lciBmdW5jdGlvbiINCiAgICAgICAgJHRydWUNCiAgICB9DQogICAgZWxzZWlmICgkSW5wdXRPYmplY3QgLWlzIFtCb29sXSAtYW5kICRJbnB1dE9iamVjdCAtZXEgJGZhbHNlKSB7DQogICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIkdvdCAnZmFsc2UnIGluIGAkSW5wdXRPYmplY3QgaW4gaW5uZXIgZnVuY3Rpb24iDQogICAgICAgICRmYWxzZQ0KICAgIH0NCiAgICBlbHNlaWYgKCRJbnB1dE9iamVjdCAtaXMgW0hhc2hUYWJsZV0pIHsNCiAgICAgICAgJEtleXMgPSBAKCRJbnB1dE9iamVjdC5LZXlzKQ0KICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICJJbnB1dCBvYmplY3QgaXMgYSBoYXNoIHRhYmxlIChrZXlzOiAkKCRLZXlzIC1qb2luICcsICcpKS4iDQogICAgfQ0KICAgIGVsc2VpZiAoJElucHV0T2JqZWN0LkdldFR5cGUoKS5GdWxsTmFtZSAtZXEgIlN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDdXN0b21PYmplY3QiKSB7DQogICAgICAgICRLZXlzID0gQChHZXQtTWVtYmVyIC1JbnB1dE9iamVjdCAkSW5wdXRPYmplY3QgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IHwNCiAgICAgICAgICAgIFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IE5hbWUpDQogICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIklucHV0IG9iamVjdCBpcyBhIGN1c3RvbSBQb3dlclNoZWxsIG9iamVjdCAocHJvcGVydGllczogJCgkS2V5cyAtam9pbiAnLCAnKSkuIg0KICAgIH0NCiAgICBlbHNlaWYgKCRJbnB1dE9iamVjdC5HZXRUeXBlKCkuTmFtZSAtbWF0Y2ggJ1xbXF18QXJyYXknKSB7DQogICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIklucHV0IG9iamVjdCBhcHBlYXJzIHRvIGJlIG9mIGEgY29sbGVjdGlvbi9hcnJheSB0eXBlLiINCiAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAiQnVpbGRpbmcgSlNPTiBmb3IgYXJyYXkgaW5wdXQgb2JqZWN0LiINCiAgICAgICAgIyRKc29uICs9ICIgIiAqICgoNCAqICgkV2hpdGVTcGFjZVBhZCAvIDQpKSArIDQpICsgIltgbiIgKyAoKCRJbnB1dE9iamVjdCB8IEZvckVhY2gtT2JqZWN0IHsNCiAgICAgICAgJEpzb24gKz0gIltgbiIgKyAoKCRJbnB1dE9iamVjdCB8IEZvckVhY2gtT2JqZWN0IHsNCiAgICAgICAgICAgIGlmICgkbnVsbCAtZXEgJF8pIHsNCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICJHb3QgbnVsbCBpbnNpZGUgYXJyYXkuIg0KICAgICAgICAgICAgICAgICIgIiAqICgoNCAqICgkV2hpdGVTcGFjZVBhZCAvIDQpKSArIDQpICsgIm51bGwiDQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlaWYgKCRfIC1pcyBbQm9vbF0gLWFuZCAkXyAtZXEgJHRydWUpIHsNCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICJHb3QgJ3RydWUnIGluc2lkZSBhcnJheS4iDQogICAgICAgICAgICAgICAgIiAiICogKCg0ICogKCRXaGl0ZVNwYWNlUGFkIC8gNCkpICsgNCkgKyAidHJ1ZSINCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2VpZiAoJF8gLWlzIFtCb29sXSAtYW5kICRfIC1lcSAkZmFsc2UpIHsNCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICJHb3QgJ2ZhbHNlJyBpbnNpZGUgYXJyYXkuIg0KICAgICAgICAgICAgICAgICIgIiAqICgoNCAqICgkV2hpdGVTcGFjZVBhZCAvIDQpKSArIDQpICsgImZhbHNlIg0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZWlmICgkXyAtaXMgW0hhc2hUYWJsZV0gLW9yICRfLkdldFR5cGUoKS5GdWxsTmFtZSAtZXEgIlN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDdXN0b21PYmplY3QiIC1vciAkXy5HZXRUeXBlKCkuTmFtZSAtbWF0Y2ggJ1xbXF18QXJyYXknKSB7DQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAiRm91bmQgYXJyYXksIGhhc2ggdGFibGUgb3IgY3VzdG9tIFBvd2VyU2hlbGwgb2JqZWN0IGluc2lkZSBhcnJheS4iDQogICAgICAgICAgICAgICAgIiAiICogKCg0ICogKCRXaGl0ZVNwYWNlUGFkIC8gNCkpICsgNCkgKyAoQ29udmVydFRvSnNvbkludGVybmFsIC1JbnB1dE9iamVjdCAkXyAtV2hpdGVTcGFjZVBhZCAoJFdoaXRlU3BhY2VQYWQgKyA0KSkgLXJlcGxhY2UgJ1xzKixccyokJyAjLXJlcGxhY2UgJ1wgezR9XScsICddJw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAiR290IGEgbnVtYmVyIG9yIHN0cmluZyBpbnNpZGUgYXJyYXkuIg0KICAgICAgICAgICAgICAgICRUZW1wSnNvblN0cmluZyA9IEdldE51bWJlck9yU3RyaW5nIC1JbnB1dE9iamVjdCAkXw0KICAgICAgICAgICAgICAgICIgIiAqICgoNCAqICgkV2hpdGVTcGFjZVBhZCAvIDQpKSArIDQpICsgJFRlbXBKc29uU3RyaW5nDQogICAgICAgICAgICB9DQogICAgICAgICN9KSAtam9pbiAiLGBuIikgKyAiYG5dLGBuIg0KICAgICAgICB9KSAtam9pbiAiLGBuIikgKyAiYG4kKCIgIiAqICg0ICogKCRXaGl0ZVNwYWNlUGFkIC8gNCkpKV0sYG4iDQogICAgfQ0KICAgIGVsc2Ugew0KICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICJJbnB1dCBvYmplY3QgaXMgYSBzaW5nbGUgZWxlbWVudCAodHJlYXRlZCBhcyBzdHJpbmcvbnVtYmVyKS4iDQogICAgICAgIEdldE51bWJlck9yU3RyaW5nIC1JbnB1dE9iamVjdCAkSW5wdXRPYmplY3QNCiAgICB9DQogICAgaWYgKCRLZXlzLkNvdW50KSB7DQogICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIkJ1aWxkaW5nIEpTT04gZm9yIGhhc2ggdGFibGUgb3IgY3VzdG9tIFBvd2VyU2hlbGwgb2JqZWN0LiINCiAgICAgICAgJEpzb24gKz0gIntgbiINCiAgICAgICAgZm9yZWFjaCAoJEtleSBpbiAkS2V5cykgew0KICAgICAgICAgICAgIyAtaXMgW1BTQ3VzdG9tT2JqZWN0XSkgeyAjIHRoaXMgd2FzIGJ1Z2d5IHdpdGggY2FsY3VsYXRlZCBwcm9wZXJ0aWVzLCB0aGUgdmFsdWUgd2FzIHRob3VnaHQgdG8gYmUgUFNDdXN0b21PYmplY3QNCiAgICAgICAgICAgIGlmICgkbnVsbCAtZXEgJElucHV0T2JqZWN0LiRLZXkpIHsNCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICJHb3QgbnVsbCBhcyBgJElucHV0T2JqZWN0LmAkS2V5IGluIGlubmVyIGhhc2ggb3IgUFMgb2JqZWN0LiINCiAgICAgICAgICAgICAgICAkSnNvbiArPSAiICIgKiAoKDQgKiAoJFdoaXRlU3BhY2VQYWQgLyA0KSkgKyA0KSArICIiIiRLZXkiIjogbnVsbCxgbiINCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2VpZiAoJElucHV0T2JqZWN0LiRLZXkgLWlzIFtCb29sXSAtYW5kICRJbnB1dE9iamVjdC4kS2V5IC1lcSAkdHJ1ZSkgew0KICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIkdvdCAndHJ1ZScgaW4gYCRJbnB1dE9iamVjdC5gJEtleSBpbiBpbm5lciBoYXNoIG9yIFBTIG9iamVjdC4iDQogICAgICAgICAgICAgICAgJEpzb24gKz0gIiAiICogKCg0ICogKCRXaGl0ZVNwYWNlUGFkIC8gNCkpICsgNCkgKyAiIiIkS2V5IiI6IHRydWUsYG4iICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZWlmICgkSW5wdXRPYmplY3QuJEtleSAtaXMgW0Jvb2xdIC1hbmQgJElucHV0T2JqZWN0LiRLZXkgLWVxICRmYWxzZSkgew0KICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIkdvdCAnZmFsc2UnIGluIGAkSW5wdXRPYmplY3QuYCRLZXkgaW4gaW5uZXIgaGFzaCBvciBQUyBvYmplY3QuIg0KICAgICAgICAgICAgICAgICRKc29uICs9ICIgIiAqICgoNCAqICgkV2hpdGVTcGFjZVBhZCAvIDQpKSArIDQpICsgIiIiJEtleSIiOiBmYWxzZSxgbiINCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2VpZiAoJElucHV0T2JqZWN0LiRLZXkgLWlzIFtIYXNoVGFibGVdIC1vciAkSW5wdXRPYmplY3QuJEtleS5HZXRUeXBlKCkuRnVsbE5hbWUgLWVxICJTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3VzdG9tT2JqZWN0Iikgew0KICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIklucHV0IG9iamVjdCdzIHZhbHVlIGZvciBrZXkgJyRLZXknIGlzIGEgaGFzaCB0YWJsZSBvciBjdXN0b20gUG93ZXJTaGVsbCBvYmplY3QuIg0KICAgICAgICAgICAgICAgICRKc29uICs9ICIgIiAqICgkV2hpdGVTcGFjZVBhZCArIDQpICsgIiIiJEtleSIiOmBuJCgiICIgKiAoJFdoaXRlU3BhY2VQYWQgKyA0KSkiDQogICAgICAgICAgICAgICAgJEpzb24gKz0gQ29udmVydFRvSnNvbkludGVybmFsIC1JbnB1dE9iamVjdCAkSW5wdXRPYmplY3QuJEtleSAtV2hpdGVTcGFjZVBhZCAoJFdoaXRlU3BhY2VQYWQgKyA0KQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZWlmICgkSW5wdXRPYmplY3QuJEtleS5HZXRUeXBlKCkuTmFtZSAtbWF0Y2ggJ1xbXF18QXJyYXknKSB7DQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAiSW5wdXQgb2JqZWN0J3MgdmFsdWUgZm9yIGtleSAnJEtleScgaGFzIGEgdHlwZSB0aGF0IGFwcGVhcnMgdG8gYmUgYSBjb2xsZWN0aW9uL2FycmF5LiINCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICJCdWlsZGluZyBKU09OIGZvciAke0tleX0ncyBhcnJheSB2YWx1ZS4iDQogICAgICAgICAgICAgICAgJEpzb24gKz0gIiAiICogKCRXaGl0ZVNwYWNlUGFkICsgNCkgKyAiIiIkS2V5IiI6YG4kKCIgIiAqICgoNCAqICgkV2hpdGVTcGFjZVBhZCAvIDQpKSArIDQpKVtgbiIgKyAoKCRJbnB1dE9iamVjdC4kS2V5IHwgRm9yRWFjaC1PYmplY3Qgew0KICAgICAgICAgICAgICAgICAgICAjV3JpdGUtVmVyYm9zZSAiVHlwZSBpbnNpZGUgYXJyYXkgaW5zaWRlIGFycmF5L2hhc2gvUFNPYmplY3Q6ICQoJF8uR2V0VHlwZSgpLkZ1bGxOYW1lKSINCiAgICAgICAgICAgICAgICAgICAgaWYgKCRudWxsIC1lcSAkXykgew0KICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAiR290IG51bGwgaW5zaWRlIGFycmF5IGluc2lkZSBpbnNpZGUgYXJyYXkuIg0KICAgICAgICAgICAgICAgICAgICAgICAgIiAiICogKCg0ICogKCRXaGl0ZVNwYWNlUGFkIC8gNCkpICsgOCkgKyAibnVsbCINCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlaWYgKCRfIC1pcyBbQm9vbF0gLWFuZCAkXyAtZXEgJHRydWUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIkdvdCAndHJ1ZScgaW5zaWRlIGFycmF5IGluc2lkZSBpbnNpZGUgYXJyYXkuIg0KICAgICAgICAgICAgICAgICAgICAgICAgIiAiICogKCg0ICogKCRXaGl0ZVNwYWNlUGFkIC8gNCkpICsgOCkgKyAidHJ1ZSINCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlaWYgKCRfIC1pcyBbQm9vbF0gLWFuZCAkXyAtZXEgJGZhbHNlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICJHb3QgJ2ZhbHNlJyBpbnNpZGUgYXJyYXkgaW5zaWRlIGluc2lkZSBhcnJheS4iDQogICAgICAgICAgICAgICAgICAgICAgICAiICIgKiAoKDQgKiAoJFdoaXRlU3BhY2VQYWQgLyA0KSkgKyA4KSArICJmYWxzZSINCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlaWYgKCRfIC1pcyBbSGFzaFRhYmxlXSAtb3IgJF8uR2V0VHlwZSgpLkZ1bGxOYW1lIC1lcSAiU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0N1c3RvbU9iamVjdCIgYA0KICAgICAgICAgICAgICAgICAgICAgICAgLW9yICRfLkdldFR5cGUoKS5OYW1lIC1tYXRjaCAnXFtcXXxBcnJheScpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIkZvdW5kIGFycmF5LCBoYXNoIHRhYmxlIG9yIGN1c3RvbSBQb3dlclNoZWxsIG9iamVjdCBpbnNpZGUgaW5zaWRlIGFycmF5LiINCiAgICAgICAgICAgICAgICAgICAgICAgICIgIiAqICgoNCAqICgkV2hpdGVTcGFjZVBhZCAvIDQpKSArIDgpICsgKENvbnZlcnRUb0pzb25JbnRlcm5hbCAtSW5wdXRPYmplY3QgJF8gLVdoaXRlU3BhY2VQYWQgKCRXaGl0ZVNwYWNlUGFkICsgOCkpIC1yZXBsYWNlICdccyosXHMqJCcNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIkdvdCBhIHN0cmluZyBvciBudW1iZXIgaW5zaWRlIGluc2lkZSBhcnJheS4iDQogICAgICAgICAgICAgICAgICAgICAgICAkVGVtcEpzb25TdHJpbmcgPSBHZXROdW1iZXJPclN0cmluZyAtSW5wdXRPYmplY3QgJF8NCiAgICAgICAgICAgICAgICAgICAgICAgICIgIiAqICgoNCAqICgkV2hpdGVTcGFjZVBhZCAvIDQpKSArIDgpICsgJFRlbXBKc29uU3RyaW5nDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9KSAtam9pbiAiLGBuIikgKyAiYG4kKCIgIiAqICg0ICogKCRXaGl0ZVNwYWNlUGFkIC8gNCkgKyA0ICkpXSxgbiINCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIkdvdCBhIHN0cmluZyBpbnNpZGUgaW5zaWRlIGhhc2h0YWJsZSBvciBQU09iamVjdC4iDQogICAgICAgICAgICAgICAgIyAnXFwoPyFbIi9iZm5ydF18dVswLTlhLWZdezR9KScNCiAgICAgICAgICAgICAgICAkVGVtcEpzb25TdHJpbmcgPSBHZXROdW1iZXJPclN0cmluZyAtSW5wdXRPYmplY3QgJElucHV0T2JqZWN0LiRLZXkNCiAgICAgICAgICAgICAgICAkSnNvbiArPSAiICIgKiAoKDQgKiAoJFdoaXRlU3BhY2VQYWQgLyA0KSkgKyA0KSArICIiIiRLZXkiIjogJFRlbXBKc29uU3RyaW5nLGBuIg0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgICRKc29uID0gJEpzb24gLXJlcGxhY2UgJ1xzKiwkJyAjIHJlbW92ZSB0cmFpbGluZyBjb21tYSB0aGF0J2xsIGJyZWFrIHN5bnRheA0KICAgICAgICAkSnNvbiArPSAiYG4iICsgIiAiICogJFdoaXRlU3BhY2VQYWQgKyAifSxgbiINCiAgICB9DQogICAgJEpzb24NCn0NCg0KZnVuY3Rpb24gQ29udmVydFRvLUpzb24yIHsNCiAgICBbQ21kbGV0QmluZGluZygpXQ0KICAgICNbT3V0cHV0VHlwZShbVm9pZF0sIFtCb29sXSwgW1N0cmluZ10pXQ0KICAgIHBhcmFtKA0KICAgICAgICBbQWxsb3dOdWxsKCldDQogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlLA0KICAgICAgICAgICAgICAgICAgIFZhbHVlRnJvbVBpcGVsaW5lPSR0cnVlLA0KICAgICAgICAgICAgICAgICAgIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JHRydWUpXQ0KICAgICAgICAkSW5wdXRPYmplY3QsDQogICAgICAgIFtTd2l0Y2hdICRDb21wcmVzcywNCiAgICAgICAgW1N3aXRjaF0gJENvZXJjZU51bWJlclN0cmluZ3MgPSAkZmFsc2UpDQogICAgYmVnaW57DQogICAgICAgICRKc29uT3V0cHV0ID0gIiINCiAgICAgICAgJENvbGxlY3Rpb24gPSBAKCkNCiAgICAgICAgIyBOb3Qgb3B0aW1hbCwgYnV0IHRoZSBlYXNpZXN0IG5vdy4NCiAgICAgICAgW0Jvb2xdICRTY3JpcHQ6Q29lcmNlTnVtYmVyU3RyaW5ncyA9ICRDb2VyY2VOdW1iZXJTdHJpbmdzDQogICAgICAgIFtTdHJpbmddICRTY3JpcHQ6TnVtYmVyUmVnZXggPSAnXi0/XGQrKD86KD86XC5cZCspPyg/OmVbK1wtXT9cZCspPyk/JCcNCiAgICAgICAgIyRTY3JpcHQ6TnVtYmVyQW5kVmFsdWVSZWdleCA9ICdeLT9cZCsoPzooPzpcLlxkKyk/KD86ZVsrXC1dP1xkKyk/KT8kfF4oPzp0cnVlfGZhbHNlfG51bGwpJCcNCiAgICB9DQogICAgcHJvY2VzcyB7DQogICAgICAgICMgSGFja2luZyBvbiBwaXBlbGluZSBzdXBwb3J0IC4uLg0KICAgICAgICBpZiAoJF8pIHsNCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIkFkZGluZyBvYmplY3QgdG8gYCRDb2xsZWN0aW9uLiBUeXBlIG9mIG9iamVjdDogJCgkXy5HZXRUeXBlKCkuRnVsbE5hbWUpLiINCiAgICAgICAgICAgICRDb2xsZWN0aW9uICs9ICRfDQogICAgICAgIH0NCiAgICB9DQogICAgZW5kIHsNCiAgICAgICAgaWYgKCRDb2xsZWN0aW9uLkNvdW50KSB7DQogICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICJDb2xsZWN0aW9uIGNvdW50OiAkKCRDb2xsZWN0aW9uLkNvdW50KSwgdHlwZSBvZiBmaXJzdCBvYmplY3Q6ICQoJENvbGxlY3Rpb25bMF0uR2V0VHlwZSgpLkZ1bGxOYW1lKS4iDQogICAgICAgICAgICAkSnNvbk91dHB1dCA9IENvbnZlcnRUb0pzb25JbnRlcm5hbCAtSW5wdXRPYmplY3QgKCRDb2xsZWN0aW9uIHwgRm9yRWFjaC1PYmplY3QgeyAkXyB9KQ0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgJEpzb25PdXRwdXQgPSBDb252ZXJ0VG9Kc29uSW50ZXJuYWwgLUlucHV0T2JqZWN0ICRJbnB1dE9iamVjdA0KICAgICAgICB9DQogICAgICAgIGlmICgkbnVsbCAtZXEgJEpzb25PdXRwdXQpIHsNCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIlJldHVybmluZyBgJG51bGwuIg0KICAgICAgICAgICAgcmV0dXJuICRudWxsICMgYmVjb21lcyBhbiBlbXB0eSBzdHJpbmcgOi8NCiAgICAgICAgfQ0KICAgICAgICBlbHNlaWYgKCRKc29uT3V0cHV0IC1pcyBbQm9vbF0gLWFuZCAkSnNvbk91dHB1dCAtZXEgJHRydWUpIHsNCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgIlJldHVybmluZyBgJHRydWUuIg0KICAgICAgICAgICAgW0Jvb2xdICR0cnVlICMgZG9lc24ndCBwcmVzZXJ2ZSBib29sIHR5cGUgOi8gYnV0IHdvcmtzIGZvciBjb21wYXJpc29ucyBhZ2FpbnN0ICR0cnVlDQogICAgICAgIH0NCiAgICAgICAgZWxzZWlmICgkSnNvbk91dHB1dC1pcyBbQm9vbF0gLWFuZCAkSnNvbk91dHB1dCAtZXEgJGZhbHNlKSB7DQogICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICJSZXR1cm5pbmcgYCRmYWxzZS4iDQogICAgICAgICAgICBbQm9vbF0gJGZhbHNlICMgZG9lc24ndCBwcmVzZXJ2ZSBib29sIHR5cGUgOi8gYnV0IHdvcmtzIGZvciBjb21wYXJpc29ucyBhZ2FpbnN0ICRmYWxzZQ0KICAgICAgICB9DQogICAgICAgIGVsc2VpZiAoJENvbXByZXNzKSB7DQogICAgICAgICAgICBXcml0ZS1WZXJib3NlIC1NZXNzYWdlICJDb21wcmVzcyBzcGVjaWZpZWQuIg0KICAgICAgICAgICAgKA0KICAgICAgICAgICAgICAgICgkSnNvbk91dHB1dCAtc3BsaXQgIlxuIiB8IFdoZXJlLU9iamVjdCB7ICRfIC1tYXRjaCAnXFMnIH0pIC1qb2luICJgbiIgYA0KICAgICAgICAgICAgICAgICAgICAtcmVwbGFjZSAnXlxzKnxccyosXHMqJCcgLXJlcGxhY2UgJ1wgKlxdXCAqJCcsICddJw0KICAgICAgICAgICAgKSAtcmVwbGFjZSAoICMgdGhlc2UgbmV4dCBsaW5lcyBjb21wcmVzcyAuLi4NCiAgICAgICAgICAgICAgICAnKD9tKV5ccyooIig/OlxcInxbXiJdKSsiKTogKCg/OiIoPzpcXCJ8W14iXSkrIil8KD86bnVsbHx0cnVlfGZhbHNlfCg/OicgKyBgDQogICAgICAgICAgICAgICAgICAgICRTY3JpcHQ6TnVtYmVyUmVnZXguVHJpbSgnXiQnKSArIGANCiAgICAgICAgICAgICAgICAgICAgJykpKVxzKig/PENvbW1hPiwpP1xzKiQnKSwgImAkezF9OmAkezJ9YCR7Q29tbWF9YG4iIGANCiAgICAgICAgICAgICAgLXJlcGxhY2UgJyg/bSleXHMqfFxzKlx6fFtcclxuXSsnDQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAoJEpzb25PdXRwdXQgLXNwbGl0ICJcbiIgfCBXaGVyZS1PYmplY3QgeyAkXyAtbWF0Y2ggJ1xTJyB9KSAtam9pbiAiYG4iIGANCiAgICAgICAgICAgICAgICAtcmVwbGFjZSAnXlxzKnxccyosXHMqJCcgLXJlcGxhY2UgJ1wgKlxdXCAqJCcsICddJw0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBDb252ZXJ0VG8tSnNvbjIwKFtvYmplY3RdICRpdGVtKXsNCiAgICBhZGQtdHlwZSAtYXNzZW1ibHkgc3lzdGVtLndlYi5leHRlbnNpb25zDQogICAgJHBzX2pzPW5ldy1vYmplY3Qgc3lzdGVtLndlYi5zY3JpcHQuc2VyaWFsaXphdGlvbi5qYXZhc2NyaXB0U2VyaWFsaXplcg0KICAgIHJldHVybiAkcHNfanMuU2VyaWFsaXplKCRpdGVtKQ0KfQ0KDQpmdW5jdGlvbiBDb252ZXJ0RnJvbS1Kc29uMjAoW29iamVjdF0gJGl0ZW0peyANCiAgICBhZGQtdHlwZSAtYXNzZW1ibHkgc3lzdGVtLndlYi5leHRlbnNpb25zDQogICAgJHBzX2pzPW5ldy1vYmplY3Qgc3lzdGVtLndlYi5zY3JpcHQuc2VyaWFsaXphdGlvbi5qYXZhc2NyaXB0U2VyaWFsaXplcg0KDQogICAgI1RoZSBjb21tYSBvcGVyYXRvciBpcyB0aGUgYXJyYXkgY29uc3RydWN0aW9uIG9wZXJhdG9yIGluIFBvd2VyU2hlbGwNCiAgICByZXR1cm4gLCRwc19qcy5EZXNlcmlhbGl6ZU9iamVjdCgkaXRlbSkNCn0NCg0KDQpmdW5jdGlvbiBIYXNoVGFibGVfQXJyYXlfSlNPTnsNClBhcmFtKCRIZWFkaW5nVW5kZXJfZGF0YU9iamVjdF9BcnJheSwkQXJyYXksJHRhc2tOYW1lLCRzdGF0dXMsJENvZGUsJHN0ZG91dCwkc3RkZXJyLCRvYmplY3RzLCRyZXN1bHQpDQoNCmlmKCRwc3ZlcnNpb250YWJsZS5QU1ZlcnNpb24uTWFqb3IgLWVxIDIpDQp7DQogICAgaWYoJHN0ZGVyciAtZXEgJG51bGwpew0KICAgICRheGEgPSBDb252ZXJ0VG8tSnNvbjIgLUlucHV0T2JqZWN0IEB7dGFza05hbWUgPSAiJHRhc2tOYW1lIjtzdGF0dXMgPSAiJHN0YXR1cyI7Q29kZSA9ICIkQ29kZSI7c3Rkb3V0ID0gQCgiJHN0ZG91dCIpO29iamVjdHMgPSAiJG9iamVjdHMiO3Jlc3VsdCA9ICIkcmVzdWx0Ig0KICAgIGRhdGFPYmplY3QgPSBAeyIkSGVhZGluZ1VuZGVyX2RhdGFPYmplY3RfQXJyYXkiID0gQCgkQXJyYXkpfQ0KICAgIH0NCiAgICB9DQoNCiAgICBpZigkc3RkZXJyIC1uZSAkbnVsbCl7DQogICAgJGF4YSA9IENvbnZlcnRUby1Kc29uMiAtSW5wdXRPYmplY3QgQHt0YXNrTmFtZSA9ICIkdGFza05hbWUiO3N0YXR1cyA9ICIkc3RhdHVzIjtDb2RlID0gIiRDb2RlIjtzdGRvdXQgPSBAKCIkc3Rkb3V0Iik7cmVzdWx0ID0gIiRyZXN1bHQiDQogICAgICAgIHN0ZGVyciA9IEAoJHN0ZGVycikNCiAgICB9DQogICAgfQ0KfWVsc2UNCnsNCiN3cml0ZS1ob3N0ICdpdHMgbm90IFZlcnNpb24gMicNCiAgICBpZigkc3RkZXJyIC1lcSAkbnVsbCl7DQogICAgICRIYXNoVGFibGUgPSBbb3JkZXJlZF1Ae3Rhc2tOYW1lID0gIiR0YXNrTmFtZSI7c3RhdHVzID0gIiRzdGF0dXMiO0NvZGUgPSAiJENvZGUiO3N0ZG91dCA9IEAoIiRzdGRvdXQiKTtvYmplY3RzID0gIiRvYmplY3RzIjtyZXN1bHQgPSAiJHJlc3VsdCINCiAgICAgICAgZGF0YU9iamVjdCA9IEB7IiRIZWFkaW5nVW5kZXJfZGF0YU9iamVjdF9BcnJheSIgPSBAKCRBcnJheSl9DQogICAgICAgIH0NCiAgICAkYXhhID0gQ29udmVydFRvLUpzb24gLUlucHV0T2JqZWN0ICRIYXNoVGFibGUgLURlcHRoIDEwMA0KICAgIH0NCg0KICAgIGlmKCRzdGRlcnIgLW5lICRudWxsKXsNCiAgICAkSGFzaFRhYmxlID0gW29yZGVyZWRdQHt0YXNrTmFtZSA9ICIkdGFza05hbWUiO3N0YXR1cyA9ICIkc3RhdHVzIjtDb2RlID0gIiRDb2RlIjtyZXN1bHQgPSAiJHJlc3VsdCI7c3Rkb3V0ID0gQCgiJHN0ZG91dCIpDQogICAgICAgIHN0ZGVyciA9IEAoJHN0ZGVycikNCiAgICB9DQogICAgJGF4YSA9IENvbnZlcnRUby1Kc29uIC1JbnB1dE9iamVjdCAkSGFzaFRhYmxlIC1EZXB0aCAxMDANCiAgICB9DQp9DQojJEJhY2tUT0hhc1RhYmxlID0gQ29udmVydEZyb20tSnNvbjIwICRheGENCiMkQmFja1RPSGFzVGFibGUNCiRheGENCn0NCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIENvbnZlcnQgdG8gSlNPTiAtLUVORA0KDQoNCmlmKChHZXQtV21pT2JqZWN0IC1OYW1lc3BhY2UgInJvb3RcQ0lNVjJcVGVybWluYWxTZXJ2aWNlcyIgLUNsYXNzICJXaW4zMl9UZXJtaW5hbFNlcnZpY2VTZXR0aW5nIiAgfCAlIHskXy5UZXJtaW5hbFNlcnZlck1vZGV9KSAtZXEgMCkNCnsNCg0KJE9iamVjdENvdW50ID0gJERhdGExLmNvdW50DQoNCiRHbG9iYWw6SGFzaERhdGEgPSBIYXNoVGFibGVfQXJyYXlfSlNPTiAtSGVhZGluZ1VuZGVyX2RhdGFPYmplY3RfQXJyYXkgIlNlc3Npb24gRGV0YWlscyIgLUFycmF5ICREYXRhMSAtdGFza05hbWUgJ0NoZWNrIEFjdGl2ZSBSRFAgU2Vzc2lvbnMnIC1zdGF0dXMgJ1N1Y2Nlc3MnIC1Db2RlICcwJyAtc3Rkb3V0ICRzdGRvdXQgLW9iamVjdHMgIiRPYmplY3RDb3VudCIgLXJlc3VsdCAnU3VjY2VzczogQWN0aXZlIFNlc3Npb25zIGhhcyBiZWVuIHJldHJpdmVkJw0KDQp9ZWxzZXsNCg0KICAkR2xvYmFsOlNUREVyciA9IEdldF9zdGRlcnIgLVRpdGxlICdVbmFibGUgdG8gcHJvY2VzcyBmdXJ0aGVyJyAtZGV0YWlscyAnU2NyaXB0IG11c3QgYmUgcnVuIG9uIGEgVGVybWluYWwgU2VydmVyJw0KDQogICRHbG9iYWw6SGFzaERhdGEgPSBIYXNoVGFibGVfQXJyYXlfSlNPTiAtc3RkZXJyICRHbG9iYWw6U1RERXJyIC10YXNrTmFtZSAnQ2hlY2sgQWN0aXZlIFJEUCBTZXNzaW9ucycgLXN0YXR1cyAnRmFpbGVkJyAtQ29kZSAnMScgLXN0ZG91dCAiU2NyaXB0IG11c3QgYmUgcnVuIG9uIGEgVGVybWluYWwgU2VydmVyIiAtcmVzdWx0ICJFcnJvcjogU2NyaXB0IG11c3QgYmUgcnVuIG9uIGEgVGVybWluYWwgU2VydmVyIg0KfQ0KJEdsb2JhbDpIYXNoRGF0YQ==","jsonSchema":"","uiSchema":"","isHDScript":true}