{"id":"155548e4-8377-11e9-aff3-00155d130b89","partnerId":"00000000-0000-0000-0000-000000000000","category":["Staging"],"description":"Set static IP information","engine":"powershell","engineMaxVersion":5,"expectedExecutionTimeSec":300,"failureMessage":"Executed with errors","successMessage":"Successfully Executed","internal":false,"name":"Set static IP information","tags":["Windows 7","Windows 10"],"sequence":true,"content":"",
"jsonSchema":{
  "type":"object",
"properties":{
	"Adapter_Name":{
      "type":"string",
      "title":"Enter Network Adapter Name",
      "minLength":1
    },
      "Address_Type_IPv4_IPv6": {
        "type": "string",
        "title": "Select Address Type IPV4 or IPV6",
        "enum": [
          "IPV4",
          "IPV6"
        ]
      },
	"IPv4_OR_IPv6_Address":{
      "type":"string",
      "title":"Enter IPv4 OR IPv6 Address",
      "minLength":1
    },
	"IPv4_OR_IPv6_Gateway":{
      "type":"string",
      "title":"Enter IPv4 OR IPv6 Gateway",
      "minLength":1
    },
	"IPv4_Subnet_Mask_OR_IPv6_Subnet_Prefix_Length":{
      "type":"string",
      "title":"Enter IPv4 Subnet Mask OR IPv6 Subnet Prefix Length",
      "minLength":1
    }
},
  "required":[
	"Adapter_Name",
	"Address_Type_IPv4_IPv6",
	"IPv4_OR_IPv6_Address",
	"IPv4_OR_IPv6_Gateway",
	"IPv4_Subnet_Mask_OR_IPv6_Subnet_Prefix_Length"
  ],
  "additionalProperties": false
},
"uiSchema":{
"Adapter_Name":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"Address_Type_IPv4_IPv6":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },  
"IPv4_OR_IPv6_Address":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"IPv4_OR_IPv6_Gateway":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },
"IPv4_Subnet_Mask_OR_IPv6_Subnet_Prefix_Length":{
    "ui:autofocus":true,
    "classNames":"col-sm-12"
  },

  "ui:order":["Adapter_Name", "Address_Type_IPv4_IPv6", "IPv4_OR_IPv6_Address", "IPv4_OR_IPv6_Gateway", "IPv4_Subnet_Mask_OR_IPv6_Subnet_Prefix_Length"]
},
"isHDScript":false
}
