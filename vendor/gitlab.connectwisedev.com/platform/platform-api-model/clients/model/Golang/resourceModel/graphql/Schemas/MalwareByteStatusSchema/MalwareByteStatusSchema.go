package MalwareByteStatusSchema

import (
	"errors"
	"strings"
	"reflect"
	"github.com/graphql-go/graphql"
	"github.com/ContinuumLLC/rmm-device-graphql-service/Relay"
)

//MalwareByteStatusData : MalwareByteStatusData Structure
type MalwareByteStatusData struct {
	SiteID          int64  `json:"siteId"`
	PartnerID       int64  `json:"partnerId"`
	RegID           int64  `json:"regId"`
	MBSyncStatus 	string `json:"mbSyncstatus"`
}

//MalwareByteStatusType : MalwareByteStatus GraphQL Schema
var MalwareByteStatusType = graphql.NewObject(graphql.ObjectConfig{
	Name: "malwareByteStatus",
	Fields: graphql.Fields{
		"siteId": &graphql.Field{
			Type:        graphql.String,
			Description: "Unique identifier representing a specific client",
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				if CurData, ok := p.Source.(MalwareByteStatusData); ok {
					return CurData.SiteID, nil
				}
				return nil, nil
			},
		},

		"partnerId": &graphql.Field{
			Type:        graphql.String,
			Description: "Unique identifier for a specific partner",
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				if CurData, ok := p.Source.(MalwareByteStatusData); ok {
					return CurData.PartnerID, nil
				}
				return nil, nil
			},
		},

		"regId": &graphql.Field{
			Type:        graphql.String,
			Description: "Unique identifier for a specific endpoint",
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				if CurData, ok := p.Source.(MalwareByteStatusData); ok {
					return CurData.RegID, nil
				}
				return nil, nil
			},
		},

		"mbSyncstatus": &graphql.Field{
			Type:        graphql.String,
			Description: "Status of malwarebyte",
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				if CurData, ok := p.Source.(MalwareByteStatusData); ok {
					return CurData.MBSyncStatus, nil
				}
				return nil, nil
			},
		},
	},
})

//MalwareByteStatusConnectionDefinition : MalwareByteStatusConnectionDefinition structure
var MalwareByteStatusConnectionDefinition = Relay.ConnectionDefinitions(Relay.ConnectionConfig{
	Name:     "MalwareByteStatus",
	NodeType: MalwareByteStatusType,
})

//MalwareByteStatusListData : MalwareByteStatusListData Structure
type MalwareByteStatusListData struct {
	MalwareByteStatus 	[]MalwareByteStatusData `json:"malwarebyteList"`
	TotalCount      	int64                 	`json:"totalCount"`
}

//MalwareByteStatusListType : MalwareByteStatusList GraphQL Schema
var MalwareByteStatusListType = graphql.NewObject(graphql.ObjectConfig{
	Name: "MalwareByteStatusList",
	Fields: graphql.Fields{
		"malwarebyteList": &graphql.Field{
			Type:        MalwareByteStatusConnectionDefinition.ConnectionType,
			Args:        Relay.ConnectionArgs,
			Description: "malwarebyte status list",
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				args := Relay.NewConnectionArguments(p.Args)
				if CurData, ok := p.Source.(MalwareByteStatusListData); ok {
					var arraySliceRet []interface{}
					for ind := range CurData.MalwareByteStatus {
						arraySliceRet = append(arraySliceRet, CurData.MalwareByteStatus[ind])
					}

					if args.Filter != "" && args.Filter != Relay.NILQUERY{
						var err error
						val := reflect.Indirect(reflect.ValueOf(&MalwareByteStatusData{}))
						arraySliceRet, err = Relay.Filter(string(args.Filter), val, arraySliceRet)
						if err != nil {
							return nil, err
						}
					}
					if args.Sort != "" && args.Sort != Relay.NILQUERY {
						subQuery := strings.Split(string(args.Sort), ";")
						SiteIDASC := func(p1, p2 interface{}) bool {
							return p1.(MalwareByteStatusData).SiteID < p2.(MalwareByteStatusData).SiteID
						}
						SiteIDDESC := func(p1, p2 interface{}) bool {
							return p1.(MalwareByteStatusData).SiteID > p2.(MalwareByteStatusData).SiteID
						}

						RegIDASC := func(p1, p2 interface{}) bool {
							return p1.(MalwareByteStatusData).RegID < p2.(MalwareByteStatusData).RegID
						}
						RegIDDESC := func(p1, p2 interface{}) bool {
							return p1.(MalwareByteStatusData).RegID > p2.(MalwareByteStatusData).RegID
						}

						MBSyncStatusASC := func(p1, p2 interface{}) bool {
							return p1.(MalwareByteStatusData).MBSyncStatus < p2.(MalwareByteStatusData).MBSyncStatus
						}
						MBSyncStatusDESC := func(p1, p2 interface{}) bool {
							return p1.(MalwareByteStatusData).MBSyncStatus > p2.(MalwareByteStatusData).MBSyncStatus
						}

						for i := range subQuery {
							var Key, Column string
							Key, Column, _ = Relay.GetQueryDetails(subQuery[i])
							if strings.ToUpper(Column) == "SITEID" {
								if strings.ToUpper(Key) == Relay.ORDASC {
									Relay.SortBy(SiteIDASC).Sort(arraySliceRet)
								}else if strings.ToUpper(Key) == Relay.ORDDESC {
									Relay.SortBy(SiteIDDESC).Sort(arraySliceRet)
								}
							}else if strings.ToUpper(Column) == "REGID" {
								if strings.ToUpper(Key) == Relay.ORDASC {
									Relay.SortBy(RegIDASC).Sort(arraySliceRet)
								}else if strings.ToUpper(Key) == Relay.ORDDESC {
									Relay.SortBy(RegIDDESC).Sort(arraySliceRet)
								}
							}else if strings.ToUpper(Column) == "MBSYNCSTATUS" {
								if strings.ToUpper(Key) == Relay.ORDASC {
									Relay.SortBy(MBSyncStatusASC).Sort(arraySliceRet)
								}else if strings.ToUpper(Key) == Relay.ORDDESC {
									Relay.SortBy(MBSyncStatusDESC).Sort(arraySliceRet)
								}
							}else{
								return nil, errors.New("MalwareByteStatusData Sort [" + Column + "] No such column exist!!!")
							}
						}
					}
					return Relay.ConnectionFromArray(arraySliceRet, args, ""), nil
				}
				return nil, nil
			},
		},

		"totalCount": &graphql.Field{
			Type:        graphql.String,
			Description: "totalCount of MalwareByteStatus list",
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				if CurData, ok := p.Source.(MalwareByteStatusListData); ok {
					return CurData.TotalCount, nil
				}
				return nil, nil
			},
		},
	},
})
